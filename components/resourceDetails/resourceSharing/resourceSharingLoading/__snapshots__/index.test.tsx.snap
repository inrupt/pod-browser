// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ResourceSharingLoading it renders the component 1`] = `
<WithTheme
  theme={
    Object {
      "breakpoints": Object {
        "between": [Function],
        "down": [Function],
        "keys": Array [
          "xs",
          "sm",
          "md",
          "lg",
          "xl",
        ],
        "only": [Function],
        "up": [Function],
        "values": Object {
          "lg": 1280,
          "md": 960,
          "sm": 600,
          "xl": 1920,
          "xs": 0,
        },
        "width": [Function],
      },
      "direction": "ltr",
      "iconSet": Object {
        "config": Object {
          "cssFiles": Array [
            "css/all.css",
          ],
          "fonts": Array [
            Object {
              "fontFace": "
font-family: 'Font Awesome 5 Free';
font-style: normal;
font-weight: 900;
font-display: block;",
              "fontsPath": "./webfonts",
              "licensePath": "./LICENSE.txt",
              "source": "fa-solid-900.eot",
              "sources": Array [
                Object {
                  "format": "embedded-opentype",
                  "path": "fa-solid-900.eot",
                  "urlAddition": "?#iefix",
                },
                Object {
                  "format": "woff2",
                  "path": "fa-solid-900.woff2",
                },
                Object {
                  "format": "woff",
                  "path": "fa-solid-900.woff",
                },
                Object {
                  "format": "truetype",
                  "path": "fa-solid-900.ttf",
                },
                Object {
                  "format": "svg",
                  "path": "fa-solid-900.svg",
                  "urlAddition": "#fontawesome",
                },
              ],
            },
          ],
          "label": "Font Awesome Solid",
          "name": "fontawesome-solid",
          "npmModule": "@fortawesome/fontawesome-free",
          "type": 0,
        },
        "iconColor": [Function],
        "styles": [Function],
      },
      "icons": Object {
        "config": Object {
          "cssFiles": Array [
            "css/all.css",
          ],
          "fonts": Array [
            Object {
              "fontFace": "
font-family: 'Font Awesome 5 Free';
font-style: normal;
font-weight: 900;
font-display: block;",
              "fontsPath": "./webfonts",
              "licensePath": "./LICENSE.txt",
              "source": "fa-solid-900.eot",
              "sources": Array [
                Object {
                  "format": "embedded-opentype",
                  "path": "fa-solid-900.eot",
                  "urlAddition": "?#iefix",
                },
                Object {
                  "format": "woff2",
                  "path": "fa-solid-900.woff2",
                },
                Object {
                  "format": "woff",
                  "path": "fa-solid-900.woff",
                },
                Object {
                  "format": "truetype",
                  "path": "fa-solid-900.ttf",
                },
                Object {
                  "format": "svg",
                  "path": "fa-solid-900.svg",
                  "urlAddition": "#fontawesome",
                },
              ],
            },
          ],
          "label": "Font Awesome Solid",
          "name": "fontawesome-solid",
          "npmModule": "@fortawesome/fontawesome-free",
          "type": 0,
        },
        "iconColor": [Function],
        "styles": [Function],
      },
      "label": "SDK Default",
      "licenses": Array [
        "fonts/Raleway/OFL.txt",
      ],
      "localFonts": Object {
        "fonts/Raleway/Raleway-ExtraBold": [Function],
        "fonts/Raleway/Raleway-Medium": [Function],
      },
      "mixins": Object {
        "gutters": [Function],
        "toolbar": Object {
          "@media (min-width:0px) and (orientation: landscape)": Object {
            "minHeight": 48,
          },
          "@media (min-width:600px)": Object {
            "minHeight": 64,
          },
          "minHeight": 56,
        },
      },
      "name": "sdk-default",
      "overrides": Object {},
      "palette": Object {
        "action": Object {
          "activatedOpacity": 0.12,
          "active": "rgba(0, 0, 0, 0.54)",
          "disabled": "rgba(0, 0, 0, 0.26)",
          "disabledBackground": "rgba(0, 0, 0, 0.12)",
          "disabledOpacity": 0.38,
          "focus": "rgba(0, 0, 0, 0.12)",
          "focusOpacity": 0.12,
          "hover": "rgba(0, 0, 0, 0.04)",
          "hoverOpacity": 0.04,
          "selected": "rgba(0, 0, 0, 0.08)",
          "selectedOpacity": 0.08,
        },
        "adjustAlpha": [Function],
        "augmentColor": [Function],
        "background": Object {
          "default": "#FFFFFF",
          "paper": "#fff",
        },
        "common": Object {
          "black": "#000",
          "white": "#fff",
        },
        "contrastThreshold": 3,
        "divider": "rgba(0, 0, 0, 0.12)",
        "error": Object {
          "contrastText": "#fff",
          "dark": "#d32f2f",
          "light": "#e57373",
          "main": "#f44336",
        },
        "getContrastText": [Function],
        "grey": Object {
          "100": "#f5f5f5",
          "200": "#eeeeee",
          "300": "#e0e0e0",
          "400": "#bdbdbd",
          "50": "#fafafa",
          "500": "#9e9e9e",
          "600": "#757575",
          "700": "#616161",
          "800": "#424242",
          "900": "#212121",
          "A100": "#d5d5d5",
          "A200": "#aaaaaa",
          "A400": "#303030",
          "A700": "#616161",
        },
        "info": Object {
          "contrastText": "#fff",
          "dark": "#1976d2",
          "light": "#64b5f6",
          "main": "#2196f3",
        },
        "primary": Object {
          "contrastText": "#fff",
          "dark": "rgb(86, 53, 178)",
          "light": "rgb(150, 112, 255)",
          "main": "#7C4DFF",
        },
        "secondary": Object {
          "contrastText": "rgba(0, 0, 0, 0.87)",
          "dark": "#083575",
          "light": "#01C9EA",
          "main": "#18A9E6",
        },
        "success": Object {
          "contrastText": "rgba(0, 0, 0, 0.87)",
          "dark": "#388e3c",
          "light": "#81c784",
          "main": "#4caf50",
        },
        "text": Object {
          "disabled": "rgba(0, 0, 0, 0.38)",
          "hint": "rgba(0, 0, 0, 0.38)",
          "primary": "#4E4E4E",
          "secondary": "#4E4E4E",
        },
        "tonalOffset": 0.2,
        "type": "light",
        "warning": Object {
          "contrastText": "rgba(0, 0, 0, 0.87)",
          "dark": "#f57c00",
          "light": "#ffb74d",
          "main": "#ff9800",
        },
      },
      "props": Object {},
      "shadows": Array [
        "none",
        "0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12)",
        "0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12)",
        "0px 3px 3px -2px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 1px 8px 0px rgba(0,0,0,0.12)",
        "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
        "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
        "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
        "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
        "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
        "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
        "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
        "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
        "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
        "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
        "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
        "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
        "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
        "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
        "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
        "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
        "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
        "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
        "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
        "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
        "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
      ],
      "shape": Object {
        "borderRadius": 4,
      },
      "spacing": [Function],
      "stylesheets": Array [
        "https://fonts.googleapis.com/css?family=Raleway:500,800&display=swap",
      ],
      "transitions": Object {
        "create": [Function],
        "duration": Object {
          "complex": 375,
          "enteringScreen": 225,
          "leavingScreen": 195,
          "short": 250,
          "shorter": 200,
          "shortest": 150,
          "standard": 300,
        },
        "easing": Object {
          "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
          "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
          "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
          "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
        },
        "getAutoHeightDuration": [Function],
      },
      "typography": Object {
        "body": Object {
          "fontFamily": "\\"Raleway-Medium\\"",
          "fontSize": "0.9375rem",
          "fontWeight": 500,
          "letterSpacing": "0.01071em",
          "lineHeight": 1.43,
        },
        "body1": Object {
          "fontFamily": "\\"Raleway-ExtraBold\\"",
          "fontSize": "1rem",
          "fontWeight": 800,
          "letterSpacing": "0.00938em",
          "lineHeight": 1.5,
        },
        "body2": Object {
          "fontFamily": "\\"Raleway-Medium\\"",
          "fontSize": "0.9375rem",
          "fontWeight": 500,
          "letterSpacing": "0.01071em",
          "lineHeight": 1.43,
        },
        "button": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "0.875rem",
          "fontWeight": 500,
          "letterSpacing": "0.02857em",
          "lineHeight": 1.75,
          "textTransform": "uppercase",
        },
        "caption": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "0.75rem",
          "fontWeight": 400,
          "letterSpacing": "0.03333em",
          "lineHeight": 1.66,
        },
        "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
        "fontSize": 14,
        "fontWeightBold": 800,
        "fontWeightLight": 500,
        "fontWeightMedium": 500,
        "fontWeightRegular": 400,
        "h1": Object {
          "fontFamily": "\\"Raleway-ExtraBold\\"",
          "fontSize": "1.375rem",
          "fontWeight": 800,
          "letterSpacing": "-0.01562em",
          "lineHeight": 1.45,
        },
        "h2": Object {
          "fontFamily": "\\"Raleway-ExtraBold\\"",
          "fontSize": "1.125rem",
          "fontWeight": 800,
          "letterSpacing": "-0.00833em",
          "lineHeight": 1.27,
        },
        "h3": Object {
          "fontFamily": "\\"Raleway-ExtraBold\\"",
          "fontSize": "1.05rem",
          "fontWeight": 800,
          "letterSpacing": "0em",
          "lineHeight": 1.2,
        },
        "h4": Object {
          "fontFamily": "\\"Raleway-ExtraBold\\"",
          "fontSize": "1rem",
          "fontWeight": 800,
          "letterSpacing": "0.00735em",
          "lineHeight": 1.1,
        },
        "h5": Object {
          "fontFamily": "\\"Raleway-ExtraBold\\"",
          "fontSize": "1rem",
          "fontWeight": 800,
          "letterSpacing": "0em",
          "lineHeight": 1,
        },
        "h6": Object {
          "fontFamily": "\\"Raleway-ExtraBold\\"",
          "fontSize": "0.625rem",
          "fontWeight": 800,
          "letterSpacing": "0.0075em",
          "lineHeight": 1,
        },
        "heading": Object {
          "fontFamily": "\\"Raleway-ExtraBold\\"",
          "fontSize": "1rem",
          "fontWeight": 800,
          "letterSpacing": "0.00938em",
          "lineHeight": 1.5,
        },
        "htmlFontSize": 16,
        "overline": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "0.75rem",
          "fontWeight": 400,
          "letterSpacing": "0.08333em",
          "lineHeight": 2.66,
          "textTransform": "uppercase",
        },
        "pxToRem": [Function],
        "round": [Function],
        "subtitle1": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "1rem",
          "fontWeight": 400,
          "letterSpacing": "0.00938em",
          "lineHeight": 1.75,
        },
        "subtitle2": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "0.875rem",
          "fontWeight": 500,
          "letterSpacing": "0.00714em",
          "lineHeight": 1.57,
        },
      },
      "zIndex": Object {
        "appBar": 1100,
        "drawer": 1200,
        "mobileStepper": 1000,
        "modal": 1300,
        "snackbar": 1400,
        "speedDial": 1050,
        "tooltip": 1500,
      },
      Symbol(mui.nested): false,
    }
  }
>
  <StylesProvider
    generateClassName={[Function]}
  >
    <ThemeProvider
      theme={
        Object {
          "breakpoints": Object {
            "between": [Function],
            "down": [Function],
            "keys": Array [
              "xs",
              "sm",
              "md",
              "lg",
              "xl",
            ],
            "only": [Function],
            "up": [Function],
            "values": Object {
              "lg": 1280,
              "md": 960,
              "sm": 600,
              "xl": 1920,
              "xs": 0,
            },
            "width": [Function],
          },
          "direction": "ltr",
          "iconSet": Object {
            "config": Object {
              "cssFiles": Array [
                "css/all.css",
              ],
              "fonts": Array [
                Object {
                  "fontFace": "
font-family: 'Font Awesome 5 Free';
font-style: normal;
font-weight: 900;
font-display: block;",
                  "fontsPath": "./webfonts",
                  "licensePath": "./LICENSE.txt",
                  "source": "fa-solid-900.eot",
                  "sources": Array [
                    Object {
                      "format": "embedded-opentype",
                      "path": "fa-solid-900.eot",
                      "urlAddition": "?#iefix",
                    },
                    Object {
                      "format": "woff2",
                      "path": "fa-solid-900.woff2",
                    },
                    Object {
                      "format": "woff",
                      "path": "fa-solid-900.woff",
                    },
                    Object {
                      "format": "truetype",
                      "path": "fa-solid-900.ttf",
                    },
                    Object {
                      "format": "svg",
                      "path": "fa-solid-900.svg",
                      "urlAddition": "#fontawesome",
                    },
                  ],
                },
              ],
              "label": "Font Awesome Solid",
              "name": "fontawesome-solid",
              "npmModule": "@fortawesome/fontawesome-free",
              "type": 0,
            },
            "iconColor": [Function],
            "styles": [Function],
          },
          "icons": Object {
            "config": Object {
              "cssFiles": Array [
                "css/all.css",
              ],
              "fonts": Array [
                Object {
                  "fontFace": "
font-family: 'Font Awesome 5 Free';
font-style: normal;
font-weight: 900;
font-display: block;",
                  "fontsPath": "./webfonts",
                  "licensePath": "./LICENSE.txt",
                  "source": "fa-solid-900.eot",
                  "sources": Array [
                    Object {
                      "format": "embedded-opentype",
                      "path": "fa-solid-900.eot",
                      "urlAddition": "?#iefix",
                    },
                    Object {
                      "format": "woff2",
                      "path": "fa-solid-900.woff2",
                    },
                    Object {
                      "format": "woff",
                      "path": "fa-solid-900.woff",
                    },
                    Object {
                      "format": "truetype",
                      "path": "fa-solid-900.ttf",
                    },
                    Object {
                      "format": "svg",
                      "path": "fa-solid-900.svg",
                      "urlAddition": "#fontawesome",
                    },
                  ],
                },
              ],
              "label": "Font Awesome Solid",
              "name": "fontawesome-solid",
              "npmModule": "@fortawesome/fontawesome-free",
              "type": 0,
            },
            "iconColor": [Function],
            "styles": [Function],
          },
          "label": "SDK Default",
          "licenses": Array [
            "fonts/Raleway/OFL.txt",
          ],
          "localFonts": Object {
            "fonts/Raleway/Raleway-ExtraBold": [Function],
            "fonts/Raleway/Raleway-Medium": [Function],
          },
          "mixins": Object {
            "gutters": [Function],
            "toolbar": Object {
              "@media (min-width:0px) and (orientation: landscape)": Object {
                "minHeight": 48,
              },
              "@media (min-width:600px)": Object {
                "minHeight": 64,
              },
              "minHeight": 56,
            },
          },
          "name": "sdk-default",
          "overrides": Object {},
          "palette": Object {
            "action": Object {
              "activatedOpacity": 0.12,
              "active": "rgba(0, 0, 0, 0.54)",
              "disabled": "rgba(0, 0, 0, 0.26)",
              "disabledBackground": "rgba(0, 0, 0, 0.12)",
              "disabledOpacity": 0.38,
              "focus": "rgba(0, 0, 0, 0.12)",
              "focusOpacity": 0.12,
              "hover": "rgba(0, 0, 0, 0.04)",
              "hoverOpacity": 0.04,
              "selected": "rgba(0, 0, 0, 0.08)",
              "selectedOpacity": 0.08,
            },
            "adjustAlpha": [Function],
            "augmentColor": [Function],
            "background": Object {
              "default": "#FFFFFF",
              "paper": "#fff",
            },
            "common": Object {
              "black": "#000",
              "white": "#fff",
            },
            "contrastThreshold": 3,
            "divider": "rgba(0, 0, 0, 0.12)",
            "error": Object {
              "contrastText": "#fff",
              "dark": "#d32f2f",
              "light": "#e57373",
              "main": "#f44336",
            },
            "getContrastText": [Function],
            "grey": Object {
              "100": "#f5f5f5",
              "200": "#eeeeee",
              "300": "#e0e0e0",
              "400": "#bdbdbd",
              "50": "#fafafa",
              "500": "#9e9e9e",
              "600": "#757575",
              "700": "#616161",
              "800": "#424242",
              "900": "#212121",
              "A100": "#d5d5d5",
              "A200": "#aaaaaa",
              "A400": "#303030",
              "A700": "#616161",
            },
            "info": Object {
              "contrastText": "#fff",
              "dark": "#1976d2",
              "light": "#64b5f6",
              "main": "#2196f3",
            },
            "primary": Object {
              "contrastText": "#fff",
              "dark": "rgb(86, 53, 178)",
              "light": "rgb(150, 112, 255)",
              "main": "#7C4DFF",
            },
            "secondary": Object {
              "contrastText": "rgba(0, 0, 0, 0.87)",
              "dark": "#083575",
              "light": "#01C9EA",
              "main": "#18A9E6",
            },
            "success": Object {
              "contrastText": "rgba(0, 0, 0, 0.87)",
              "dark": "#388e3c",
              "light": "#81c784",
              "main": "#4caf50",
            },
            "text": Object {
              "disabled": "rgba(0, 0, 0, 0.38)",
              "hint": "rgba(0, 0, 0, 0.38)",
              "primary": "#4E4E4E",
              "secondary": "#4E4E4E",
            },
            "tonalOffset": 0.2,
            "type": "light",
            "warning": Object {
              "contrastText": "rgba(0, 0, 0, 0.87)",
              "dark": "#f57c00",
              "light": "#ffb74d",
              "main": "#ff9800",
            },
          },
          "props": Object {},
          "shadows": Array [
            "none",
            "0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12)",
            "0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12)",
            "0px 3px 3px -2px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 1px 8px 0px rgba(0,0,0,0.12)",
            "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
            "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
            "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
            "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
            "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
            "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
            "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
            "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
            "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
            "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
            "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
            "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
            "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
            "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
            "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
            "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
            "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
            "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
            "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
            "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
            "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
          ],
          "shape": Object {
            "borderRadius": 4,
          },
          "spacing": [Function],
          "stylesheets": Array [
            "https://fonts.googleapis.com/css?family=Raleway:500,800&display=swap",
          ],
          "transitions": Object {
            "create": [Function],
            "duration": Object {
              "complex": 375,
              "enteringScreen": 225,
              "leavingScreen": 195,
              "short": 250,
              "shorter": 200,
              "shortest": 150,
              "standard": 300,
            },
            "easing": Object {
              "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
              "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
              "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
              "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
            },
            "getAutoHeightDuration": [Function],
          },
          "typography": Object {
            "body": Object {
              "fontFamily": "\\"Raleway-Medium\\"",
              "fontSize": "0.9375rem",
              "fontWeight": 500,
              "letterSpacing": "0.01071em",
              "lineHeight": 1.43,
            },
            "body1": Object {
              "fontFamily": "\\"Raleway-ExtraBold\\"",
              "fontSize": "1rem",
              "fontWeight": 800,
              "letterSpacing": "0.00938em",
              "lineHeight": 1.5,
            },
            "body2": Object {
              "fontFamily": "\\"Raleway-Medium\\"",
              "fontSize": "0.9375rem",
              "fontWeight": 500,
              "letterSpacing": "0.01071em",
              "lineHeight": 1.43,
            },
            "button": Object {
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "0.875rem",
              "fontWeight": 500,
              "letterSpacing": "0.02857em",
              "lineHeight": 1.75,
              "textTransform": "uppercase",
            },
            "caption": Object {
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "0.75rem",
              "fontWeight": 400,
              "letterSpacing": "0.03333em",
              "lineHeight": 1.66,
            },
            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
            "fontSize": 14,
            "fontWeightBold": 800,
            "fontWeightLight": 500,
            "fontWeightMedium": 500,
            "fontWeightRegular": 400,
            "h1": Object {
              "fontFamily": "\\"Raleway-ExtraBold\\"",
              "fontSize": "1.375rem",
              "fontWeight": 800,
              "letterSpacing": "-0.01562em",
              "lineHeight": 1.45,
            },
            "h2": Object {
              "fontFamily": "\\"Raleway-ExtraBold\\"",
              "fontSize": "1.125rem",
              "fontWeight": 800,
              "letterSpacing": "-0.00833em",
              "lineHeight": 1.27,
            },
            "h3": Object {
              "fontFamily": "\\"Raleway-ExtraBold\\"",
              "fontSize": "1.05rem",
              "fontWeight": 800,
              "letterSpacing": "0em",
              "lineHeight": 1.2,
            },
            "h4": Object {
              "fontFamily": "\\"Raleway-ExtraBold\\"",
              "fontSize": "1rem",
              "fontWeight": 800,
              "letterSpacing": "0.00735em",
              "lineHeight": 1.1,
            },
            "h5": Object {
              "fontFamily": "\\"Raleway-ExtraBold\\"",
              "fontSize": "1rem",
              "fontWeight": 800,
              "letterSpacing": "0em",
              "lineHeight": 1,
            },
            "h6": Object {
              "fontFamily": "\\"Raleway-ExtraBold\\"",
              "fontSize": "0.625rem",
              "fontWeight": 800,
              "letterSpacing": "0.0075em",
              "lineHeight": 1,
            },
            "heading": Object {
              "fontFamily": "\\"Raleway-ExtraBold\\"",
              "fontSize": "1rem",
              "fontWeight": 800,
              "letterSpacing": "0.00938em",
              "lineHeight": 1.5,
            },
            "htmlFontSize": 16,
            "overline": Object {
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "0.75rem",
              "fontWeight": 400,
              "letterSpacing": "0.08333em",
              "lineHeight": 2.66,
              "textTransform": "uppercase",
            },
            "pxToRem": [Function],
            "round": [Function],
            "subtitle1": Object {
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "1rem",
              "fontWeight": 400,
              "letterSpacing": "0.00938em",
              "lineHeight": 1.75,
            },
            "subtitle2": Object {
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "0.875rem",
              "fontWeight": 500,
              "letterSpacing": "0.00714em",
              "lineHeight": 1.57,
            },
          },
          "zIndex": Object {
            "appBar": 1100,
            "drawer": 1200,
            "mobileStepper": 1000,
            "modal": 1300,
            "snackbar": 1400,
            "speedDial": 1050,
            "tooltip": 1500,
          },
          Symbol(mui.nested): false,
        }
      }
    >
      <ResourceSharingLoading
        iri="test"
        name="test"
      >
        <section
          className="PodBrowser-headerSection"
        >
          <WithStyles(ForwardRef(Button))
            onClick={[Function]}
            startIcon={<Memo(ChevronLeftIcon) />}
          >
            <ForwardRef(Button)
              classes={
                Object {
                  "colorInherit": "PodBrowser-colorInherit",
                  "contained": "PodBrowser-contained",
                  "containedPrimary": "PodBrowser-containedPrimary",
                  "containedSecondary": "PodBrowser-containedSecondary",
                  "containedSizeLarge": "PodBrowser-containedSizeLarge",
                  "containedSizeSmall": "PodBrowser-containedSizeSmall",
                  "disableElevation": "PodBrowser-disableElevation",
                  "disabled": "PodBrowser-disabled",
                  "endIcon": "PodBrowser-endIcon",
                  "focusVisible": "PodBrowser-focusVisible",
                  "fullWidth": "PodBrowser-fullWidth",
                  "iconSizeLarge": "PodBrowser-iconSizeLarge",
                  "iconSizeMedium": "PodBrowser-iconSizeMedium",
                  "iconSizeSmall": "PodBrowser-iconSizeSmall",
                  "label": "PodBrowser-label",
                  "outlined": "PodBrowser-outlined",
                  "outlinedPrimary": "PodBrowser-outlinedPrimary",
                  "outlinedSecondary": "PodBrowser-outlinedSecondary",
                  "outlinedSizeLarge": "PodBrowser-outlinedSizeLarge",
                  "outlinedSizeSmall": "PodBrowser-outlinedSizeSmall",
                  "root": "PodBrowser-root",
                  "sizeLarge": "PodBrowser-sizeLarge",
                  "sizeSmall": "PodBrowser-sizeSmall",
                  "startIcon": "PodBrowser-startIcon",
                  "text": "PodBrowser-text",
                  "textPrimary": "PodBrowser-textPrimary",
                  "textSecondary": "PodBrowser-textSecondary",
                  "textSizeLarge": "PodBrowser-textSizeLarge",
                  "textSizeSmall": "PodBrowser-textSizeSmall",
                }
              }
              onClick={[Function]}
              startIcon={<Memo(ChevronLeftIcon) />}
            >
              <WithStyles(ForwardRef(ButtonBase))
                className="PodBrowser-root PodBrowser-text"
                component="button"
                disabled={false}
                focusRipple={true}
                focusVisibleClassName="PodBrowser-focusVisible"
                onClick={[Function]}
                type="button"
              >
                <ForwardRef(ButtonBase)
                  className="PodBrowser-root PodBrowser-text"
                  classes={
                    Object {
                      "disabled": "PodBrowser-disabled",
                      "focusVisible": "PodBrowser-focusVisible",
                      "root": "PodBrowser-root",
                    }
                  }
                  component="button"
                  disabled={false}
                  focusRipple={true}
                  focusVisibleClassName="PodBrowser-focusVisible"
                  onClick={[Function]}
                  type="button"
                >
                  <button
                    className="PodBrowser-root PodBrowser-root PodBrowser-text"
                    disabled={false}
                    onBlur={[Function]}
                    onClick={[Function]}
                    onDragLeave={[Function]}
                    onFocus={[Function]}
                    onKeyDown={[Function]}
                    onKeyUp={[Function]}
                    onMouseDown={[Function]}
                    onMouseLeave={[Function]}
                    onMouseUp={[Function]}
                    onTouchEnd={[Function]}
                    onTouchMove={[Function]}
                    onTouchStart={[Function]}
                    tabIndex={0}
                    type="button"
                  >
                    <span
                      className="PodBrowser-label"
                    >
                      <span
                        className="PodBrowser-startIcon PodBrowser-iconSizeMedium"
                      >
                        <ForwardRef>
                          <WithStyles(ForwardRef(SvgIcon))>
                            <ForwardRef(SvgIcon)
                              classes={
                                Object {
                                  "colorAction": "PodBrowser-colorAction",
                                  "colorDisabled": "PodBrowser-colorDisabled",
                                  "colorError": "PodBrowser-colorError",
                                  "colorPrimary": "PodBrowser-colorPrimary",
                                  "colorSecondary": "PodBrowser-colorSecondary",
                                  "fontSizeInherit": "PodBrowser-fontSizeInherit",
                                  "fontSizeLarge": "PodBrowser-fontSizeLarge",
                                  "fontSizeSmall": "PodBrowser-fontSizeSmall",
                                  "root": "PodBrowser-root",
                                }
                              }
                            >
                              <svg
                                aria-hidden={true}
                                className="PodBrowser-root"
                                focusable="false"
                                viewBox="0 0 24 24"
                              >
                                <path
                                  d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"
                                />
                              </svg>
                            </ForwardRef(SvgIcon)>
                          </WithStyles(ForwardRef(SvgIcon))>
                        </ForwardRef>
                      </span>
                      Details
                    </span>
                    <WithStyles(memo)
                      center={false}
                    >
                      <ForwardRef(TouchRipple)
                        center={false}
                        classes={
                          Object {
                            "child": "PodBrowser-child",
                            "childLeaving": "PodBrowser-childLeaving",
                            "childPulsate": "PodBrowser-childPulsate",
                            "ripple": "PodBrowser-ripple",
                            "ripplePulsate": "PodBrowser-ripplePulsate",
                            "rippleVisible": "PodBrowser-rippleVisible",
                            "root": "PodBrowser-root",
                          }
                        }
                      >
                        <span
                          className="PodBrowser-root"
                        >
                          <TransitionGroup
                            childFactory={[Function]}
                            component={null}
                            exit={true}
                          />
                        </span>
                      </ForwardRef(TouchRipple)>
                    </WithStyles(memo)>
                  </button>
                </ForwardRef(ButtonBase)>
              </WithStyles(ForwardRef(ButtonBase))>
            </ForwardRef(Button)>
          </WithStyles(ForwardRef(Button))>
          <h3
            className="PodBrowser-content-h3"
            title="test"
          >
            test
          </h3>
        </section>
        <WithStyles(ForwardRef(Divider))>
          <ForwardRef(Divider)
            classes={
              Object {
                "absolute": "PodBrowser-absolute",
                "flexItem": "PodBrowser-flexItem",
                "inset": "PodBrowser-inset",
                "light": "PodBrowser-light",
                "middle": "PodBrowser-middle",
                "root": "PodBrowser-root",
                "vertical": "PodBrowser-vertical",
              }
            }
          >
            <hr
              className="PodBrowser-root"
            />
          </ForwardRef(Divider)>
        </WithStyles(ForwardRef(Divider))>
        <section
          className="PodBrowser-centeredSection"
        >
          <h5
            className="PodBrowser-content-h5"
          >
            Default Access
          </h5>
          <WithStyles(ForwardRef(List))>
            <ForwardRef(List)
              classes={
                Object {
                  "dense": "PodBrowser-dense",
                  "padding": "PodBrowser-padding",
                  "root": "PodBrowser-root",
                  "subheader": "PodBrowser-subheader",
                }
              }
            >
              <ul
                className="PodBrowser-root PodBrowser-padding"
              >
                <WithStyles(ForwardRef(ListItem))
                  className="PodBrowser-listItem"
                  key="0"
                >
                  <ForwardRef(ListItem)
                    className="PodBrowser-listItem"
                    classes={
                      Object {
                        "alignItemsFlexStart": "PodBrowser-alignItemsFlexStart",
                        "button": "PodBrowser-button",
                        "container": "PodBrowser-container",
                        "dense": "PodBrowser-dense",
                        "disabled": "PodBrowser-disabled",
                        "divider": "PodBrowser-divider",
                        "focusVisible": "PodBrowser-focusVisible",
                        "gutters": "PodBrowser-gutters",
                        "root": "PodBrowser-root",
                        "secondaryAction": "PodBrowser-secondaryAction",
                        "selected": "PodBrowser-selected",
                      }
                    }
                  >
                    <li
                      className="PodBrowser-root PodBrowser-listItem PodBrowser-gutters"
                      disabled={false}
                    >
                      <WithStyles(ForwardRef(Avatar))
                        className="PodBrowser-avatar"
                        key=".0"
                      >
                        <ForwardRef(Avatar)
                          className="PodBrowser-avatar"
                          classes={
                            Object {
                              "circle": "PodBrowser-circle",
                              "colorDefault": "PodBrowser-colorDefault",
                              "fallback": "PodBrowser-fallback",
                              "img": "PodBrowser-img",
                              "root": "PodBrowser-root",
                              "rounded": "PodBrowser-rounded",
                              "square": "PodBrowser-square",
                            }
                          }
                        >
                          <div
                            className="PodBrowser-root PodBrowser-circle PodBrowser-avatar PodBrowser-colorDefault"
                          >
                            <ForwardRef>
                              <WithStyles(ForwardRef(SvgIcon))>
                                <ForwardRef(SvgIcon)
                                  classes={
                                    Object {
                                      "colorAction": "PodBrowser-colorAction",
                                      "colorDisabled": "PodBrowser-colorDisabled",
                                      "colorError": "PodBrowser-colorError",
                                      "colorPrimary": "PodBrowser-colorPrimary",
                                      "colorSecondary": "PodBrowser-colorSecondary",
                                      "fontSizeInherit": "PodBrowser-fontSizeInherit",
                                      "fontSizeLarge": "PodBrowser-fontSizeLarge",
                                      "fontSizeSmall": "PodBrowser-fontSizeSmall",
                                      "root": "PodBrowser-root",
                                    }
                                  }
                                >
                                  <svg
                                    aria-hidden={true}
                                    className="PodBrowser-root"
                                    focusable="false"
                                    viewBox="0 0 24 24"
                                  >
                                    <path
                                      d="M10 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V8c0-1.1-.9-2-2-2h-8l-2-2z"
                                    />
                                  </svg>
                                </ForwardRef(SvgIcon)>
                              </WithStyles(ForwardRef(SvgIcon))>
                            </ForwardRef>
                          </div>
                        </ForwardRef(Avatar)>
                      </WithStyles(ForwardRef(Avatar))>
                      <WithStyles(ForwardRef(Skeleton))
                        key=".1"
                        width={150}
                      >
                        <ForwardRef(Skeleton)
                          classes={
                            Object {
                              "circle": "PodBrowser-circle",
                              "fitContent": "PodBrowser-fitContent",
                              "heightAuto": "PodBrowser-heightAuto",
                              "pulse": "PodBrowser-pulse",
                              "rect": "PodBrowser-rect",
                              "root": "PodBrowser-root",
                              "text": "PodBrowser-text",
                              "wave": "PodBrowser-wave",
                              "withChildren": "PodBrowser-withChildren",
                            }
                          }
                          width={150}
                        >
                          <span
                            className="PodBrowser-root PodBrowser-text PodBrowser-pulse"
                            style={
                              Object {
                                "height": undefined,
                                "width": 150,
                              }
                            }
                          />
                        </ForwardRef(Skeleton)>
                      </WithStyles(ForwardRef(Skeleton))>
                    </li>
                  </ForwardRef(ListItem)>
                </WithStyles(ForwardRef(ListItem))>
              </ul>
            </ForwardRef(List)>
          </WithStyles(ForwardRef(List))>
        </section>
        <WithStyles(ForwardRef(Divider))>
          <ForwardRef(Divider)
            classes={
              Object {
                "absolute": "PodBrowser-absolute",
                "flexItem": "PodBrowser-flexItem",
                "inset": "PodBrowser-inset",
                "light": "PodBrowser-light",
                "middle": "PodBrowser-middle",
                "root": "PodBrowser-root",
                "vertical": "PodBrowser-vertical",
              }
            }
          >
            <hr
              className="PodBrowser-root"
            />
          </ForwardRef(Divider)>
        </WithStyles(ForwardRef(Divider))>
        <section
          className="PodBrowser-centeredSection"
        >
          <h5
            className="PodBrowser-content-h5"
          >
            My Access
          </h5>
          <WithStyles(ForwardRef(List))>
            <ForwardRef(List)
              classes={
                Object {
                  "dense": "PodBrowser-dense",
                  "padding": "PodBrowser-padding",
                  "root": "PodBrowser-root",
                  "subheader": "PodBrowser-subheader",
                }
              }
            >
              <ul
                className="PodBrowser-root PodBrowser-padding"
              >
                <WithStyles(ForwardRef(ListItem))
                  className="PodBrowser-listItem"
                  key="0"
                >
                  <ForwardRef(ListItem)
                    className="PodBrowser-listItem"
                    classes={
                      Object {
                        "alignItemsFlexStart": "PodBrowser-alignItemsFlexStart",
                        "button": "PodBrowser-button",
                        "container": "PodBrowser-container",
                        "dense": "PodBrowser-dense",
                        "disabled": "PodBrowser-disabled",
                        "divider": "PodBrowser-divider",
                        "focusVisible": "PodBrowser-focusVisible",
                        "gutters": "PodBrowser-gutters",
                        "root": "PodBrowser-root",
                        "secondaryAction": "PodBrowser-secondaryAction",
                        "selected": "PodBrowser-selected",
                      }
                    }
                  >
                    <li
                      className="PodBrowser-root PodBrowser-listItem PodBrowser-gutters"
                      disabled={false}
                    >
                      <WithStyles(ForwardRef(Avatar))
                        className="PodBrowser-avatar"
                        key=".0"
                      >
                        <ForwardRef(Avatar)
                          className="PodBrowser-avatar"
                          classes={
                            Object {
                              "circle": "PodBrowser-circle",
                              "colorDefault": "PodBrowser-colorDefault",
                              "fallback": "PodBrowser-fallback",
                              "img": "PodBrowser-img",
                              "root": "PodBrowser-root",
                              "rounded": "PodBrowser-rounded",
                              "square": "PodBrowser-square",
                            }
                          }
                        >
                          <div
                            className="PodBrowser-root PodBrowser-circle PodBrowser-avatar PodBrowser-colorDefault"
                          >
                            <ForwardRef(PersonIcon)
                              className="PodBrowser-fallback"
                            >
                              <WithStyles(ForwardRef(SvgIcon))
                                className="PodBrowser-fallback"
                              >
                                <ForwardRef(SvgIcon)
                                  className="PodBrowser-fallback"
                                  classes={
                                    Object {
                                      "colorAction": "PodBrowser-colorAction",
                                      "colorDisabled": "PodBrowser-colorDisabled",
                                      "colorError": "PodBrowser-colorError",
                                      "colorPrimary": "PodBrowser-colorPrimary",
                                      "colorSecondary": "PodBrowser-colorSecondary",
                                      "fontSizeInherit": "PodBrowser-fontSizeInherit",
                                      "fontSizeLarge": "PodBrowser-fontSizeLarge",
                                      "fontSizeSmall": "PodBrowser-fontSizeSmall",
                                      "root": "PodBrowser-root",
                                    }
                                  }
                                >
                                  <svg
                                    aria-hidden={true}
                                    className="PodBrowser-root PodBrowser-fallback"
                                    focusable="false"
                                    viewBox="0 0 24 24"
                                  >
                                    <path
                                      d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"
                                    />
                                  </svg>
                                </ForwardRef(SvgIcon)>
                              </WithStyles(ForwardRef(SvgIcon))>
                            </ForwardRef(PersonIcon)>
                          </div>
                        </ForwardRef(Avatar)>
                      </WithStyles(ForwardRef(Avatar))>
                      <WithStyles(ForwardRef(Skeleton))
                        key=".1"
                        width={150}
                      >
                        <ForwardRef(Skeleton)
                          classes={
                            Object {
                              "circle": "PodBrowser-circle",
                              "fitContent": "PodBrowser-fitContent",
                              "heightAuto": "PodBrowser-heightAuto",
                              "pulse": "PodBrowser-pulse",
                              "rect": "PodBrowser-rect",
                              "root": "PodBrowser-root",
                              "text": "PodBrowser-text",
                              "wave": "PodBrowser-wave",
                              "withChildren": "PodBrowser-withChildren",
                            }
                          }
                          width={150}
                        >
                          <span
                            className="PodBrowser-root PodBrowser-text PodBrowser-pulse"
                            style={
                              Object {
                                "height": undefined,
                                "width": 150,
                              }
                            }
                          />
                        </ForwardRef(Skeleton)>
                      </WithStyles(ForwardRef(Skeleton))>
                    </li>
                  </ForwardRef(ListItem)>
                </WithStyles(ForwardRef(ListItem))>
              </ul>
            </ForwardRef(List)>
          </WithStyles(ForwardRef(List))>
        </section>
        <section
          className="PodBrowser-centeredSection"
        >
          <WithStyles(ForwardRef(List))>
            <ForwardRef(List)
              classes={
                Object {
                  "dense": "PodBrowser-dense",
                  "padding": "PodBrowser-padding",
                  "root": "PodBrowser-root",
                  "subheader": "PodBrowser-subheader",
                }
              }
            >
              <ul
                className="PodBrowser-root PodBrowser-padding"
              >
                <WithStyles(ForwardRef(ListItem))
                  className="PodBrowser-listItem"
                  key="0"
                >
                  <ForwardRef(ListItem)
                    className="PodBrowser-listItem"
                    classes={
                      Object {
                        "alignItemsFlexStart": "PodBrowser-alignItemsFlexStart",
                        "button": "PodBrowser-button",
                        "container": "PodBrowser-container",
                        "dense": "PodBrowser-dense",
                        "disabled": "PodBrowser-disabled",
                        "divider": "PodBrowser-divider",
                        "focusVisible": "PodBrowser-focusVisible",
                        "gutters": "PodBrowser-gutters",
                        "root": "PodBrowser-root",
                        "secondaryAction": "PodBrowser-secondaryAction",
                        "selected": "PodBrowser-selected",
                      }
                    }
                  >
                    <li
                      className="PodBrowser-root PodBrowser-listItem PodBrowser-gutters"
                      disabled={false}
                    >
                      <WithStyles(ForwardRef(ListItemIcon))
                        key=".0"
                      >
                        <ForwardRef(ListItemIcon)
                          classes={
                            Object {
                              "alignItemsFlexStart": "PodBrowser-alignItemsFlexStart",
                              "root": "PodBrowser-root",
                            }
                          }
                        >
                          <div
                            className="PodBrowser-root"
                          >
                            <ForwardRef>
                              <WithStyles(ForwardRef(SvgIcon))>
                                <ForwardRef(SvgIcon)
                                  classes={
                                    Object {
                                      "colorAction": "PodBrowser-colorAction",
                                      "colorDisabled": "PodBrowser-colorDisabled",
                                      "colorError": "PodBrowser-colorError",
                                      "colorPrimary": "PodBrowser-colorPrimary",
                                      "colorSecondary": "PodBrowser-colorSecondary",
                                      "fontSizeInherit": "PodBrowser-fontSizeInherit",
                                      "fontSizeLarge": "PodBrowser-fontSizeLarge",
                                      "fontSizeSmall": "PodBrowser-fontSizeSmall",
                                      "root": "PodBrowser-root",
                                    }
                                  }
                                >
                                  <svg
                                    aria-hidden={true}
                                    className="PodBrowser-root"
                                    focusable="false"
                                    viewBox="0 0 24 24"
                                  >
                                    <path
                                      d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"
                                    />
                                  </svg>
                                </ForwardRef(SvgIcon)>
                              </WithStyles(ForwardRef(SvgIcon))>
                            </ForwardRef>
                            People
                          </div>
                        </ForwardRef(ListItemIcon)>
                      </WithStyles(ForwardRef(ListItemIcon))>
                    </li>
                  </ForwardRef(ListItem)>
                </WithStyles(ForwardRef(ListItem))>
                <WithStyles(ForwardRef(ListItem))
                  className="PodBrowser-listItem"
                  key="1"
                >
                  <ForwardRef(ListItem)
                    className="PodBrowser-listItem"
                    classes={
                      Object {
                        "alignItemsFlexStart": "PodBrowser-alignItemsFlexStart",
                        "button": "PodBrowser-button",
                        "container": "PodBrowser-container",
                        "dense": "PodBrowser-dense",
                        "disabled": "PodBrowser-disabled",
                        "divider": "PodBrowser-divider",
                        "focusVisible": "PodBrowser-focusVisible",
                        "gutters": "PodBrowser-gutters",
                        "root": "PodBrowser-root",
                        "secondaryAction": "PodBrowser-secondaryAction",
                        "selected": "PodBrowser-selected",
                      }
                    }
                  >
                    <li
                      className="PodBrowser-root PodBrowser-listItem PodBrowser-gutters"
                      disabled={false}
                    >
                      <WithStyles(ForwardRef(Avatar))
                        className="PodBrowser-avatar"
                        key=".0"
                      >
                        <ForwardRef(Avatar)
                          className="PodBrowser-avatar"
                          classes={
                            Object {
                              "circle": "PodBrowser-circle",
                              "colorDefault": "PodBrowser-colorDefault",
                              "fallback": "PodBrowser-fallback",
                              "img": "PodBrowser-img",
                              "root": "PodBrowser-root",
                              "rounded": "PodBrowser-rounded",
                              "square": "PodBrowser-square",
                            }
                          }
                        >
                          <div
                            className="PodBrowser-root PodBrowser-circle PodBrowser-avatar PodBrowser-colorDefault"
                          >
                            <ForwardRef(PersonIcon)
                              className="PodBrowser-fallback"
                            >
                              <WithStyles(ForwardRef(SvgIcon))
                                className="PodBrowser-fallback"
                              >
                                <ForwardRef(SvgIcon)
                                  className="PodBrowser-fallback"
                                  classes={
                                    Object {
                                      "colorAction": "PodBrowser-colorAction",
                                      "colorDisabled": "PodBrowser-colorDisabled",
                                      "colorError": "PodBrowser-colorError",
                                      "colorPrimary": "PodBrowser-colorPrimary",
                                      "colorSecondary": "PodBrowser-colorSecondary",
                                      "fontSizeInherit": "PodBrowser-fontSizeInherit",
                                      "fontSizeLarge": "PodBrowser-fontSizeLarge",
                                      "fontSizeSmall": "PodBrowser-fontSizeSmall",
                                      "root": "PodBrowser-root",
                                    }
                                  }
                                >
                                  <svg
                                    aria-hidden={true}
                                    className="PodBrowser-root PodBrowser-fallback"
                                    focusable="false"
                                    viewBox="0 0 24 24"
                                  >
                                    <path
                                      d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"
                                    />
                                  </svg>
                                </ForwardRef(SvgIcon)>
                              </WithStyles(ForwardRef(SvgIcon))>
                            </ForwardRef(PersonIcon)>
                          </div>
                        </ForwardRef(Avatar)>
                      </WithStyles(ForwardRef(Avatar))>
                      <WithStyles(ForwardRef(Skeleton))
                        key=".1"
                        width={150}
                      >
                        <ForwardRef(Skeleton)
                          classes={
                            Object {
                              "circle": "PodBrowser-circle",
                              "fitContent": "PodBrowser-fitContent",
                              "heightAuto": "PodBrowser-heightAuto",
                              "pulse": "PodBrowser-pulse",
                              "rect": "PodBrowser-rect",
                              "root": "PodBrowser-root",
                              "text": "PodBrowser-text",
                              "wave": "PodBrowser-wave",
                              "withChildren": "PodBrowser-withChildren",
                            }
                          }
                          width={150}
                        >
                          <span
                            className="PodBrowser-root PodBrowser-text PodBrowser-pulse"
                            style={
                              Object {
                                "height": undefined,
                                "width": 150,
                              }
                            }
                          />
                        </ForwardRef(Skeleton)>
                      </WithStyles(ForwardRef(Skeleton))>
                    </li>
                  </ForwardRef(ListItem)>
                </WithStyles(ForwardRef(ListItem))>
              </ul>
            </ForwardRef(List)>
          </WithStyles(ForwardRef(List))>
        </section>
        <WithStyles(ForwardRef(Divider))>
          <ForwardRef(Divider)
            classes={
              Object {
                "absolute": "PodBrowser-absolute",
                "flexItem": "PodBrowser-flexItem",
                "inset": "PodBrowser-inset",
                "light": "PodBrowser-light",
                "middle": "PodBrowser-middle",
                "root": "PodBrowser-root",
                "vertical": "PodBrowser-vertical",
              }
            }
          >
            <hr
              className="PodBrowser-root"
            />
          </ForwardRef(Divider)>
        </WithStyles(ForwardRef(Divider))>
        <section
          className="PodBrowser-centeredSection"
        >
          <h5
            className="PodBrowser-content-h5"
            title="test"
          >
            Grant Permission
          </h5>
          <WithStyles(ForwardRef(FormControl))
            className="PodBrowser-agentInput"
          >
            <ForwardRef(FormControl)
              className="PodBrowser-agentInput"
              classes={
                Object {
                  "fullWidth": "PodBrowser-fullWidth",
                  "marginDense": "PodBrowser-marginDense",
                  "marginNormal": "PodBrowser-marginNormal",
                  "root": "PodBrowser-root",
                }
              }
            >
              <div
                className="PodBrowser-root PodBrowser-agentInput"
              >
                <WithStyles(ForwardRef(InputLabel))
                  htmlFor="agent-web-id"
                >
                  <ForwardRef(InputLabel)
                    classes={
                      Object {
                        "animated": "PodBrowser-animated",
                        "asterisk": "PodBrowser-asterisk",
                        "disabled": "PodBrowser-disabled",
                        "error": "PodBrowser-error",
                        "filled": "PodBrowser-filled",
                        "focused": "PodBrowser-focused",
                        "formControl": "PodBrowser-formControl",
                        "marginDense": "PodBrowser-marginDense",
                        "outlined": "PodBrowser-outlined",
                        "required": "PodBrowser-required",
                        "root": "PodBrowser-root",
                        "shrink": "PodBrowser-shrink",
                      }
                    }
                    htmlFor="agent-web-id"
                  >
                    <WithStyles(ForwardRef(FormLabel))
                      className="PodBrowser-root PodBrowser-formControl PodBrowser-animated PodBrowser-shrink"
                      classes={
                        Object {
                          "asterisk": "PodBrowser-asterisk",
                          "disabled": "PodBrowser-disabled",
                          "error": "PodBrowser-error",
                          "focused": "PodBrowser-focused",
                          "required": "PodBrowser-required",
                        }
                      }
                      data-shrink={true}
                      htmlFor="agent-web-id"
                    >
                      <ForwardRef(FormLabel)
                        className="PodBrowser-root PodBrowser-formControl PodBrowser-animated PodBrowser-shrink"
                        classes={
                          Object {
                            "asterisk": "PodBrowser-asterisk PodBrowser-asterisk",
                            "colorSecondary": "PodBrowser-colorSecondary",
                            "disabled": "PodBrowser-disabled PodBrowser-disabled",
                            "error": "PodBrowser-error PodBrowser-error",
                            "filled": "PodBrowser-filled",
                            "focused": "PodBrowser-focused PodBrowser-focused",
                            "required": "PodBrowser-required PodBrowser-required",
                            "root": "PodBrowser-root",
                          }
                        }
                        data-shrink={true}
                        htmlFor="agent-web-id"
                      >
                        <label
                          className="PodBrowser-root PodBrowser-root PodBrowser-formControl PodBrowser-animated PodBrowser-shrink"
                          data-shrink={true}
                          htmlFor="agent-web-id"
                        >
                          Web ID
                        </label>
                      </ForwardRef(FormLabel)>
                    </WithStyles(ForwardRef(FormLabel))>
                  </ForwardRef(InputLabel)>
                </WithStyles(ForwardRef(InputLabel))>
                <WithStyles(ForwardRef(Input))
                  disabled={true}
                  id="agent-web-id"
                  startAdornment={
                    <WithStyles(ForwardRef(InputAdornment))
                      position="start"
                    >
                      <Memo(AccountCircleIcon) />
                    </WithStyles(ForwardRef(InputAdornment))>
                  }
                >
                  <ForwardRef(Input)
                    classes={
                      Object {
                        "colorSecondary": "PodBrowser-colorSecondary",
                        "disabled": "PodBrowser-disabled",
                        "error": "PodBrowser-error",
                        "focused": "PodBrowser-focused",
                        "formControl": "PodBrowser-formControl",
                        "fullWidth": "PodBrowser-fullWidth",
                        "input": "PodBrowser-input",
                        "inputMarginDense": "PodBrowser-inputMarginDense",
                        "inputMultiline": "PodBrowser-inputMultiline",
                        "inputTypeSearch": "PodBrowser-inputTypeSearch",
                        "marginDense": "PodBrowser-marginDense",
                        "multiline": "PodBrowser-multiline",
                        "root": "PodBrowser-root",
                        "underline": "PodBrowser-underline",
                      }
                    }
                    disabled={true}
                    id="agent-web-id"
                    startAdornment={
                      <WithStyles(ForwardRef(InputAdornment))
                        position="start"
                      >
                        <Memo(AccountCircleIcon) />
                      </WithStyles(ForwardRef(InputAdornment))>
                    }
                  >
                    <WithStyles(ForwardRef(InputBase))
                      classes={
                        Object {
                          "colorSecondary": "PodBrowser-colorSecondary",
                          "disabled": "PodBrowser-disabled",
                          "error": "PodBrowser-error",
                          "focused": "PodBrowser-focused",
                          "formControl": "PodBrowser-formControl",
                          "fullWidth": "PodBrowser-fullWidth",
                          "input": "PodBrowser-input",
                          "inputMarginDense": "PodBrowser-inputMarginDense",
                          "inputMultiline": "PodBrowser-inputMultiline",
                          "inputTypeSearch": "PodBrowser-inputTypeSearch",
                          "marginDense": "PodBrowser-marginDense",
                          "multiline": "PodBrowser-multiline",
                          "root": "PodBrowser-root PodBrowser-underline",
                          "underline": null,
                        }
                      }
                      disabled={true}
                      fullWidth={false}
                      id="agent-web-id"
                      inputComponent="input"
                      multiline={false}
                      startAdornment={
                        <WithStyles(ForwardRef(InputAdornment))
                          position="start"
                        >
                          <Memo(AccountCircleIcon) />
                        </WithStyles(ForwardRef(InputAdornment))>
                      }
                      type="text"
                    >
                      <ForwardRef(InputBase)
                        classes={
                          Object {
                            "adornedEnd": "PodBrowser-adornedEnd",
                            "adornedStart": "PodBrowser-adornedStart",
                            "colorSecondary": "PodBrowser-colorSecondary PodBrowser-colorSecondary",
                            "disabled": "PodBrowser-disabled PodBrowser-disabled",
                            "error": "PodBrowser-error PodBrowser-error",
                            "focused": "PodBrowser-focused PodBrowser-focused",
                            "formControl": "PodBrowser-formControl PodBrowser-formControl",
                            "fullWidth": "PodBrowser-fullWidth PodBrowser-fullWidth",
                            "input": "PodBrowser-input PodBrowser-input",
                            "inputAdornedEnd": "PodBrowser-inputAdornedEnd",
                            "inputAdornedStart": "PodBrowser-inputAdornedStart",
                            "inputHiddenLabel": "PodBrowser-inputHiddenLabel",
                            "inputMarginDense": "PodBrowser-inputMarginDense PodBrowser-inputMarginDense",
                            "inputMultiline": "PodBrowser-inputMultiline PodBrowser-inputMultiline",
                            "inputTypeSearch": "PodBrowser-inputTypeSearch PodBrowser-inputTypeSearch",
                            "marginDense": "PodBrowser-marginDense PodBrowser-marginDense",
                            "multiline": "PodBrowser-multiline PodBrowser-multiline",
                            "root": "PodBrowser-root PodBrowser-root PodBrowser-underline",
                          }
                        }
                        disabled={true}
                        fullWidth={false}
                        id="agent-web-id"
                        inputComponent="input"
                        multiline={false}
                        startAdornment={
                          <WithStyles(ForwardRef(InputAdornment))
                            position="start"
                          >
                            <Memo(AccountCircleIcon) />
                          </WithStyles(ForwardRef(InputAdornment))>
                        }
                        type="text"
                      >
                        <div
                          className="PodBrowser-root PodBrowser-root PodBrowser-underline PodBrowser-disabled PodBrowser-disabled PodBrowser-formControl PodBrowser-formControl PodBrowser-adornedStart"
                          onClick={[Function]}
                        >
                          <WithStyles(ForwardRef(InputAdornment))
                            position="start"
                          >
                            <ForwardRef(InputAdornment)
                              classes={
                                Object {
                                  "disablePointerEvents": "PodBrowser-disablePointerEvents",
                                  "filled": "PodBrowser-filled",
                                  "hiddenLabel": "PodBrowser-hiddenLabel",
                                  "marginDense": "PodBrowser-marginDense",
                                  "positionEnd": "PodBrowser-positionEnd",
                                  "positionStart": "PodBrowser-positionStart",
                                  "root": "PodBrowser-root",
                                }
                              }
                              position="start"
                            >
                              <div
                                className="PodBrowser-root PodBrowser-positionStart"
                              >
                                <ForwardRef>
                                  <WithStyles(ForwardRef(SvgIcon))>
                                    <ForwardRef(SvgIcon)
                                      classes={
                                        Object {
                                          "colorAction": "PodBrowser-colorAction",
                                          "colorDisabled": "PodBrowser-colorDisabled",
                                          "colorError": "PodBrowser-colorError",
                                          "colorPrimary": "PodBrowser-colorPrimary",
                                          "colorSecondary": "PodBrowser-colorSecondary",
                                          "fontSizeInherit": "PodBrowser-fontSizeInherit",
                                          "fontSizeLarge": "PodBrowser-fontSizeLarge",
                                          "fontSizeSmall": "PodBrowser-fontSizeSmall",
                                          "root": "PodBrowser-root",
                                        }
                                      }
                                    >
                                      <svg
                                        aria-hidden={true}
                                        className="PodBrowser-root"
                                        focusable="false"
                                        viewBox="0 0 24 24"
                                      >
                                        <path
                                          d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 3c1.66 0 3 1.34 3 3s-1.34 3-3 3-3-1.34-3-3 1.34-3 3-3zm0 14.2c-2.5 0-4.71-1.28-6-3.22.03-1.99 4-3.08 6-3.08 1.99 0 5.97 1.09 6 3.08-1.29 1.94-3.5 3.22-6 3.22z"
                                        />
                                      </svg>
                                    </ForwardRef(SvgIcon)>
                                  </WithStyles(ForwardRef(SvgIcon))>
                                </ForwardRef>
                              </div>
                            </ForwardRef(InputAdornment)>
                          </WithStyles(ForwardRef(InputAdornment))>
                          <input
                            aria-invalid={false}
                            className="PodBrowser-input PodBrowser-input PodBrowser-disabled PodBrowser-disabled PodBrowser-inputAdornedStart"
                            disabled={true}
                            id="agent-web-id"
                            onAnimationStart={[Function]}
                            onBlur={[Function]}
                            onChange={[Function]}
                            onFocus={[Function]}
                            required={false}
                            type="text"
                          />
                        </div>
                      </ForwardRef(InputBase)>
                    </WithStyles(ForwardRef(InputBase))>
                  </ForwardRef(Input)>
                </WithStyles(ForwardRef(Input))>
              </div>
            </ForwardRef(FormControl)>
          </WithStyles(ForwardRef(FormControl))>
          <WithStyles(ForwardRef(Button))
            disabled={true}
            variant="contained"
          >
            <ForwardRef(Button)
              classes={
                Object {
                  "colorInherit": "PodBrowser-colorInherit",
                  "contained": "PodBrowser-contained",
                  "containedPrimary": "PodBrowser-containedPrimary",
                  "containedSecondary": "PodBrowser-containedSecondary",
                  "containedSizeLarge": "PodBrowser-containedSizeLarge",
                  "containedSizeSmall": "PodBrowser-containedSizeSmall",
                  "disableElevation": "PodBrowser-disableElevation",
                  "disabled": "PodBrowser-disabled",
                  "endIcon": "PodBrowser-endIcon",
                  "focusVisible": "PodBrowser-focusVisible",
                  "fullWidth": "PodBrowser-fullWidth",
                  "iconSizeLarge": "PodBrowser-iconSizeLarge",
                  "iconSizeMedium": "PodBrowser-iconSizeMedium",
                  "iconSizeSmall": "PodBrowser-iconSizeSmall",
                  "label": "PodBrowser-label",
                  "outlined": "PodBrowser-outlined",
                  "outlinedPrimary": "PodBrowser-outlinedPrimary",
                  "outlinedSecondary": "PodBrowser-outlinedSecondary",
                  "outlinedSizeLarge": "PodBrowser-outlinedSizeLarge",
                  "outlinedSizeSmall": "PodBrowser-outlinedSizeSmall",
                  "root": "PodBrowser-root",
                  "sizeLarge": "PodBrowser-sizeLarge",
                  "sizeSmall": "PodBrowser-sizeSmall",
                  "startIcon": "PodBrowser-startIcon",
                  "text": "PodBrowser-text",
                  "textPrimary": "PodBrowser-textPrimary",
                  "textSecondary": "PodBrowser-textSecondary",
                  "textSizeLarge": "PodBrowser-textSizeLarge",
                  "textSizeSmall": "PodBrowser-textSizeSmall",
                }
              }
              disabled={true}
              variant="contained"
            >
              <WithStyles(ForwardRef(ButtonBase))
                className="PodBrowser-root PodBrowser-contained PodBrowser-disabled"
                component="button"
                disabled={true}
                focusRipple={true}
                focusVisibleClassName="PodBrowser-focusVisible"
                type="button"
              >
                <ForwardRef(ButtonBase)
                  className="PodBrowser-root PodBrowser-contained PodBrowser-disabled"
                  classes={
                    Object {
                      "disabled": "PodBrowser-disabled",
                      "focusVisible": "PodBrowser-focusVisible",
                      "root": "PodBrowser-root",
                    }
                  }
                  component="button"
                  disabled={true}
                  focusRipple={true}
                  focusVisibleClassName="PodBrowser-focusVisible"
                  type="button"
                >
                  <button
                    className="PodBrowser-root PodBrowser-root PodBrowser-contained PodBrowser-disabled PodBrowser-disabled"
                    disabled={true}
                    onBlur={[Function]}
                    onDragLeave={[Function]}
                    onFocus={[Function]}
                    onKeyDown={[Function]}
                    onKeyUp={[Function]}
                    onMouseDown={[Function]}
                    onMouseLeave={[Function]}
                    onMouseUp={[Function]}
                    onTouchEnd={[Function]}
                    onTouchMove={[Function]}
                    onTouchStart={[Function]}
                    tabIndex={-1}
                    type="button"
                  >
                    <span
                      className="PodBrowser-label"
                    >
                      Add
                    </span>
                  </button>
                </ForwardRef(ButtonBase)>
              </WithStyles(ForwardRef(ButtonBase))>
            </ForwardRef(Button)>
          </WithStyles(ForwardRef(Button))>
        </section>
      </ResourceSharingLoading>
    </ThemeProvider>
  </StylesProvider>
</WithTheme>
`;
