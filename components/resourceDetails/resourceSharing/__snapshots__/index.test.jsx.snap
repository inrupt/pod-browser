// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`NoThirdPartyPermissions it renders a no 3rd party permissions component 1`] = `
<WithTheme
  theme={
    Object {
      "breakpoints": Object {
        "between": [Function],
        "down": [Function],
        "keys": Array [
          "xs",
          "sm",
          "md",
          "lg",
          "xl",
        ],
        "only": [Function],
        "up": [Function],
        "values": Object {
          "lg": 1280,
          "md": 960,
          "sm": 600,
          "xl": 1920,
          "xs": 0,
        },
        "width": [Function],
      },
      "direction": "ltr",
      "iconSet": Object {
        "config": Object {
          "cssFiles": Array [
            "css/all.css",
          ],
          "fonts": Array [
            Object {
              "fontFace": "
font-family: 'Font Awesome 5 Free';
font-style: normal;
font-weight: 900;
font-display: block;",
              "fontsPath": "./webfonts",
              "licensePath": "./LICENSE.txt",
              "source": "fa-solid-900.eot",
              "sources": Array [
                Object {
                  "format": "embedded-opentype",
                  "path": "fa-solid-900.eot",
                  "urlAddition": "?#iefix",
                },
                Object {
                  "format": "woff2",
                  "path": "fa-solid-900.woff2",
                },
                Object {
                  "format": "woff",
                  "path": "fa-solid-900.woff",
                },
                Object {
                  "format": "truetype",
                  "path": "fa-solid-900.ttf",
                },
                Object {
                  "format": "svg",
                  "path": "fa-solid-900.svg",
                  "urlAddition": "#fontawesome",
                },
              ],
            },
          ],
          "label": "Font Awesome Solid",
          "name": "fontawesome-solid",
          "npmModule": "@fortawesome/fontawesome-free",
          "type": 0,
        },
        "iconColor": [Function],
        "styles": [Function],
      },
      "icons": Object {
        "config": Object {
          "cssFiles": Array [
            "css/all.css",
          ],
          "fonts": Array [
            Object {
              "fontFace": "
font-family: 'Font Awesome 5 Free';
font-style: normal;
font-weight: 900;
font-display: block;",
              "fontsPath": "./webfonts",
              "licensePath": "./LICENSE.txt",
              "source": "fa-solid-900.eot",
              "sources": Array [
                Object {
                  "format": "embedded-opentype",
                  "path": "fa-solid-900.eot",
                  "urlAddition": "?#iefix",
                },
                Object {
                  "format": "woff2",
                  "path": "fa-solid-900.woff2",
                },
                Object {
                  "format": "woff",
                  "path": "fa-solid-900.woff",
                },
                Object {
                  "format": "truetype",
                  "path": "fa-solid-900.ttf",
                },
                Object {
                  "format": "svg",
                  "path": "fa-solid-900.svg",
                  "urlAddition": "#fontawesome",
                },
              ],
            },
          ],
          "label": "Font Awesome Solid",
          "name": "fontawesome-solid",
          "npmModule": "@fortawesome/fontawesome-free",
          "type": 0,
        },
        "iconColor": [Function],
        "styles": [Function],
      },
      "label": "SDK Default",
      "licenses": Array [
        "fonts/Raleway/OFL.txt",
      ],
      "localFonts": Object {
        "fonts/Raleway/Raleway-ExtraBold": [Function],
        "fonts/Raleway/Raleway-Medium": [Function],
      },
      "mixins": Object {
        "gutters": [Function],
        "toolbar": Object {
          "@media (min-width:0px) and (orientation: landscape)": Object {
            "minHeight": 48,
          },
          "@media (min-width:600px)": Object {
            "minHeight": 64,
          },
          "minHeight": 56,
        },
      },
      "name": "sdk-default",
      "overrides": Object {},
      "palette": Object {
        "action": Object {
          "activatedOpacity": 0.12,
          "active": "rgba(0, 0, 0, 0.54)",
          "disabled": "rgba(0, 0, 0, 0.26)",
          "disabledBackground": "rgba(0, 0, 0, 0.12)",
          "disabledOpacity": 0.38,
          "focus": "rgba(0, 0, 0, 0.12)",
          "focusOpacity": 0.12,
          "hover": "rgba(0, 0, 0, 0.04)",
          "hoverOpacity": 0.04,
          "selected": "rgba(0, 0, 0, 0.08)",
          "selectedOpacity": 0.08,
        },
        "adjustAlpha": [Function],
        "augmentColor": [Function],
        "background": Object {
          "default": "#FFFFFF",
          "paper": "#fff",
        },
        "common": Object {
          "black": "#000",
          "white": "#fff",
        },
        "contrastThreshold": 3,
        "divider": "rgba(0, 0, 0, 0.12)",
        "error": Object {
          "contrastText": "#fff",
          "dark": "#d32f2f",
          "light": "#e57373",
          "main": "#f44336",
        },
        "getContrastText": [Function],
        "grey": Object {
          "100": "#f5f5f5",
          "200": "#eeeeee",
          "300": "#e0e0e0",
          "400": "#bdbdbd",
          "50": "#fafafa",
          "500": "#9e9e9e",
          "600": "#757575",
          "700": "#616161",
          "800": "#424242",
          "900": "#212121",
          "A100": "#d5d5d5",
          "A200": "#aaaaaa",
          "A400": "#303030",
          "A700": "#616161",
        },
        "info": Object {
          "contrastText": "#fff",
          "dark": "#1976d2",
          "light": "#64b5f6",
          "main": "#2196f3",
        },
        "primary": Object {
          "contrastText": "#fff",
          "dark": "rgb(86, 53, 178)",
          "light": "rgb(150, 112, 255)",
          "main": "#7C4DFF",
        },
        "secondary": Object {
          "contrastText": "rgba(0, 0, 0, 0.87)",
          "dark": "#083575",
          "light": "#01C9EA",
          "main": "#18A9E6",
        },
        "success": Object {
          "contrastText": "rgba(0, 0, 0, 0.87)",
          "dark": "#388e3c",
          "light": "#81c784",
          "main": "#4caf50",
        },
        "text": Object {
          "disabled": "rgba(0, 0, 0, 0.38)",
          "hint": "rgba(0, 0, 0, 0.38)",
          "primary": "#4E4E4E",
          "secondary": "#4E4E4E",
        },
        "tonalOffset": 0.2,
        "type": "light",
        "warning": Object {
          "contrastText": "rgba(0, 0, 0, 0.87)",
          "dark": "#f57c00",
          "light": "#ffb74d",
          "main": "#ff9800",
        },
      },
      "props": Object {},
      "shadows": Array [
        "none",
        "0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12)",
        "0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12)",
        "0px 3px 3px -2px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 1px 8px 0px rgba(0,0,0,0.12)",
        "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
        "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
        "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
        "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
        "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
        "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
        "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
        "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
        "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
        "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
        "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
        "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
        "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
        "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
        "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
        "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
        "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
        "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
        "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
        "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
        "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
      ],
      "shape": Object {
        "borderRadius": 4,
      },
      "spacing": [Function],
      "stylesheets": Array [
        "https://fonts.googleapis.com/css?family=Raleway:500,800&display=swap",
      ],
      "transitions": Object {
        "create": [Function],
        "duration": Object {
          "complex": 375,
          "enteringScreen": 225,
          "leavingScreen": 195,
          "short": 250,
          "shorter": 200,
          "shortest": 150,
          "standard": 300,
        },
        "easing": Object {
          "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
          "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
          "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
          "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
        },
        "getAutoHeightDuration": [Function],
      },
      "typography": Object {
        "body": Object {
          "fontFamily": "\\"Raleway-Medium\\"",
          "fontSize": "0.9375rem",
          "fontWeight": 500,
          "letterSpacing": "0.01071em",
          "lineHeight": 1.43,
        },
        "body1": Object {
          "fontFamily": "\\"Raleway-ExtraBold\\"",
          "fontSize": "1rem",
          "fontWeight": 800,
          "letterSpacing": "0.00938em",
          "lineHeight": 1.5,
        },
        "body2": Object {
          "fontFamily": "\\"Raleway-Medium\\"",
          "fontSize": "0.9375rem",
          "fontWeight": 500,
          "letterSpacing": "0.01071em",
          "lineHeight": 1.43,
        },
        "button": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "0.875rem",
          "fontWeight": 500,
          "letterSpacing": "0.02857em",
          "lineHeight": 1.75,
          "textTransform": "uppercase",
        },
        "caption": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "0.75rem",
          "fontWeight": 400,
          "letterSpacing": "0.03333em",
          "lineHeight": 1.66,
        },
        "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
        "fontSize": 14,
        "fontWeightBold": 800,
        "fontWeightLight": 500,
        "fontWeightMedium": 500,
        "fontWeightRegular": 400,
        "h1": Object {
          "fontFamily": "\\"Raleway-ExtraBold\\"",
          "fontSize": "1.375rem",
          "fontWeight": 800,
          "letterSpacing": "-0.01562em",
          "lineHeight": 1.45,
        },
        "h2": Object {
          "fontFamily": "\\"Raleway-ExtraBold\\"",
          "fontSize": "1.125rem",
          "fontWeight": 800,
          "letterSpacing": "-0.00833em",
          "lineHeight": 1.27,
        },
        "h3": Object {
          "fontFamily": "\\"Raleway-ExtraBold\\"",
          "fontSize": "1.05rem",
          "fontWeight": 800,
          "letterSpacing": "0em",
          "lineHeight": 1.2,
        },
        "h4": Object {
          "fontFamily": "\\"Raleway-ExtraBold\\"",
          "fontSize": "1rem",
          "fontWeight": 800,
          "letterSpacing": "0.00735em",
          "lineHeight": 1.1,
        },
        "h5": Object {
          "fontFamily": "\\"Raleway-ExtraBold\\"",
          "fontSize": "1rem",
          "fontWeight": 800,
          "letterSpacing": "0em",
          "lineHeight": 1,
        },
        "h6": Object {
          "fontFamily": "\\"Raleway-ExtraBold\\"",
          "fontSize": "0.625rem",
          "fontWeight": 800,
          "letterSpacing": "0.0075em",
          "lineHeight": 1,
        },
        "heading": Object {
          "fontFamily": "\\"Raleway-ExtraBold\\"",
          "fontSize": "1rem",
          "fontWeight": 800,
          "letterSpacing": "0.00938em",
          "lineHeight": 1.5,
        },
        "htmlFontSize": 16,
        "overline": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "0.75rem",
          "fontWeight": 400,
          "letterSpacing": "0.08333em",
          "lineHeight": 2.66,
          "textTransform": "uppercase",
        },
        "pxToRem": [Function],
        "round": [Function],
        "subtitle1": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "1rem",
          "fontWeight": 400,
          "letterSpacing": "0.00938em",
          "lineHeight": 1.75,
        },
        "subtitle2": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "0.875rem",
          "fontWeight": 500,
          "letterSpacing": "0.00714em",
          "lineHeight": 1.57,
        },
      },
      "zIndex": Object {
        "appBar": 1100,
        "drawer": 1200,
        "mobileStepper": 1000,
        "modal": 1300,
        "snackbar": 1400,
        "speedDial": 1050,
        "tooltip": 1500,
      },
      Symbol(mui.nested): false,
    }
  }
>
  <StylesProvider
    generateClassName={[Function]}
  >
    <ThemeProvider
      theme={
        Object {
          "breakpoints": Object {
            "between": [Function],
            "down": [Function],
            "keys": Array [
              "xs",
              "sm",
              "md",
              "lg",
              "xl",
            ],
            "only": [Function],
            "up": [Function],
            "values": Object {
              "lg": 1280,
              "md": 960,
              "sm": 600,
              "xl": 1920,
              "xs": 0,
            },
            "width": [Function],
          },
          "direction": "ltr",
          "iconSet": Object {
            "config": Object {
              "cssFiles": Array [
                "css/all.css",
              ],
              "fonts": Array [
                Object {
                  "fontFace": "
font-family: 'Font Awesome 5 Free';
font-style: normal;
font-weight: 900;
font-display: block;",
                  "fontsPath": "./webfonts",
                  "licensePath": "./LICENSE.txt",
                  "source": "fa-solid-900.eot",
                  "sources": Array [
                    Object {
                      "format": "embedded-opentype",
                      "path": "fa-solid-900.eot",
                      "urlAddition": "?#iefix",
                    },
                    Object {
                      "format": "woff2",
                      "path": "fa-solid-900.woff2",
                    },
                    Object {
                      "format": "woff",
                      "path": "fa-solid-900.woff",
                    },
                    Object {
                      "format": "truetype",
                      "path": "fa-solid-900.ttf",
                    },
                    Object {
                      "format": "svg",
                      "path": "fa-solid-900.svg",
                      "urlAddition": "#fontawesome",
                    },
                  ],
                },
              ],
              "label": "Font Awesome Solid",
              "name": "fontawesome-solid",
              "npmModule": "@fortawesome/fontawesome-free",
              "type": 0,
            },
            "iconColor": [Function],
            "styles": [Function],
          },
          "icons": Object {
            "config": Object {
              "cssFiles": Array [
                "css/all.css",
              ],
              "fonts": Array [
                Object {
                  "fontFace": "
font-family: 'Font Awesome 5 Free';
font-style: normal;
font-weight: 900;
font-display: block;",
                  "fontsPath": "./webfonts",
                  "licensePath": "./LICENSE.txt",
                  "source": "fa-solid-900.eot",
                  "sources": Array [
                    Object {
                      "format": "embedded-opentype",
                      "path": "fa-solid-900.eot",
                      "urlAddition": "?#iefix",
                    },
                    Object {
                      "format": "woff2",
                      "path": "fa-solid-900.woff2",
                    },
                    Object {
                      "format": "woff",
                      "path": "fa-solid-900.woff",
                    },
                    Object {
                      "format": "truetype",
                      "path": "fa-solid-900.ttf",
                    },
                    Object {
                      "format": "svg",
                      "path": "fa-solid-900.svg",
                      "urlAddition": "#fontawesome",
                    },
                  ],
                },
              ],
              "label": "Font Awesome Solid",
              "name": "fontawesome-solid",
              "npmModule": "@fortawesome/fontawesome-free",
              "type": 0,
            },
            "iconColor": [Function],
            "styles": [Function],
          },
          "label": "SDK Default",
          "licenses": Array [
            "fonts/Raleway/OFL.txt",
          ],
          "localFonts": Object {
            "fonts/Raleway/Raleway-ExtraBold": [Function],
            "fonts/Raleway/Raleway-Medium": [Function],
          },
          "mixins": Object {
            "gutters": [Function],
            "toolbar": Object {
              "@media (min-width:0px) and (orientation: landscape)": Object {
                "minHeight": 48,
              },
              "@media (min-width:600px)": Object {
                "minHeight": 64,
              },
              "minHeight": 56,
            },
          },
          "name": "sdk-default",
          "overrides": Object {},
          "palette": Object {
            "action": Object {
              "activatedOpacity": 0.12,
              "active": "rgba(0, 0, 0, 0.54)",
              "disabled": "rgba(0, 0, 0, 0.26)",
              "disabledBackground": "rgba(0, 0, 0, 0.12)",
              "disabledOpacity": 0.38,
              "focus": "rgba(0, 0, 0, 0.12)",
              "focusOpacity": 0.12,
              "hover": "rgba(0, 0, 0, 0.04)",
              "hoverOpacity": 0.04,
              "selected": "rgba(0, 0, 0, 0.08)",
              "selectedOpacity": 0.08,
            },
            "adjustAlpha": [Function],
            "augmentColor": [Function],
            "background": Object {
              "default": "#FFFFFF",
              "paper": "#fff",
            },
            "common": Object {
              "black": "#000",
              "white": "#fff",
            },
            "contrastThreshold": 3,
            "divider": "rgba(0, 0, 0, 0.12)",
            "error": Object {
              "contrastText": "#fff",
              "dark": "#d32f2f",
              "light": "#e57373",
              "main": "#f44336",
            },
            "getContrastText": [Function],
            "grey": Object {
              "100": "#f5f5f5",
              "200": "#eeeeee",
              "300": "#e0e0e0",
              "400": "#bdbdbd",
              "50": "#fafafa",
              "500": "#9e9e9e",
              "600": "#757575",
              "700": "#616161",
              "800": "#424242",
              "900": "#212121",
              "A100": "#d5d5d5",
              "A200": "#aaaaaa",
              "A400": "#303030",
              "A700": "#616161",
            },
            "info": Object {
              "contrastText": "#fff",
              "dark": "#1976d2",
              "light": "#64b5f6",
              "main": "#2196f3",
            },
            "primary": Object {
              "contrastText": "#fff",
              "dark": "rgb(86, 53, 178)",
              "light": "rgb(150, 112, 255)",
              "main": "#7C4DFF",
            },
            "secondary": Object {
              "contrastText": "rgba(0, 0, 0, 0.87)",
              "dark": "#083575",
              "light": "#01C9EA",
              "main": "#18A9E6",
            },
            "success": Object {
              "contrastText": "rgba(0, 0, 0, 0.87)",
              "dark": "#388e3c",
              "light": "#81c784",
              "main": "#4caf50",
            },
            "text": Object {
              "disabled": "rgba(0, 0, 0, 0.38)",
              "hint": "rgba(0, 0, 0, 0.38)",
              "primary": "#4E4E4E",
              "secondary": "#4E4E4E",
            },
            "tonalOffset": 0.2,
            "type": "light",
            "warning": Object {
              "contrastText": "rgba(0, 0, 0, 0.87)",
              "dark": "#f57c00",
              "light": "#ffb74d",
              "main": "#ff9800",
            },
          },
          "props": Object {},
          "shadows": Array [
            "none",
            "0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12)",
            "0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12)",
            "0px 3px 3px -2px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 1px 8px 0px rgba(0,0,0,0.12)",
            "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
            "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
            "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
            "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
            "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
            "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
            "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
            "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
            "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
            "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
            "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
            "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
            "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
            "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
            "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
            "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
            "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
            "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
            "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
            "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
            "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
          ],
          "shape": Object {
            "borderRadius": 4,
          },
          "spacing": [Function],
          "stylesheets": Array [
            "https://fonts.googleapis.com/css?family=Raleway:500,800&display=swap",
          ],
          "transitions": Object {
            "create": [Function],
            "duration": Object {
              "complex": 375,
              "enteringScreen": 225,
              "leavingScreen": 195,
              "short": 250,
              "shorter": 200,
              "shortest": 150,
              "standard": 300,
            },
            "easing": Object {
              "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
              "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
              "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
              "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
            },
            "getAutoHeightDuration": [Function],
          },
          "typography": Object {
            "body": Object {
              "fontFamily": "\\"Raleway-Medium\\"",
              "fontSize": "0.9375rem",
              "fontWeight": 500,
              "letterSpacing": "0.01071em",
              "lineHeight": 1.43,
            },
            "body1": Object {
              "fontFamily": "\\"Raleway-ExtraBold\\"",
              "fontSize": "1rem",
              "fontWeight": 800,
              "letterSpacing": "0.00938em",
              "lineHeight": 1.5,
            },
            "body2": Object {
              "fontFamily": "\\"Raleway-Medium\\"",
              "fontSize": "0.9375rem",
              "fontWeight": 500,
              "letterSpacing": "0.01071em",
              "lineHeight": 1.43,
            },
            "button": Object {
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "0.875rem",
              "fontWeight": 500,
              "letterSpacing": "0.02857em",
              "lineHeight": 1.75,
              "textTransform": "uppercase",
            },
            "caption": Object {
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "0.75rem",
              "fontWeight": 400,
              "letterSpacing": "0.03333em",
              "lineHeight": 1.66,
            },
            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
            "fontSize": 14,
            "fontWeightBold": 800,
            "fontWeightLight": 500,
            "fontWeightMedium": 500,
            "fontWeightRegular": 400,
            "h1": Object {
              "fontFamily": "\\"Raleway-ExtraBold\\"",
              "fontSize": "1.375rem",
              "fontWeight": 800,
              "letterSpacing": "-0.01562em",
              "lineHeight": 1.45,
            },
            "h2": Object {
              "fontFamily": "\\"Raleway-ExtraBold\\"",
              "fontSize": "1.125rem",
              "fontWeight": 800,
              "letterSpacing": "-0.00833em",
              "lineHeight": 1.27,
            },
            "h3": Object {
              "fontFamily": "\\"Raleway-ExtraBold\\"",
              "fontSize": "1.05rem",
              "fontWeight": 800,
              "letterSpacing": "0em",
              "lineHeight": 1.2,
            },
            "h4": Object {
              "fontFamily": "\\"Raleway-ExtraBold\\"",
              "fontSize": "1rem",
              "fontWeight": 800,
              "letterSpacing": "0.00735em",
              "lineHeight": 1.1,
            },
            "h5": Object {
              "fontFamily": "\\"Raleway-ExtraBold\\"",
              "fontSize": "1rem",
              "fontWeight": 800,
              "letterSpacing": "0em",
              "lineHeight": 1,
            },
            "h6": Object {
              "fontFamily": "\\"Raleway-ExtraBold\\"",
              "fontSize": "0.625rem",
              "fontWeight": 800,
              "letterSpacing": "0.0075em",
              "lineHeight": 1,
            },
            "heading": Object {
              "fontFamily": "\\"Raleway-ExtraBold\\"",
              "fontSize": "1rem",
              "fontWeight": 800,
              "letterSpacing": "0.00938em",
              "lineHeight": 1.5,
            },
            "htmlFontSize": 16,
            "overline": Object {
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "0.75rem",
              "fontWeight": 400,
              "letterSpacing": "0.08333em",
              "lineHeight": 2.66,
              "textTransform": "uppercase",
            },
            "pxToRem": [Function],
            "round": [Function],
            "subtitle1": Object {
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "1rem",
              "fontWeight": 400,
              "letterSpacing": "0.00938em",
              "lineHeight": 1.75,
            },
            "subtitle2": Object {
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "0.875rem",
              "fontWeight": 500,
              "letterSpacing": "0.00714em",
              "lineHeight": 1.57,
            },
          },
          "zIndex": Object {
            "appBar": 1100,
            "drawer": 1200,
            "mobileStepper": 1000,
            "modal": 1300,
            "snackbar": 1400,
            "speedDial": 1050,
            "tooltip": 1500,
          },
          Symbol(mui.nested): false,
        }
      }
    >
      <NoThirdPartyPermissions
        classes={
          Object {
            "centeredSection": "centeredSection",
            "detailText": "detailText",
            "listItem": "listItem",
          }
        }
      >
        <section
          className="centeredSection"
        >
          <WithStyles(ForwardRef(List))>
            <ForwardRef(List)
              classes={
                Object {
                  "dense": "PodBrowser-dense",
                  "padding": "PodBrowser-padding",
                  "root": "PodBrowser-root",
                  "subheader": "PodBrowser-subheader",
                }
              }
            >
              <ul
                className="PodBrowser-root PodBrowser-padding"
              >
                <WithStyles(ForwardRef(ListItem))
                  className="listItem"
                  key="0"
                >
                  <ForwardRef(ListItem)
                    className="listItem"
                    classes={
                      Object {
                        "alignItemsFlexStart": "PodBrowser-alignItemsFlexStart",
                        "button": "PodBrowser-button",
                        "container": "PodBrowser-container",
                        "dense": "PodBrowser-dense",
                        "disabled": "PodBrowser-disabled",
                        "divider": "PodBrowser-divider",
                        "focusVisible": "PodBrowser-focusVisible",
                        "gutters": "PodBrowser-gutters",
                        "root": "PodBrowser-root",
                        "secondaryAction": "PodBrowser-secondaryAction",
                        "selected": "PodBrowser-selected",
                      }
                    }
                  >
                    <li
                      className="PodBrowser-root listItem PodBrowser-gutters"
                      disabled={false}
                    >
                      <WithStyles(ForwardRef(ListItemIcon))
                        key=".0"
                      >
                        <ForwardRef(ListItemIcon)
                          classes={
                            Object {
                              "alignItemsFlexStart": "PodBrowser-alignItemsFlexStart",
                              "root": "PodBrowser-root",
                            }
                          }
                        >
                          <div
                            className="PodBrowser-root"
                          >
                            <ForwardRef>
                              <WithStyles(ForwardRef(SvgIcon))>
                                <ForwardRef(SvgIcon)
                                  classes={
                                    Object {
                                      "colorAction": "PodBrowser-colorAction",
                                      "colorDisabled": "PodBrowser-colorDisabled",
                                      "colorError": "PodBrowser-colorError",
                                      "colorPrimary": "PodBrowser-colorPrimary",
                                      "colorSecondary": "PodBrowser-colorSecondary",
                                      "fontSizeInherit": "PodBrowser-fontSizeInherit",
                                      "fontSizeLarge": "PodBrowser-fontSizeLarge",
                                      "fontSizeSmall": "PodBrowser-fontSizeSmall",
                                      "root": "PodBrowser-root",
                                    }
                                  }
                                >
                                  <svg
                                    aria-hidden={true}
                                    className="PodBrowser-root"
                                    focusable="false"
                                    viewBox="0 0 24 24"
                                  >
                                    <path
                                      d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"
                                    />
                                  </svg>
                                </ForwardRef(SvgIcon)>
                              </WithStyles(ForwardRef(SvgIcon))>
                            </ForwardRef>
                            People
                          </div>
                        </ForwardRef(ListItemIcon)>
                      </WithStyles(ForwardRef(ListItemIcon))>
                    </li>
                  </ForwardRef(ListItem)>
                </WithStyles(ForwardRef(ListItem))>
                <WithStyles(ForwardRef(ListItem))
                  className="listItem"
                  key="1"
                >
                  <ForwardRef(ListItem)
                    className="listItem"
                    classes={
                      Object {
                        "alignItemsFlexStart": "PodBrowser-alignItemsFlexStart",
                        "button": "PodBrowser-button",
                        "container": "PodBrowser-container",
                        "dense": "PodBrowser-dense",
                        "disabled": "PodBrowser-disabled",
                        "divider": "PodBrowser-divider",
                        "focusVisible": "PodBrowser-focusVisible",
                        "gutters": "PodBrowser-gutters",
                        "root": "PodBrowser-root",
                        "secondaryAction": "PodBrowser-secondaryAction",
                        "selected": "PodBrowser-selected",
                      }
                    }
                  >
                    <li
                      className="PodBrowser-root listItem PodBrowser-gutters"
                      disabled={false}
                    >
                      <WithStyles(ForwardRef(Typography))
                        className="detailText"
                        key=".0"
                      >
                        <ForwardRef(Typography)
                          className="detailText"
                          classes={
                            Object {
                              "alignCenter": "PodBrowser-alignCenter",
                              "alignJustify": "PodBrowser-alignJustify",
                              "alignLeft": "PodBrowser-alignLeft",
                              "alignRight": "PodBrowser-alignRight",
                              "body1": "PodBrowser-body1",
                              "body2": "PodBrowser-body2",
                              "button": "PodBrowser-button",
                              "caption": "PodBrowser-caption",
                              "colorError": "PodBrowser-colorError",
                              "colorInherit": "PodBrowser-colorInherit",
                              "colorPrimary": "PodBrowser-colorPrimary",
                              "colorSecondary": "PodBrowser-colorSecondary",
                              "colorTextPrimary": "PodBrowser-colorTextPrimary",
                              "colorTextSecondary": "PodBrowser-colorTextSecondary",
                              "displayBlock": "PodBrowser-displayBlock",
                              "displayInline": "PodBrowser-displayInline",
                              "gutterBottom": "PodBrowser-gutterBottom",
                              "h1": "PodBrowser-h1",
                              "h2": "PodBrowser-h2",
                              "h3": "PodBrowser-h3",
                              "h4": "PodBrowser-h4",
                              "h5": "PodBrowser-h5",
                              "h6": "PodBrowser-h6",
                              "noWrap": "PodBrowser-noWrap",
                              "overline": "PodBrowser-overline",
                              "paragraph": "PodBrowser-paragraph",
                              "root": "PodBrowser-root",
                              "srOnly": "PodBrowser-srOnly",
                              "subtitle1": "PodBrowser-subtitle1",
                              "subtitle2": "PodBrowser-subtitle2",
                            }
                          }
                        >
                          <p
                            className="PodBrowser-root detailText PodBrowser-body1"
                          >
                            No 3rd party access
                          </p>
                        </ForwardRef(Typography)>
                      </WithStyles(ForwardRef(Typography))>
                    </li>
                  </ForwardRef(ListItem)>
                </WithStyles(ForwardRef(ListItem))>
              </ul>
            </ForwardRef(List)>
          </WithStyles(ForwardRef(List))>
        </section>
      </NoThirdPartyPermissions>
    </ThemeProvider>
  </StylesProvider>
</WithTheme>
`;

exports[`ResourceSharing it renders the NoThirdPartyPermissions with no 3rd party permissions 1`] = `
<WithTheme
  theme={
    Object {
      "breakpoints": Object {
        "between": [Function],
        "down": [Function],
        "keys": Array [
          "xs",
          "sm",
          "md",
          "lg",
          "xl",
        ],
        "only": [Function],
        "up": [Function],
        "values": Object {
          "lg": 1280,
          "md": 960,
          "sm": 600,
          "xl": 1920,
          "xs": 0,
        },
        "width": [Function],
      },
      "direction": "ltr",
      "iconSet": Object {
        "config": Object {
          "cssFiles": Array [
            "css/all.css",
          ],
          "fonts": Array [
            Object {
              "fontFace": "
font-family: 'Font Awesome 5 Free';
font-style: normal;
font-weight: 900;
font-display: block;",
              "fontsPath": "./webfonts",
              "licensePath": "./LICENSE.txt",
              "source": "fa-solid-900.eot",
              "sources": Array [
                Object {
                  "format": "embedded-opentype",
                  "path": "fa-solid-900.eot",
                  "urlAddition": "?#iefix",
                },
                Object {
                  "format": "woff2",
                  "path": "fa-solid-900.woff2",
                },
                Object {
                  "format": "woff",
                  "path": "fa-solid-900.woff",
                },
                Object {
                  "format": "truetype",
                  "path": "fa-solid-900.ttf",
                },
                Object {
                  "format": "svg",
                  "path": "fa-solid-900.svg",
                  "urlAddition": "#fontawesome",
                },
              ],
            },
          ],
          "label": "Font Awesome Solid",
          "name": "fontawesome-solid",
          "npmModule": "@fortawesome/fontawesome-free",
          "type": 0,
        },
        "iconColor": [Function],
        "styles": [Function],
      },
      "icons": Object {
        "config": Object {
          "cssFiles": Array [
            "css/all.css",
          ],
          "fonts": Array [
            Object {
              "fontFace": "
font-family: 'Font Awesome 5 Free';
font-style: normal;
font-weight: 900;
font-display: block;",
              "fontsPath": "./webfonts",
              "licensePath": "./LICENSE.txt",
              "source": "fa-solid-900.eot",
              "sources": Array [
                Object {
                  "format": "embedded-opentype",
                  "path": "fa-solid-900.eot",
                  "urlAddition": "?#iefix",
                },
                Object {
                  "format": "woff2",
                  "path": "fa-solid-900.woff2",
                },
                Object {
                  "format": "woff",
                  "path": "fa-solid-900.woff",
                },
                Object {
                  "format": "truetype",
                  "path": "fa-solid-900.ttf",
                },
                Object {
                  "format": "svg",
                  "path": "fa-solid-900.svg",
                  "urlAddition": "#fontawesome",
                },
              ],
            },
          ],
          "label": "Font Awesome Solid",
          "name": "fontawesome-solid",
          "npmModule": "@fortawesome/fontawesome-free",
          "type": 0,
        },
        "iconColor": [Function],
        "styles": [Function],
      },
      "label": "SDK Default",
      "licenses": Array [
        "fonts/Raleway/OFL.txt",
      ],
      "localFonts": Object {
        "fonts/Raleway/Raleway-ExtraBold": [Function],
        "fonts/Raleway/Raleway-Medium": [Function],
      },
      "mixins": Object {
        "gutters": [Function],
        "toolbar": Object {
          "@media (min-width:0px) and (orientation: landscape)": Object {
            "minHeight": 48,
          },
          "@media (min-width:600px)": Object {
            "minHeight": 64,
          },
          "minHeight": 56,
        },
      },
      "name": "sdk-default",
      "overrides": Object {},
      "palette": Object {
        "action": Object {
          "activatedOpacity": 0.12,
          "active": "rgba(0, 0, 0, 0.54)",
          "disabled": "rgba(0, 0, 0, 0.26)",
          "disabledBackground": "rgba(0, 0, 0, 0.12)",
          "disabledOpacity": 0.38,
          "focus": "rgba(0, 0, 0, 0.12)",
          "focusOpacity": 0.12,
          "hover": "rgba(0, 0, 0, 0.04)",
          "hoverOpacity": 0.04,
          "selected": "rgba(0, 0, 0, 0.08)",
          "selectedOpacity": 0.08,
        },
        "adjustAlpha": [Function],
        "augmentColor": [Function],
        "background": Object {
          "default": "#FFFFFF",
          "paper": "#fff",
        },
        "common": Object {
          "black": "#000",
          "white": "#fff",
        },
        "contrastThreshold": 3,
        "divider": "rgba(0, 0, 0, 0.12)",
        "error": Object {
          "contrastText": "#fff",
          "dark": "#d32f2f",
          "light": "#e57373",
          "main": "#f44336",
        },
        "getContrastText": [Function],
        "grey": Object {
          "100": "#f5f5f5",
          "200": "#eeeeee",
          "300": "#e0e0e0",
          "400": "#bdbdbd",
          "50": "#fafafa",
          "500": "#9e9e9e",
          "600": "#757575",
          "700": "#616161",
          "800": "#424242",
          "900": "#212121",
          "A100": "#d5d5d5",
          "A200": "#aaaaaa",
          "A400": "#303030",
          "A700": "#616161",
        },
        "info": Object {
          "contrastText": "#fff",
          "dark": "#1976d2",
          "light": "#64b5f6",
          "main": "#2196f3",
        },
        "primary": Object {
          "contrastText": "#fff",
          "dark": "rgb(86, 53, 178)",
          "light": "rgb(150, 112, 255)",
          "main": "#7C4DFF",
        },
        "secondary": Object {
          "contrastText": "rgba(0, 0, 0, 0.87)",
          "dark": "#083575",
          "light": "#01C9EA",
          "main": "#18A9E6",
        },
        "success": Object {
          "contrastText": "rgba(0, 0, 0, 0.87)",
          "dark": "#388e3c",
          "light": "#81c784",
          "main": "#4caf50",
        },
        "text": Object {
          "disabled": "rgba(0, 0, 0, 0.38)",
          "hint": "rgba(0, 0, 0, 0.38)",
          "primary": "#4E4E4E",
          "secondary": "#4E4E4E",
        },
        "tonalOffset": 0.2,
        "type": "light",
        "warning": Object {
          "contrastText": "rgba(0, 0, 0, 0.87)",
          "dark": "#f57c00",
          "light": "#ffb74d",
          "main": "#ff9800",
        },
      },
      "props": Object {},
      "shadows": Array [
        "none",
        "0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12)",
        "0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12)",
        "0px 3px 3px -2px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 1px 8px 0px rgba(0,0,0,0.12)",
        "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
        "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
        "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
        "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
        "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
        "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
        "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
        "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
        "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
        "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
        "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
        "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
        "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
        "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
        "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
        "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
        "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
        "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
        "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
        "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
        "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
      ],
      "shape": Object {
        "borderRadius": 4,
      },
      "spacing": [Function],
      "stylesheets": Array [
        "https://fonts.googleapis.com/css?family=Raleway:500,800&display=swap",
      ],
      "transitions": Object {
        "create": [Function],
        "duration": Object {
          "complex": 375,
          "enteringScreen": 225,
          "leavingScreen": 195,
          "short": 250,
          "shorter": 200,
          "shortest": 150,
          "standard": 300,
        },
        "easing": Object {
          "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
          "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
          "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
          "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
        },
        "getAutoHeightDuration": [Function],
      },
      "typography": Object {
        "body": Object {
          "fontFamily": "\\"Raleway-Medium\\"",
          "fontSize": "0.9375rem",
          "fontWeight": 500,
          "letterSpacing": "0.01071em",
          "lineHeight": 1.43,
        },
        "body1": Object {
          "fontFamily": "\\"Raleway-ExtraBold\\"",
          "fontSize": "1rem",
          "fontWeight": 800,
          "letterSpacing": "0.00938em",
          "lineHeight": 1.5,
        },
        "body2": Object {
          "fontFamily": "\\"Raleway-Medium\\"",
          "fontSize": "0.9375rem",
          "fontWeight": 500,
          "letterSpacing": "0.01071em",
          "lineHeight": 1.43,
        },
        "button": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "0.875rem",
          "fontWeight": 500,
          "letterSpacing": "0.02857em",
          "lineHeight": 1.75,
          "textTransform": "uppercase",
        },
        "caption": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "0.75rem",
          "fontWeight": 400,
          "letterSpacing": "0.03333em",
          "lineHeight": 1.66,
        },
        "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
        "fontSize": 14,
        "fontWeightBold": 800,
        "fontWeightLight": 500,
        "fontWeightMedium": 500,
        "fontWeightRegular": 400,
        "h1": Object {
          "fontFamily": "\\"Raleway-ExtraBold\\"",
          "fontSize": "1.375rem",
          "fontWeight": 800,
          "letterSpacing": "-0.01562em",
          "lineHeight": 1.45,
        },
        "h2": Object {
          "fontFamily": "\\"Raleway-ExtraBold\\"",
          "fontSize": "1.125rem",
          "fontWeight": 800,
          "letterSpacing": "-0.00833em",
          "lineHeight": 1.27,
        },
        "h3": Object {
          "fontFamily": "\\"Raleway-ExtraBold\\"",
          "fontSize": "1.05rem",
          "fontWeight": 800,
          "letterSpacing": "0em",
          "lineHeight": 1.2,
        },
        "h4": Object {
          "fontFamily": "\\"Raleway-ExtraBold\\"",
          "fontSize": "1rem",
          "fontWeight": 800,
          "letterSpacing": "0.00735em",
          "lineHeight": 1.1,
        },
        "h5": Object {
          "fontFamily": "\\"Raleway-ExtraBold\\"",
          "fontSize": "1rem",
          "fontWeight": 800,
          "letterSpacing": "0em",
          "lineHeight": 1,
        },
        "h6": Object {
          "fontFamily": "\\"Raleway-ExtraBold\\"",
          "fontSize": "0.625rem",
          "fontWeight": 800,
          "letterSpacing": "0.0075em",
          "lineHeight": 1,
        },
        "heading": Object {
          "fontFamily": "\\"Raleway-ExtraBold\\"",
          "fontSize": "1rem",
          "fontWeight": 800,
          "letterSpacing": "0.00938em",
          "lineHeight": 1.5,
        },
        "htmlFontSize": 16,
        "overline": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "0.75rem",
          "fontWeight": 400,
          "letterSpacing": "0.08333em",
          "lineHeight": 2.66,
          "textTransform": "uppercase",
        },
        "pxToRem": [Function],
        "round": [Function],
        "subtitle1": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "1rem",
          "fontWeight": 400,
          "letterSpacing": "0.00938em",
          "lineHeight": 1.75,
        },
        "subtitle2": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "0.875rem",
          "fontWeight": 500,
          "letterSpacing": "0.00714em",
          "lineHeight": 1.57,
        },
      },
      "zIndex": Object {
        "appBar": 1100,
        "drawer": 1200,
        "mobileStepper": 1000,
        "modal": 1300,
        "snackbar": 1400,
        "speedDial": 1050,
        "tooltip": 1500,
      },
      Symbol(mui.nested): false,
    }
  }
>
  <StylesProvider
    generateClassName={[Function]}
  >
    <ThemeProvider
      theme={
        Object {
          "breakpoints": Object {
            "between": [Function],
            "down": [Function],
            "keys": Array [
              "xs",
              "sm",
              "md",
              "lg",
              "xl",
            ],
            "only": [Function],
            "up": [Function],
            "values": Object {
              "lg": 1280,
              "md": 960,
              "sm": 600,
              "xl": 1920,
              "xs": 0,
            },
            "width": [Function],
          },
          "direction": "ltr",
          "iconSet": Object {
            "config": Object {
              "cssFiles": Array [
                "css/all.css",
              ],
              "fonts": Array [
                Object {
                  "fontFace": "
font-family: 'Font Awesome 5 Free';
font-style: normal;
font-weight: 900;
font-display: block;",
                  "fontsPath": "./webfonts",
                  "licensePath": "./LICENSE.txt",
                  "source": "fa-solid-900.eot",
                  "sources": Array [
                    Object {
                      "format": "embedded-opentype",
                      "path": "fa-solid-900.eot",
                      "urlAddition": "?#iefix",
                    },
                    Object {
                      "format": "woff2",
                      "path": "fa-solid-900.woff2",
                    },
                    Object {
                      "format": "woff",
                      "path": "fa-solid-900.woff",
                    },
                    Object {
                      "format": "truetype",
                      "path": "fa-solid-900.ttf",
                    },
                    Object {
                      "format": "svg",
                      "path": "fa-solid-900.svg",
                      "urlAddition": "#fontawesome",
                    },
                  ],
                },
              ],
              "label": "Font Awesome Solid",
              "name": "fontawesome-solid",
              "npmModule": "@fortawesome/fontawesome-free",
              "type": 0,
            },
            "iconColor": [Function],
            "styles": [Function],
          },
          "icons": Object {
            "config": Object {
              "cssFiles": Array [
                "css/all.css",
              ],
              "fonts": Array [
                Object {
                  "fontFace": "
font-family: 'Font Awesome 5 Free';
font-style: normal;
font-weight: 900;
font-display: block;",
                  "fontsPath": "./webfonts",
                  "licensePath": "./LICENSE.txt",
                  "source": "fa-solid-900.eot",
                  "sources": Array [
                    Object {
                      "format": "embedded-opentype",
                      "path": "fa-solid-900.eot",
                      "urlAddition": "?#iefix",
                    },
                    Object {
                      "format": "woff2",
                      "path": "fa-solid-900.woff2",
                    },
                    Object {
                      "format": "woff",
                      "path": "fa-solid-900.woff",
                    },
                    Object {
                      "format": "truetype",
                      "path": "fa-solid-900.ttf",
                    },
                    Object {
                      "format": "svg",
                      "path": "fa-solid-900.svg",
                      "urlAddition": "#fontawesome",
                    },
                  ],
                },
              ],
              "label": "Font Awesome Solid",
              "name": "fontawesome-solid",
              "npmModule": "@fortawesome/fontawesome-free",
              "type": 0,
            },
            "iconColor": [Function],
            "styles": [Function],
          },
          "label": "SDK Default",
          "licenses": Array [
            "fonts/Raleway/OFL.txt",
          ],
          "localFonts": Object {
            "fonts/Raleway/Raleway-ExtraBold": [Function],
            "fonts/Raleway/Raleway-Medium": [Function],
          },
          "mixins": Object {
            "gutters": [Function],
            "toolbar": Object {
              "@media (min-width:0px) and (orientation: landscape)": Object {
                "minHeight": 48,
              },
              "@media (min-width:600px)": Object {
                "minHeight": 64,
              },
              "minHeight": 56,
            },
          },
          "name": "sdk-default",
          "overrides": Object {},
          "palette": Object {
            "action": Object {
              "activatedOpacity": 0.12,
              "active": "rgba(0, 0, 0, 0.54)",
              "disabled": "rgba(0, 0, 0, 0.26)",
              "disabledBackground": "rgba(0, 0, 0, 0.12)",
              "disabledOpacity": 0.38,
              "focus": "rgba(0, 0, 0, 0.12)",
              "focusOpacity": 0.12,
              "hover": "rgba(0, 0, 0, 0.04)",
              "hoverOpacity": 0.04,
              "selected": "rgba(0, 0, 0, 0.08)",
              "selectedOpacity": 0.08,
            },
            "adjustAlpha": [Function],
            "augmentColor": [Function],
            "background": Object {
              "default": "#FFFFFF",
              "paper": "#fff",
            },
            "common": Object {
              "black": "#000",
              "white": "#fff",
            },
            "contrastThreshold": 3,
            "divider": "rgba(0, 0, 0, 0.12)",
            "error": Object {
              "contrastText": "#fff",
              "dark": "#d32f2f",
              "light": "#e57373",
              "main": "#f44336",
            },
            "getContrastText": [Function],
            "grey": Object {
              "100": "#f5f5f5",
              "200": "#eeeeee",
              "300": "#e0e0e0",
              "400": "#bdbdbd",
              "50": "#fafafa",
              "500": "#9e9e9e",
              "600": "#757575",
              "700": "#616161",
              "800": "#424242",
              "900": "#212121",
              "A100": "#d5d5d5",
              "A200": "#aaaaaa",
              "A400": "#303030",
              "A700": "#616161",
            },
            "info": Object {
              "contrastText": "#fff",
              "dark": "#1976d2",
              "light": "#64b5f6",
              "main": "#2196f3",
            },
            "primary": Object {
              "contrastText": "#fff",
              "dark": "rgb(86, 53, 178)",
              "light": "rgb(150, 112, 255)",
              "main": "#7C4DFF",
            },
            "secondary": Object {
              "contrastText": "rgba(0, 0, 0, 0.87)",
              "dark": "#083575",
              "light": "#01C9EA",
              "main": "#18A9E6",
            },
            "success": Object {
              "contrastText": "rgba(0, 0, 0, 0.87)",
              "dark": "#388e3c",
              "light": "#81c784",
              "main": "#4caf50",
            },
            "text": Object {
              "disabled": "rgba(0, 0, 0, 0.38)",
              "hint": "rgba(0, 0, 0, 0.38)",
              "primary": "#4E4E4E",
              "secondary": "#4E4E4E",
            },
            "tonalOffset": 0.2,
            "type": "light",
            "warning": Object {
              "contrastText": "rgba(0, 0, 0, 0.87)",
              "dark": "#f57c00",
              "light": "#ffb74d",
              "main": "#ff9800",
            },
          },
          "props": Object {},
          "shadows": Array [
            "none",
            "0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12)",
            "0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12)",
            "0px 3px 3px -2px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 1px 8px 0px rgba(0,0,0,0.12)",
            "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
            "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
            "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
            "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
            "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
            "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
            "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
            "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
            "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
            "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
            "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
            "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
            "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
            "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
            "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
            "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
            "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
            "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
            "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
            "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
            "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
          ],
          "shape": Object {
            "borderRadius": 4,
          },
          "spacing": [Function],
          "stylesheets": Array [
            "https://fonts.googleapis.com/css?family=Raleway:500,800&display=swap",
          ],
          "transitions": Object {
            "create": [Function],
            "duration": Object {
              "complex": 375,
              "enteringScreen": 225,
              "leavingScreen": 195,
              "short": 250,
              "shorter": 200,
              "shortest": 150,
              "standard": 300,
            },
            "easing": Object {
              "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
              "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
              "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
              "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
            },
            "getAutoHeightDuration": [Function],
          },
          "typography": Object {
            "body": Object {
              "fontFamily": "\\"Raleway-Medium\\"",
              "fontSize": "0.9375rem",
              "fontWeight": 500,
              "letterSpacing": "0.01071em",
              "lineHeight": 1.43,
            },
            "body1": Object {
              "fontFamily": "\\"Raleway-ExtraBold\\"",
              "fontSize": "1rem",
              "fontWeight": 800,
              "letterSpacing": "0.00938em",
              "lineHeight": 1.5,
            },
            "body2": Object {
              "fontFamily": "\\"Raleway-Medium\\"",
              "fontSize": "0.9375rem",
              "fontWeight": 500,
              "letterSpacing": "0.01071em",
              "lineHeight": 1.43,
            },
            "button": Object {
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "0.875rem",
              "fontWeight": 500,
              "letterSpacing": "0.02857em",
              "lineHeight": 1.75,
              "textTransform": "uppercase",
            },
            "caption": Object {
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "0.75rem",
              "fontWeight": 400,
              "letterSpacing": "0.03333em",
              "lineHeight": 1.66,
            },
            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
            "fontSize": 14,
            "fontWeightBold": 800,
            "fontWeightLight": 500,
            "fontWeightMedium": 500,
            "fontWeightRegular": 400,
            "h1": Object {
              "fontFamily": "\\"Raleway-ExtraBold\\"",
              "fontSize": "1.375rem",
              "fontWeight": 800,
              "letterSpacing": "-0.01562em",
              "lineHeight": 1.45,
            },
            "h2": Object {
              "fontFamily": "\\"Raleway-ExtraBold\\"",
              "fontSize": "1.125rem",
              "fontWeight": 800,
              "letterSpacing": "-0.00833em",
              "lineHeight": 1.27,
            },
            "h3": Object {
              "fontFamily": "\\"Raleway-ExtraBold\\"",
              "fontSize": "1.05rem",
              "fontWeight": 800,
              "letterSpacing": "0em",
              "lineHeight": 1.2,
            },
            "h4": Object {
              "fontFamily": "\\"Raleway-ExtraBold\\"",
              "fontSize": "1rem",
              "fontWeight": 800,
              "letterSpacing": "0.00735em",
              "lineHeight": 1.1,
            },
            "h5": Object {
              "fontFamily": "\\"Raleway-ExtraBold\\"",
              "fontSize": "1rem",
              "fontWeight": 800,
              "letterSpacing": "0em",
              "lineHeight": 1,
            },
            "h6": Object {
              "fontFamily": "\\"Raleway-ExtraBold\\"",
              "fontSize": "0.625rem",
              "fontWeight": 800,
              "letterSpacing": "0.0075em",
              "lineHeight": 1,
            },
            "heading": Object {
              "fontFamily": "\\"Raleway-ExtraBold\\"",
              "fontSize": "1rem",
              "fontWeight": 800,
              "letterSpacing": "0.00938em",
              "lineHeight": 1.5,
            },
            "htmlFontSize": 16,
            "overline": Object {
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "0.75rem",
              "fontWeight": 400,
              "letterSpacing": "0.08333em",
              "lineHeight": 2.66,
              "textTransform": "uppercase",
            },
            "pxToRem": [Function],
            "round": [Function],
            "subtitle1": Object {
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "1rem",
              "fontWeight": 400,
              "letterSpacing": "0.00938em",
              "lineHeight": 1.75,
            },
            "subtitle2": Object {
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "0.875rem",
              "fontWeight": 500,
              "letterSpacing": "0.00714em",
              "lineHeight": 1.57,
            },
          },
          "zIndex": Object {
            "appBar": 1100,
            "drawer": 1200,
            "mobileStepper": 1000,
            "modal": 1300,
            "snackbar": 1400,
            "speedDial": 1050,
            "tooltip": 1500,
          },
          Symbol(mui.nested): false,
        }
      }
    >
      <ResourceSharing
        defaultPermissions={Array []}
        iri="iri"
        name="name"
        permissions={
          Array [
            Object {
              "acl": Object {
                "append": true,
                "control": true,
                "read": true,
                "write": true,
              },
              "alias": "Full Control",
              "profile": Object {
                "webId": "webId",
              },
              "webId": "webId",
            },
          ]
        }
      >
        <div>
          <WithStyles(ForwardRef(Button))
            onClick={[Function]}
            startIcon={<Memo(ChevronLeftIcon) />}
          >
            <ForwardRef(Button)
              classes={
                Object {
                  "colorInherit": "PodBrowser-colorInherit",
                  "contained": "PodBrowser-contained",
                  "containedPrimary": "PodBrowser-containedPrimary",
                  "containedSecondary": "PodBrowser-containedSecondary",
                  "containedSizeLarge": "PodBrowser-containedSizeLarge",
                  "containedSizeSmall": "PodBrowser-containedSizeSmall",
                  "disableElevation": "PodBrowser-disableElevation",
                  "disabled": "PodBrowser-disabled",
                  "endIcon": "PodBrowser-endIcon",
                  "focusVisible": "PodBrowser-focusVisible",
                  "fullWidth": "PodBrowser-fullWidth",
                  "iconSizeLarge": "PodBrowser-iconSizeLarge",
                  "iconSizeMedium": "PodBrowser-iconSizeMedium",
                  "iconSizeSmall": "PodBrowser-iconSizeSmall",
                  "label": "PodBrowser-label",
                  "outlined": "PodBrowser-outlined",
                  "outlinedPrimary": "PodBrowser-outlinedPrimary",
                  "outlinedSecondary": "PodBrowser-outlinedSecondary",
                  "outlinedSizeLarge": "PodBrowser-outlinedSizeLarge",
                  "outlinedSizeSmall": "PodBrowser-outlinedSizeSmall",
                  "root": "PodBrowser-root",
                  "sizeLarge": "PodBrowser-sizeLarge",
                  "sizeSmall": "PodBrowser-sizeSmall",
                  "startIcon": "PodBrowser-startIcon",
                  "text": "PodBrowser-text",
                  "textPrimary": "PodBrowser-textPrimary",
                  "textSecondary": "PodBrowser-textSecondary",
                  "textSizeLarge": "PodBrowser-textSizeLarge",
                  "textSizeSmall": "PodBrowser-textSizeSmall",
                }
              }
              onClick={[Function]}
              startIcon={<Memo(ChevronLeftIcon) />}
            >
              <WithStyles(ForwardRef(ButtonBase))
                className="PodBrowser-root PodBrowser-text"
                component="button"
                disabled={false}
                focusRipple={true}
                focusVisibleClassName="PodBrowser-focusVisible"
                onClick={[Function]}
                type="button"
              >
                <ForwardRef(ButtonBase)
                  className="PodBrowser-root PodBrowser-text"
                  classes={
                    Object {
                      "disabled": "PodBrowser-disabled",
                      "focusVisible": "PodBrowser-focusVisible",
                      "root": "PodBrowser-root",
                    }
                  }
                  component="button"
                  disabled={false}
                  focusRipple={true}
                  focusVisibleClassName="PodBrowser-focusVisible"
                  onClick={[Function]}
                  type="button"
                >
                  <button
                    className="PodBrowser-root PodBrowser-root PodBrowser-text"
                    disabled={false}
                    onBlur={[Function]}
                    onClick={[Function]}
                    onDragLeave={[Function]}
                    onFocus={[Function]}
                    onKeyDown={[Function]}
                    onKeyUp={[Function]}
                    onMouseDown={[Function]}
                    onMouseLeave={[Function]}
                    onMouseUp={[Function]}
                    onTouchEnd={[Function]}
                    onTouchMove={[Function]}
                    onTouchStart={[Function]}
                    tabIndex={0}
                    type="button"
                  >
                    <span
                      className="PodBrowser-label"
                    >
                      <span
                        className="PodBrowser-startIcon PodBrowser-iconSizeMedium"
                      >
                        <ForwardRef>
                          <WithStyles(ForwardRef(SvgIcon))>
                            <ForwardRef(SvgIcon)
                              classes={
                                Object {
                                  "colorAction": "PodBrowser-colorAction",
                                  "colorDisabled": "PodBrowser-colorDisabled",
                                  "colorError": "PodBrowser-colorError",
                                  "colorPrimary": "PodBrowser-colorPrimary",
                                  "colorSecondary": "PodBrowser-colorSecondary",
                                  "fontSizeInherit": "PodBrowser-fontSizeInherit",
                                  "fontSizeLarge": "PodBrowser-fontSizeLarge",
                                  "fontSizeSmall": "PodBrowser-fontSizeSmall",
                                  "root": "PodBrowser-root",
                                }
                              }
                            >
                              <svg
                                aria-hidden={true}
                                className="PodBrowser-root"
                                focusable="false"
                                viewBox="0 0 24 24"
                              >
                                <path
                                  d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"
                                />
                              </svg>
                            </ForwardRef(SvgIcon)>
                          </WithStyles(ForwardRef(SvgIcon))>
                        </ForwardRef>
                      </span>
                      Details
                    </span>
                    <WithStyles(memo)
                      center={false}
                    >
                      <ForwardRef(TouchRipple)
                        center={false}
                        classes={
                          Object {
                            "child": "PodBrowser-child",
                            "childLeaving": "PodBrowser-childLeaving",
                            "childPulsate": "PodBrowser-childPulsate",
                            "ripple": "PodBrowser-ripple",
                            "ripplePulsate": "PodBrowser-ripplePulsate",
                            "rippleVisible": "PodBrowser-rippleVisible",
                            "root": "PodBrowser-root",
                          }
                        }
                      >
                        <span
                          className="PodBrowser-root"
                        >
                          <TransitionGroup
                            childFactory={[Function]}
                            component={null}
                            exit={true}
                          />
                        </span>
                      </ForwardRef(TouchRipple)>
                    </WithStyles(memo)>
                  </button>
                </ForwardRef(ButtonBase)>
              </WithStyles(ForwardRef(ButtonBase))>
            </ForwardRef(Button)>
          </WithStyles(ForwardRef(Button))>
        </div>
        <WithStyles(ForwardRef(Divider))>
          <ForwardRef(Divider)
            classes={
              Object {
                "absolute": "PodBrowser-absolute",
                "flexItem": "PodBrowser-flexItem",
                "inset": "PodBrowser-inset",
                "light": "PodBrowser-light",
                "middle": "PodBrowser-middle",
                "root": "PodBrowser-root",
                "vertical": "PodBrowser-vertical",
              }
            }
          >
            <hr
              className="PodBrowser-root"
            />
          </ForwardRef(Divider)>
        </WithStyles(ForwardRef(Divider))>
        <section
          className="PodBrowser-headerSection"
        >
          <h3
            className="PodBrowser-content-h3"
            title="iri"
          >
            name
          </h3>
        </section>
        <WithStyles(ForwardRef(Divider))>
          <ForwardRef(Divider)
            classes={
              Object {
                "absolute": "PodBrowser-absolute",
                "flexItem": "PodBrowser-flexItem",
                "inset": "PodBrowser-inset",
                "light": "PodBrowser-light",
                "middle": "PodBrowser-middle",
                "root": "PodBrowser-root",
                "vertical": "PodBrowser-vertical",
              }
            }
          >
            <hr
              className="PodBrowser-root"
            />
          </ForwardRef(Divider)>
        </WithStyles(ForwardRef(Divider))>
        <section
          className="PodBrowser-centeredSection"
        >
          <h5
            className="PodBrowser-content-h5"
          >
            My Access
          </h5>
          <AgentAccessList
            iri="iri"
            onSave={[Function]}
            onSubmit={[Function]}
            permissions={
              Array [
                Object {
                  "acl": Object {
                    "append": true,
                    "control": true,
                    "read": true,
                    "write": true,
                  },
                  "alias": "Full Control",
                  "profile": Object {
                    "webId": "webId",
                  },
                  "webId": "webId",
                },
              ]
            }
            saveFn={[Function]}
            warn={true}
          >
            <WithStyles(ForwardRef(List))>
              <ForwardRef(List)
                classes={
                  Object {
                    "dense": "PodBrowser-dense",
                    "padding": "PodBrowser-padding",
                    "root": "PodBrowser-root",
                    "subheader": "PodBrowser-subheader",
                  }
                }
              >
                <ul
                  className="PodBrowser-root PodBrowser-padding"
                >
                  <WithStyles(ForwardRef(ListItem))
                    className="PodBrowser-listItem"
                    key="webId"
                  >
                    <ForwardRef(ListItem)
                      className="PodBrowser-listItem"
                      classes={
                        Object {
                          "alignItemsFlexStart": "PodBrowser-alignItemsFlexStart",
                          "button": "PodBrowser-button",
                          "container": "PodBrowser-container",
                          "dense": "PodBrowser-dense",
                          "disabled": "PodBrowser-disabled",
                          "divider": "PodBrowser-divider",
                          "focusVisible": "PodBrowser-focusVisible",
                          "gutters": "PodBrowser-gutters",
                          "root": "PodBrowser-root",
                          "secondaryAction": "PodBrowser-secondaryAction",
                          "selected": "PodBrowser-selected",
                        }
                      }
                    >
                      <li
                        className="PodBrowser-root PodBrowser-listItem PodBrowser-gutters"
                        disabled={false}
                      >
                        <WithStyles(ForwardRef(Avatar))
                          alt="webId"
                          className="PodBrowser-avatar"
                          key=".0"
                        >
                          <ForwardRef(Avatar)
                            alt="webId"
                            className="PodBrowser-avatar"
                            classes={
                              Object {
                                "circle": "PodBrowser-circle",
                                "colorDefault": "PodBrowser-colorDefault",
                                "fallback": "PodBrowser-fallback",
                                "img": "PodBrowser-img",
                                "root": "PodBrowser-root",
                                "rounded": "PodBrowser-rounded",
                                "square": "PodBrowser-square",
                              }
                            }
                          >
                            <div
                              className="PodBrowser-root PodBrowser-circle PodBrowser-avatar PodBrowser-colorDefault"
                            >
                              <ForwardRef(PersonIcon)
                                className="PodBrowser-fallback"
                              >
                                <WithStyles(ForwardRef(SvgIcon))
                                  className="PodBrowser-fallback"
                                >
                                  <ForwardRef(SvgIcon)
                                    className="PodBrowser-fallback"
                                    classes={
                                      Object {
                                        "colorAction": "PodBrowser-colorAction",
                                        "colorDisabled": "PodBrowser-colorDisabled",
                                        "colorError": "PodBrowser-colorError",
                                        "colorPrimary": "PodBrowser-colorPrimary",
                                        "colorSecondary": "PodBrowser-colorSecondary",
                                        "fontSizeInherit": "PodBrowser-fontSizeInherit",
                                        "fontSizeLarge": "PodBrowser-fontSizeLarge",
                                        "fontSizeSmall": "PodBrowser-fontSizeSmall",
                                        "root": "PodBrowser-root",
                                      }
                                    }
                                  >
                                    <svg
                                      aria-hidden={true}
                                      className="PodBrowser-root PodBrowser-fallback"
                                      focusable="false"
                                      viewBox="0 0 24 24"
                                    >
                                      <path
                                        d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"
                                      />
                                    </svg>
                                  </ForwardRef(SvgIcon)>
                                </WithStyles(ForwardRef(SvgIcon))>
                              </ForwardRef(PersonIcon)>
                            </div>
                          </ForwardRef(Avatar)>
                        </WithStyles(ForwardRef(Avatar))>
                        <WithStyles(ForwardRef(Typography))
                          className="PodBrowser-detailText"
                          key=".1"
                        >
                          <ForwardRef(Typography)
                            className="PodBrowser-detailText"
                            classes={
                              Object {
                                "alignCenter": "PodBrowser-alignCenter",
                                "alignJustify": "PodBrowser-alignJustify",
                                "alignLeft": "PodBrowser-alignLeft",
                                "alignRight": "PodBrowser-alignRight",
                                "body1": "PodBrowser-body1",
                                "body2": "PodBrowser-body2",
                                "button": "PodBrowser-button",
                                "caption": "PodBrowser-caption",
                                "colorError": "PodBrowser-colorError",
                                "colorInherit": "PodBrowser-colorInherit",
                                "colorPrimary": "PodBrowser-colorPrimary",
                                "colorSecondary": "PodBrowser-colorSecondary",
                                "colorTextPrimary": "PodBrowser-colorTextPrimary",
                                "colorTextSecondary": "PodBrowser-colorTextSecondary",
                                "displayBlock": "PodBrowser-displayBlock",
                                "displayInline": "PodBrowser-displayInline",
                                "gutterBottom": "PodBrowser-gutterBottom",
                                "h1": "PodBrowser-h1",
                                "h2": "PodBrowser-h2",
                                "h3": "PodBrowser-h3",
                                "h4": "PodBrowser-h4",
                                "h5": "PodBrowser-h5",
                                "h6": "PodBrowser-h6",
                                "noWrap": "PodBrowser-noWrap",
                                "overline": "PodBrowser-overline",
                                "paragraph": "PodBrowser-paragraph",
                                "root": "PodBrowser-root",
                                "srOnly": "PodBrowser-srOnly",
                                "subtitle1": "PodBrowser-subtitle1",
                                "subtitle2": "PodBrowser-subtitle2",
                              }
                            }
                          >
                            <p
                              className="PodBrowser-root PodBrowser-detailText PodBrowser-body1"
                            >
                              webId
                            </p>
                          </ForwardRef(Typography)>
                        </WithStyles(ForwardRef(Typography))>
                        <PermissionsForm
                          key=".$webId"
                          onSave={[Function]}
                          permission={
                            Object {
                              "acl": Object {
                                "append": true,
                                "control": true,
                                "read": true,
                                "write": true,
                              },
                              "alias": "Full Control",
                              "profile": Object {
                                "webId": "webId",
                              },
                              "webId": "webId",
                            }
                          }
                          warnOnSubmit={true}
                        >
                          <div
                            className="PodBrowser-container"
                          >
                            <WithStyles(ForwardRef(Button))
                              className="PodBrowser-summary"
                              endIcon={<Memo(KeyboardArrowDownIcon) />}
                              onClick={[Function]}
                            >
                              <ForwardRef(Button)
                                className="PodBrowser-summary"
                                classes={
                                  Object {
                                    "colorInherit": "PodBrowser-colorInherit",
                                    "contained": "PodBrowser-contained",
                                    "containedPrimary": "PodBrowser-containedPrimary",
                                    "containedSecondary": "PodBrowser-containedSecondary",
                                    "containedSizeLarge": "PodBrowser-containedSizeLarge",
                                    "containedSizeSmall": "PodBrowser-containedSizeSmall",
                                    "disableElevation": "PodBrowser-disableElevation",
                                    "disabled": "PodBrowser-disabled",
                                    "endIcon": "PodBrowser-endIcon",
                                    "focusVisible": "PodBrowser-focusVisible",
                                    "fullWidth": "PodBrowser-fullWidth",
                                    "iconSizeLarge": "PodBrowser-iconSizeLarge",
                                    "iconSizeMedium": "PodBrowser-iconSizeMedium",
                                    "iconSizeSmall": "PodBrowser-iconSizeSmall",
                                    "label": "PodBrowser-label",
                                    "outlined": "PodBrowser-outlined",
                                    "outlinedPrimary": "PodBrowser-outlinedPrimary",
                                    "outlinedSecondary": "PodBrowser-outlinedSecondary",
                                    "outlinedSizeLarge": "PodBrowser-outlinedSizeLarge",
                                    "outlinedSizeSmall": "PodBrowser-outlinedSizeSmall",
                                    "root": "PodBrowser-root",
                                    "sizeLarge": "PodBrowser-sizeLarge",
                                    "sizeSmall": "PodBrowser-sizeSmall",
                                    "startIcon": "PodBrowser-startIcon",
                                    "text": "PodBrowser-text",
                                    "textPrimary": "PodBrowser-textPrimary",
                                    "textSecondary": "PodBrowser-textSecondary",
                                    "textSizeLarge": "PodBrowser-textSizeLarge",
                                    "textSizeSmall": "PodBrowser-textSizeSmall",
                                  }
                                }
                                endIcon={<Memo(KeyboardArrowDownIcon) />}
                                onClick={[Function]}
                              >
                                <WithStyles(ForwardRef(ButtonBase))
                                  className="PodBrowser-root PodBrowser-text PodBrowser-summary"
                                  component="button"
                                  disabled={false}
                                  focusRipple={true}
                                  focusVisibleClassName="PodBrowser-focusVisible"
                                  onClick={[Function]}
                                  type="button"
                                >
                                  <ForwardRef(ButtonBase)
                                    className="PodBrowser-root PodBrowser-text PodBrowser-summary"
                                    classes={
                                      Object {
                                        "disabled": "PodBrowser-disabled",
                                        "focusVisible": "PodBrowser-focusVisible",
                                        "root": "PodBrowser-root",
                                      }
                                    }
                                    component="button"
                                    disabled={false}
                                    focusRipple={true}
                                    focusVisibleClassName="PodBrowser-focusVisible"
                                    onClick={[Function]}
                                    type="button"
                                  >
                                    <button
                                      className="PodBrowser-root PodBrowser-root PodBrowser-text PodBrowser-summary"
                                      disabled={false}
                                      onBlur={[Function]}
                                      onClick={[Function]}
                                      onDragLeave={[Function]}
                                      onFocus={[Function]}
                                      onKeyDown={[Function]}
                                      onKeyUp={[Function]}
                                      onMouseDown={[Function]}
                                      onMouseLeave={[Function]}
                                      onMouseUp={[Function]}
                                      onTouchEnd={[Function]}
                                      onTouchMove={[Function]}
                                      onTouchStart={[Function]}
                                      tabIndex={0}
                                      type="button"
                                    >
                                      <span
                                        className="PodBrowser-label"
                                      >
                                        <span>
                                          Control
                                        </span>
                                        <span
                                          className="PodBrowser-endIcon PodBrowser-iconSizeMedium"
                                        >
                                          <ForwardRef>
                                            <WithStyles(ForwardRef(SvgIcon))>
                                              <ForwardRef(SvgIcon)
                                                classes={
                                                  Object {
                                                    "colorAction": "PodBrowser-colorAction",
                                                    "colorDisabled": "PodBrowser-colorDisabled",
                                                    "colorError": "PodBrowser-colorError",
                                                    "colorPrimary": "PodBrowser-colorPrimary",
                                                    "colorSecondary": "PodBrowser-colorSecondary",
                                                    "fontSizeInherit": "PodBrowser-fontSizeInherit",
                                                    "fontSizeLarge": "PodBrowser-fontSizeLarge",
                                                    "fontSizeSmall": "PodBrowser-fontSizeSmall",
                                                    "root": "PodBrowser-root",
                                                  }
                                                }
                                              >
                                                <svg
                                                  aria-hidden={true}
                                                  className="PodBrowser-root"
                                                  focusable="false"
                                                  viewBox="0 0 24 24"
                                                >
                                                  <path
                                                    d="M7.41 8.59L12 13.17l4.59-4.58L18 10l-6 6-6-6 1.41-1.41z"
                                                  />
                                                </svg>
                                              </ForwardRef(SvgIcon)>
                                            </WithStyles(ForwardRef(SvgIcon))>
                                          </ForwardRef>
                                        </span>
                                      </span>
                                      <WithStyles(memo)
                                        center={false}
                                      >
                                        <ForwardRef(TouchRipple)
                                          center={false}
                                          classes={
                                            Object {
                                              "child": "PodBrowser-child",
                                              "childLeaving": "PodBrowser-childLeaving",
                                              "childPulsate": "PodBrowser-childPulsate",
                                              "ripple": "PodBrowser-ripple",
                                              "ripplePulsate": "PodBrowser-ripplePulsate",
                                              "rippleVisible": "PodBrowser-rippleVisible",
                                              "root": "PodBrowser-root",
                                            }
                                          }
                                        >
                                          <span
                                            className="PodBrowser-root"
                                          >
                                            <TransitionGroup
                                              childFactory={[Function]}
                                              component={null}
                                              exit={true}
                                            />
                                          </span>
                                        </ForwardRef(TouchRipple)>
                                      </WithStyles(memo)>
                                    </button>
                                  </ForwardRef(ButtonBase)>
                                </WithStyles(ForwardRef(ButtonBase))>
                              </ForwardRef(Button)>
                            </WithStyles(ForwardRef(Button))>
                            <section
                              className="PodBrowser-selectionClosed"
                            >
                              <WithStyles(ForwardRef(List))>
                                <ForwardRef(List)
                                  classes={
                                    Object {
                                      "dense": "PodBrowser-dense",
                                      "padding": "PodBrowser-padding",
                                      "root": "PodBrowser-root",
                                      "subheader": "PodBrowser-subheader",
                                    }
                                  }
                                >
                                  <ul
                                    className="PodBrowser-root PodBrowser-padding"
                                  >
                                    <PermissionCheckbox
                                      classes={
                                        Object {
                                          "checkbox": "PodBrowser-checkbox",
                                          "container": "PodBrowser-container",
                                          "label": "PodBrowser-label",
                                          "listItem": "PodBrowser-listItem",
                                          "selectionClosed": "PodBrowser-selectionClosed",
                                          "selectionOpen": "PodBrowser-selectionOpen",
                                          "summary": "PodBrowser-summary",
                                        }
                                      }
                                      label="View"
                                      onChange={[Function]}
                                      value={true}
                                    >
                                      <WithStyles(ForwardRef(ListItem))
                                        className="PodBrowser-listItem"
                                      >
                                        <ForwardRef(ListItem)
                                          className="PodBrowser-listItem"
                                          classes={
                                            Object {
                                              "alignItemsFlexStart": "PodBrowser-alignItemsFlexStart",
                                              "button": "PodBrowser-button",
                                              "container": "PodBrowser-container",
                                              "dense": "PodBrowser-dense",
                                              "disabled": "PodBrowser-disabled",
                                              "divider": "PodBrowser-divider",
                                              "focusVisible": "PodBrowser-focusVisible",
                                              "gutters": "PodBrowser-gutters",
                                              "root": "PodBrowser-root",
                                              "secondaryAction": "PodBrowser-secondaryAction",
                                              "selected": "PodBrowser-selected",
                                            }
                                          }
                                        >
                                          <li
                                            className="PodBrowser-root PodBrowser-listItem PodBrowser-gutters"
                                            disabled={false}
                                          >
                                            <WithStyles(ForwardRef(FormControlLabel))
                                              classes={
                                                Object {
                                                  "label": "PodBrowser-label",
                                                }
                                              }
                                              control={
                                                <WithStyles(ForwardRef(Checkbox))
                                                  checked={true}
                                                  classes={
                                                    Object {
                                                      "root": "PodBrowser-checkbox",
                                                    }
                                                  }
                                                  name="view"
                                                  onChange={[Function]}
                                                />
                                              }
                                              key=".0"
                                              label="View"
                                            >
                                              <ForwardRef(FormControlLabel)
                                                classes={
                                                  Object {
                                                    "disabled": "PodBrowser-disabled",
                                                    "label": "PodBrowser-label PodBrowser-label",
                                                    "labelPlacementBottom": "PodBrowser-labelPlacementBottom",
                                                    "labelPlacementStart": "PodBrowser-labelPlacementStart",
                                                    "labelPlacementTop": "PodBrowser-labelPlacementTop",
                                                    "root": "PodBrowser-root",
                                                  }
                                                }
                                                control={
                                                  <WithStyles(ForwardRef(Checkbox))
                                                    checked={true}
                                                    classes={
                                                      Object {
                                                        "root": "PodBrowser-checkbox",
                                                      }
                                                    }
                                                    name="view"
                                                    onChange={[Function]}
                                                  />
                                                }
                                                label="View"
                                              >
                                                <label
                                                  className="PodBrowser-root"
                                                >
                                                  <WithStyles(ForwardRef(Checkbox))
                                                    checked={true}
                                                    classes={
                                                      Object {
                                                        "root": "PodBrowser-checkbox",
                                                      }
                                                    }
                                                    name="view"
                                                    onChange={[Function]}
                                                  >
                                                    <ForwardRef(Checkbox)
                                                      checked={true}
                                                      classes={
                                                        Object {
                                                          "checked": "PodBrowser-checked",
                                                          "colorPrimary": "PodBrowser-colorPrimary",
                                                          "colorSecondary": "PodBrowser-colorSecondary",
                                                          "disabled": "PodBrowser-disabled",
                                                          "indeterminate": "PodBrowser-indeterminate",
                                                          "root": "PodBrowser-root PodBrowser-checkbox",
                                                        }
                                                      }
                                                      name="view"
                                                      onChange={[Function]}
                                                    >
                                                      <WithStyles(ForwardRef(SwitchBase))
                                                        checked={true}
                                                        checkedIcon={<Memo />}
                                                        classes={
                                                          Object {
                                                            "checked": "PodBrowser-checked",
                                                            "disabled": "PodBrowser-disabled",
                                                            "root": "PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary",
                                                          }
                                                        }
                                                        color="secondary"
                                                        icon={<Memo />}
                                                        inputProps={
                                                          Object {
                                                            "data-indeterminate": false,
                                                          }
                                                        }
                                                        name="view"
                                                        onChange={[Function]}
                                                        type="checkbox"
                                                      >
                                                        <ForwardRef(SwitchBase)
                                                          checked={true}
                                                          checkedIcon={<Memo />}
                                                          classes={
                                                            Object {
                                                              "checked": "PodBrowser-checked PodBrowser-checked",
                                                              "disabled": "PodBrowser-disabled PodBrowser-disabled",
                                                              "input": "PodBrowser-input",
                                                              "root": "PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary",
                                                            }
                                                          }
                                                          color="secondary"
                                                          icon={<Memo />}
                                                          inputProps={
                                                            Object {
                                                              "data-indeterminate": false,
                                                            }
                                                          }
                                                          name="view"
                                                          onChange={[Function]}
                                                          type="checkbox"
                                                        >
                                                          <WithStyles(ForwardRef(IconButton))
                                                            className="PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary PodBrowser-checked PodBrowser-checked"
                                                            color="secondary"
                                                            component="span"
                                                            onBlur={[Function]}
                                                            onFocus={[Function]}
                                                            tabIndex={null}
                                                          >
                                                            <ForwardRef(IconButton)
                                                              className="PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary PodBrowser-checked PodBrowser-checked"
                                                              classes={
                                                                Object {
                                                                  "colorInherit": "PodBrowser-colorInherit",
                                                                  "colorPrimary": "PodBrowser-colorPrimary",
                                                                  "colorSecondary": "PodBrowser-colorSecondary",
                                                                  "disabled": "PodBrowser-disabled",
                                                                  "edgeEnd": "PodBrowser-edgeEnd",
                                                                  "edgeStart": "PodBrowser-edgeStart",
                                                                  "label": "PodBrowser-label",
                                                                  "root": "PodBrowser-root",
                                                                  "sizeSmall": "PodBrowser-sizeSmall",
                                                                }
                                                              }
                                                              color="secondary"
                                                              component="span"
                                                              onBlur={[Function]}
                                                              onFocus={[Function]}
                                                              tabIndex={null}
                                                            >
                                                              <WithStyles(ForwardRef(ButtonBase))
                                                                centerRipple={true}
                                                                className="PodBrowser-root PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary PodBrowser-checked PodBrowser-checked PodBrowser-colorSecondary"
                                                                component="span"
                                                                disabled={false}
                                                                focusRipple={true}
                                                                onBlur={[Function]}
                                                                onFocus={[Function]}
                                                                tabIndex={null}
                                                              >
                                                                <ForwardRef(ButtonBase)
                                                                  centerRipple={true}
                                                                  className="PodBrowser-root PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary PodBrowser-checked PodBrowser-checked PodBrowser-colorSecondary"
                                                                  classes={
                                                                    Object {
                                                                      "disabled": "PodBrowser-disabled",
                                                                      "focusVisible": "PodBrowser-focusVisible",
                                                                      "root": "PodBrowser-root",
                                                                    }
                                                                  }
                                                                  component="span"
                                                                  disabled={false}
                                                                  focusRipple={true}
                                                                  onBlur={[Function]}
                                                                  onFocus={[Function]}
                                                                  tabIndex={null}
                                                                >
                                                                  <span
                                                                    aria-disabled={false}
                                                                    className="PodBrowser-root PodBrowser-root PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary PodBrowser-checked PodBrowser-checked PodBrowser-colorSecondary"
                                                                    onBlur={[Function]}
                                                                    onDragLeave={[Function]}
                                                                    onFocus={[Function]}
                                                                    onKeyDown={[Function]}
                                                                    onKeyUp={[Function]}
                                                                    onMouseDown={[Function]}
                                                                    onMouseLeave={[Function]}
                                                                    onMouseUp={[Function]}
                                                                    onTouchEnd={[Function]}
                                                                    onTouchMove={[Function]}
                                                                    onTouchStart={[Function]}
                                                                    tabIndex={null}
                                                                  >
                                                                    <span
                                                                      className="PodBrowser-label"
                                                                    >
                                                                      <input
                                                                        checked={true}
                                                                        className="PodBrowser-input"
                                                                        data-indeterminate={false}
                                                                        name="view"
                                                                        onChange={[Function]}
                                                                        type="checkbox"
                                                                      />
                                                                      <ForwardRef(CheckBoxIcon)>
                                                                        <WithStyles(ForwardRef(SvgIcon))>
                                                                          <ForwardRef(SvgIcon)
                                                                            classes={
                                                                              Object {
                                                                                "colorAction": "PodBrowser-colorAction",
                                                                                "colorDisabled": "PodBrowser-colorDisabled",
                                                                                "colorError": "PodBrowser-colorError",
                                                                                "colorPrimary": "PodBrowser-colorPrimary",
                                                                                "colorSecondary": "PodBrowser-colorSecondary",
                                                                                "fontSizeInherit": "PodBrowser-fontSizeInherit",
                                                                                "fontSizeLarge": "PodBrowser-fontSizeLarge",
                                                                                "fontSizeSmall": "PodBrowser-fontSizeSmall",
                                                                                "root": "PodBrowser-root",
                                                                              }
                                                                            }
                                                                          >
                                                                            <svg
                                                                              aria-hidden={true}
                                                                              className="PodBrowser-root"
                                                                              focusable="false"
                                                                              viewBox="0 0 24 24"
                                                                            >
                                                                              <path
                                                                                d="M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"
                                                                              />
                                                                            </svg>
                                                                          </ForwardRef(SvgIcon)>
                                                                        </WithStyles(ForwardRef(SvgIcon))>
                                                                      </ForwardRef(CheckBoxIcon)>
                                                                    </span>
                                                                    <WithStyles(memo)
                                                                      center={true}
                                                                    >
                                                                      <ForwardRef(TouchRipple)
                                                                        center={true}
                                                                        classes={
                                                                          Object {
                                                                            "child": "PodBrowser-child",
                                                                            "childLeaving": "PodBrowser-childLeaving",
                                                                            "childPulsate": "PodBrowser-childPulsate",
                                                                            "ripple": "PodBrowser-ripple",
                                                                            "ripplePulsate": "PodBrowser-ripplePulsate",
                                                                            "rippleVisible": "PodBrowser-rippleVisible",
                                                                            "root": "PodBrowser-root",
                                                                          }
                                                                        }
                                                                      >
                                                                        <span
                                                                          className="PodBrowser-root"
                                                                        >
                                                                          <TransitionGroup
                                                                            childFactory={[Function]}
                                                                            component={null}
                                                                            exit={true}
                                                                          />
                                                                        </span>
                                                                      </ForwardRef(TouchRipple)>
                                                                    </WithStyles(memo)>
                                                                  </span>
                                                                </ForwardRef(ButtonBase)>
                                                              </WithStyles(ForwardRef(ButtonBase))>
                                                            </ForwardRef(IconButton)>
                                                          </WithStyles(ForwardRef(IconButton))>
                                                        </ForwardRef(SwitchBase)>
                                                      </WithStyles(ForwardRef(SwitchBase))>
                                                    </ForwardRef(Checkbox)>
                                                  </WithStyles(ForwardRef(Checkbox))>
                                                  <WithStyles(ForwardRef(Typography))
                                                    className="PodBrowser-label PodBrowser-label"
                                                    component="span"
                                                  >
                                                    <ForwardRef(Typography)
                                                      className="PodBrowser-label PodBrowser-label"
                                                      classes={
                                                        Object {
                                                          "alignCenter": "PodBrowser-alignCenter",
                                                          "alignJustify": "PodBrowser-alignJustify",
                                                          "alignLeft": "PodBrowser-alignLeft",
                                                          "alignRight": "PodBrowser-alignRight",
                                                          "body1": "PodBrowser-body1",
                                                          "body2": "PodBrowser-body2",
                                                          "button": "PodBrowser-button",
                                                          "caption": "PodBrowser-caption",
                                                          "colorError": "PodBrowser-colorError",
                                                          "colorInherit": "PodBrowser-colorInherit",
                                                          "colorPrimary": "PodBrowser-colorPrimary",
                                                          "colorSecondary": "PodBrowser-colorSecondary",
                                                          "colorTextPrimary": "PodBrowser-colorTextPrimary",
                                                          "colorTextSecondary": "PodBrowser-colorTextSecondary",
                                                          "displayBlock": "PodBrowser-displayBlock",
                                                          "displayInline": "PodBrowser-displayInline",
                                                          "gutterBottom": "PodBrowser-gutterBottom",
                                                          "h1": "PodBrowser-h1",
                                                          "h2": "PodBrowser-h2",
                                                          "h3": "PodBrowser-h3",
                                                          "h4": "PodBrowser-h4",
                                                          "h5": "PodBrowser-h5",
                                                          "h6": "PodBrowser-h6",
                                                          "noWrap": "PodBrowser-noWrap",
                                                          "overline": "PodBrowser-overline",
                                                          "paragraph": "PodBrowser-paragraph",
                                                          "root": "PodBrowser-root",
                                                          "srOnly": "PodBrowser-srOnly",
                                                          "subtitle1": "PodBrowser-subtitle1",
                                                          "subtitle2": "PodBrowser-subtitle2",
                                                        }
                                                      }
                                                      component="span"
                                                    >
                                                      <span
                                                        className="PodBrowser-root PodBrowser-label PodBrowser-label PodBrowser-body1"
                                                      >
                                                        View
                                                      </span>
                                                    </ForwardRef(Typography)>
                                                  </WithStyles(ForwardRef(Typography))>
                                                </label>
                                              </ForwardRef(FormControlLabel)>
                                            </WithStyles(ForwardRef(FormControlLabel))>
                                          </li>
                                        </ForwardRef(ListItem)>
                                      </WithStyles(ForwardRef(ListItem))>
                                    </PermissionCheckbox>
                                    <PermissionCheckbox
                                      classes={
                                        Object {
                                          "checkbox": "PodBrowser-checkbox",
                                          "container": "PodBrowser-container",
                                          "label": "PodBrowser-label",
                                          "listItem": "PodBrowser-listItem",
                                          "selectionClosed": "PodBrowser-selectionClosed",
                                          "selectionOpen": "PodBrowser-selectionOpen",
                                          "summary": "PodBrowser-summary",
                                        }
                                      }
                                      label="Edit"
                                      onChange={[Function]}
                                      value={true}
                                    >
                                      <WithStyles(ForwardRef(ListItem))
                                        className="PodBrowser-listItem"
                                      >
                                        <ForwardRef(ListItem)
                                          className="PodBrowser-listItem"
                                          classes={
                                            Object {
                                              "alignItemsFlexStart": "PodBrowser-alignItemsFlexStart",
                                              "button": "PodBrowser-button",
                                              "container": "PodBrowser-container",
                                              "dense": "PodBrowser-dense",
                                              "disabled": "PodBrowser-disabled",
                                              "divider": "PodBrowser-divider",
                                              "focusVisible": "PodBrowser-focusVisible",
                                              "gutters": "PodBrowser-gutters",
                                              "root": "PodBrowser-root",
                                              "secondaryAction": "PodBrowser-secondaryAction",
                                              "selected": "PodBrowser-selected",
                                            }
                                          }
                                        >
                                          <li
                                            className="PodBrowser-root PodBrowser-listItem PodBrowser-gutters"
                                            disabled={false}
                                          >
                                            <WithStyles(ForwardRef(FormControlLabel))
                                              classes={
                                                Object {
                                                  "label": "PodBrowser-label",
                                                }
                                              }
                                              control={
                                                <WithStyles(ForwardRef(Checkbox))
                                                  checked={true}
                                                  classes={
                                                    Object {
                                                      "root": "PodBrowser-checkbox",
                                                    }
                                                  }
                                                  name="edit"
                                                  onChange={[Function]}
                                                />
                                              }
                                              key=".0"
                                              label="Edit"
                                            >
                                              <ForwardRef(FormControlLabel)
                                                classes={
                                                  Object {
                                                    "disabled": "PodBrowser-disabled",
                                                    "label": "PodBrowser-label PodBrowser-label",
                                                    "labelPlacementBottom": "PodBrowser-labelPlacementBottom",
                                                    "labelPlacementStart": "PodBrowser-labelPlacementStart",
                                                    "labelPlacementTop": "PodBrowser-labelPlacementTop",
                                                    "root": "PodBrowser-root",
                                                  }
                                                }
                                                control={
                                                  <WithStyles(ForwardRef(Checkbox))
                                                    checked={true}
                                                    classes={
                                                      Object {
                                                        "root": "PodBrowser-checkbox",
                                                      }
                                                    }
                                                    name="edit"
                                                    onChange={[Function]}
                                                  />
                                                }
                                                label="Edit"
                                              >
                                                <label
                                                  className="PodBrowser-root"
                                                >
                                                  <WithStyles(ForwardRef(Checkbox))
                                                    checked={true}
                                                    classes={
                                                      Object {
                                                        "root": "PodBrowser-checkbox",
                                                      }
                                                    }
                                                    name="edit"
                                                    onChange={[Function]}
                                                  >
                                                    <ForwardRef(Checkbox)
                                                      checked={true}
                                                      classes={
                                                        Object {
                                                          "checked": "PodBrowser-checked",
                                                          "colorPrimary": "PodBrowser-colorPrimary",
                                                          "colorSecondary": "PodBrowser-colorSecondary",
                                                          "disabled": "PodBrowser-disabled",
                                                          "indeterminate": "PodBrowser-indeterminate",
                                                          "root": "PodBrowser-root PodBrowser-checkbox",
                                                        }
                                                      }
                                                      name="edit"
                                                      onChange={[Function]}
                                                    >
                                                      <WithStyles(ForwardRef(SwitchBase))
                                                        checked={true}
                                                        checkedIcon={<Memo />}
                                                        classes={
                                                          Object {
                                                            "checked": "PodBrowser-checked",
                                                            "disabled": "PodBrowser-disabled",
                                                            "root": "PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary",
                                                          }
                                                        }
                                                        color="secondary"
                                                        icon={<Memo />}
                                                        inputProps={
                                                          Object {
                                                            "data-indeterminate": false,
                                                          }
                                                        }
                                                        name="edit"
                                                        onChange={[Function]}
                                                        type="checkbox"
                                                      >
                                                        <ForwardRef(SwitchBase)
                                                          checked={true}
                                                          checkedIcon={<Memo />}
                                                          classes={
                                                            Object {
                                                              "checked": "PodBrowser-checked PodBrowser-checked",
                                                              "disabled": "PodBrowser-disabled PodBrowser-disabled",
                                                              "input": "PodBrowser-input",
                                                              "root": "PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary",
                                                            }
                                                          }
                                                          color="secondary"
                                                          icon={<Memo />}
                                                          inputProps={
                                                            Object {
                                                              "data-indeterminate": false,
                                                            }
                                                          }
                                                          name="edit"
                                                          onChange={[Function]}
                                                          type="checkbox"
                                                        >
                                                          <WithStyles(ForwardRef(IconButton))
                                                            className="PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary PodBrowser-checked PodBrowser-checked"
                                                            color="secondary"
                                                            component="span"
                                                            onBlur={[Function]}
                                                            onFocus={[Function]}
                                                            tabIndex={null}
                                                          >
                                                            <ForwardRef(IconButton)
                                                              className="PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary PodBrowser-checked PodBrowser-checked"
                                                              classes={
                                                                Object {
                                                                  "colorInherit": "PodBrowser-colorInherit",
                                                                  "colorPrimary": "PodBrowser-colorPrimary",
                                                                  "colorSecondary": "PodBrowser-colorSecondary",
                                                                  "disabled": "PodBrowser-disabled",
                                                                  "edgeEnd": "PodBrowser-edgeEnd",
                                                                  "edgeStart": "PodBrowser-edgeStart",
                                                                  "label": "PodBrowser-label",
                                                                  "root": "PodBrowser-root",
                                                                  "sizeSmall": "PodBrowser-sizeSmall",
                                                                }
                                                              }
                                                              color="secondary"
                                                              component="span"
                                                              onBlur={[Function]}
                                                              onFocus={[Function]}
                                                              tabIndex={null}
                                                            >
                                                              <WithStyles(ForwardRef(ButtonBase))
                                                                centerRipple={true}
                                                                className="PodBrowser-root PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary PodBrowser-checked PodBrowser-checked PodBrowser-colorSecondary"
                                                                component="span"
                                                                disabled={false}
                                                                focusRipple={true}
                                                                onBlur={[Function]}
                                                                onFocus={[Function]}
                                                                tabIndex={null}
                                                              >
                                                                <ForwardRef(ButtonBase)
                                                                  centerRipple={true}
                                                                  className="PodBrowser-root PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary PodBrowser-checked PodBrowser-checked PodBrowser-colorSecondary"
                                                                  classes={
                                                                    Object {
                                                                      "disabled": "PodBrowser-disabled",
                                                                      "focusVisible": "PodBrowser-focusVisible",
                                                                      "root": "PodBrowser-root",
                                                                    }
                                                                  }
                                                                  component="span"
                                                                  disabled={false}
                                                                  focusRipple={true}
                                                                  onBlur={[Function]}
                                                                  onFocus={[Function]}
                                                                  tabIndex={null}
                                                                >
                                                                  <span
                                                                    aria-disabled={false}
                                                                    className="PodBrowser-root PodBrowser-root PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary PodBrowser-checked PodBrowser-checked PodBrowser-colorSecondary"
                                                                    onBlur={[Function]}
                                                                    onDragLeave={[Function]}
                                                                    onFocus={[Function]}
                                                                    onKeyDown={[Function]}
                                                                    onKeyUp={[Function]}
                                                                    onMouseDown={[Function]}
                                                                    onMouseLeave={[Function]}
                                                                    onMouseUp={[Function]}
                                                                    onTouchEnd={[Function]}
                                                                    onTouchMove={[Function]}
                                                                    onTouchStart={[Function]}
                                                                    tabIndex={null}
                                                                  >
                                                                    <span
                                                                      className="PodBrowser-label"
                                                                    >
                                                                      <input
                                                                        checked={true}
                                                                        className="PodBrowser-input"
                                                                        data-indeterminate={false}
                                                                        name="edit"
                                                                        onChange={[Function]}
                                                                        type="checkbox"
                                                                      />
                                                                      <ForwardRef(CheckBoxIcon)>
                                                                        <WithStyles(ForwardRef(SvgIcon))>
                                                                          <ForwardRef(SvgIcon)
                                                                            classes={
                                                                              Object {
                                                                                "colorAction": "PodBrowser-colorAction",
                                                                                "colorDisabled": "PodBrowser-colorDisabled",
                                                                                "colorError": "PodBrowser-colorError",
                                                                                "colorPrimary": "PodBrowser-colorPrimary",
                                                                                "colorSecondary": "PodBrowser-colorSecondary",
                                                                                "fontSizeInherit": "PodBrowser-fontSizeInherit",
                                                                                "fontSizeLarge": "PodBrowser-fontSizeLarge",
                                                                                "fontSizeSmall": "PodBrowser-fontSizeSmall",
                                                                                "root": "PodBrowser-root",
                                                                              }
                                                                            }
                                                                          >
                                                                            <svg
                                                                              aria-hidden={true}
                                                                              className="PodBrowser-root"
                                                                              focusable="false"
                                                                              viewBox="0 0 24 24"
                                                                            >
                                                                              <path
                                                                                d="M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"
                                                                              />
                                                                            </svg>
                                                                          </ForwardRef(SvgIcon)>
                                                                        </WithStyles(ForwardRef(SvgIcon))>
                                                                      </ForwardRef(CheckBoxIcon)>
                                                                    </span>
                                                                    <WithStyles(memo)
                                                                      center={true}
                                                                    >
                                                                      <ForwardRef(TouchRipple)
                                                                        center={true}
                                                                        classes={
                                                                          Object {
                                                                            "child": "PodBrowser-child",
                                                                            "childLeaving": "PodBrowser-childLeaving",
                                                                            "childPulsate": "PodBrowser-childPulsate",
                                                                            "ripple": "PodBrowser-ripple",
                                                                            "ripplePulsate": "PodBrowser-ripplePulsate",
                                                                            "rippleVisible": "PodBrowser-rippleVisible",
                                                                            "root": "PodBrowser-root",
                                                                          }
                                                                        }
                                                                      >
                                                                        <span
                                                                          className="PodBrowser-root"
                                                                        >
                                                                          <TransitionGroup
                                                                            childFactory={[Function]}
                                                                            component={null}
                                                                            exit={true}
                                                                          />
                                                                        </span>
                                                                      </ForwardRef(TouchRipple)>
                                                                    </WithStyles(memo)>
                                                                  </span>
                                                                </ForwardRef(ButtonBase)>
                                                              </WithStyles(ForwardRef(ButtonBase))>
                                                            </ForwardRef(IconButton)>
                                                          </WithStyles(ForwardRef(IconButton))>
                                                        </ForwardRef(SwitchBase)>
                                                      </WithStyles(ForwardRef(SwitchBase))>
                                                    </ForwardRef(Checkbox)>
                                                  </WithStyles(ForwardRef(Checkbox))>
                                                  <WithStyles(ForwardRef(Typography))
                                                    className="PodBrowser-label PodBrowser-label"
                                                    component="span"
                                                  >
                                                    <ForwardRef(Typography)
                                                      className="PodBrowser-label PodBrowser-label"
                                                      classes={
                                                        Object {
                                                          "alignCenter": "PodBrowser-alignCenter",
                                                          "alignJustify": "PodBrowser-alignJustify",
                                                          "alignLeft": "PodBrowser-alignLeft",
                                                          "alignRight": "PodBrowser-alignRight",
                                                          "body1": "PodBrowser-body1",
                                                          "body2": "PodBrowser-body2",
                                                          "button": "PodBrowser-button",
                                                          "caption": "PodBrowser-caption",
                                                          "colorError": "PodBrowser-colorError",
                                                          "colorInherit": "PodBrowser-colorInherit",
                                                          "colorPrimary": "PodBrowser-colorPrimary",
                                                          "colorSecondary": "PodBrowser-colorSecondary",
                                                          "colorTextPrimary": "PodBrowser-colorTextPrimary",
                                                          "colorTextSecondary": "PodBrowser-colorTextSecondary",
                                                          "displayBlock": "PodBrowser-displayBlock",
                                                          "displayInline": "PodBrowser-displayInline",
                                                          "gutterBottom": "PodBrowser-gutterBottom",
                                                          "h1": "PodBrowser-h1",
                                                          "h2": "PodBrowser-h2",
                                                          "h3": "PodBrowser-h3",
                                                          "h4": "PodBrowser-h4",
                                                          "h5": "PodBrowser-h5",
                                                          "h6": "PodBrowser-h6",
                                                          "noWrap": "PodBrowser-noWrap",
                                                          "overline": "PodBrowser-overline",
                                                          "paragraph": "PodBrowser-paragraph",
                                                          "root": "PodBrowser-root",
                                                          "srOnly": "PodBrowser-srOnly",
                                                          "subtitle1": "PodBrowser-subtitle1",
                                                          "subtitle2": "PodBrowser-subtitle2",
                                                        }
                                                      }
                                                      component="span"
                                                    >
                                                      <span
                                                        className="PodBrowser-root PodBrowser-label PodBrowser-label PodBrowser-body1"
                                                      >
                                                        Edit
                                                      </span>
                                                    </ForwardRef(Typography)>
                                                  </WithStyles(ForwardRef(Typography))>
                                                </label>
                                              </ForwardRef(FormControlLabel)>
                                            </WithStyles(ForwardRef(FormControlLabel))>
                                          </li>
                                        </ForwardRef(ListItem)>
                                      </WithStyles(ForwardRef(ListItem))>
                                    </PermissionCheckbox>
                                    <PermissionCheckbox
                                      classes={
                                        Object {
                                          "checkbox": "PodBrowser-checkbox",
                                          "container": "PodBrowser-container",
                                          "label": "PodBrowser-label",
                                          "listItem": "PodBrowser-listItem",
                                          "selectionClosed": "PodBrowser-selectionClosed",
                                          "selectionOpen": "PodBrowser-selectionOpen",
                                          "summary": "PodBrowser-summary",
                                        }
                                      }
                                      label="Append"
                                      onChange={[Function]}
                                      value={true}
                                    >
                                      <WithStyles(ForwardRef(ListItem))
                                        className="PodBrowser-listItem"
                                      >
                                        <ForwardRef(ListItem)
                                          className="PodBrowser-listItem"
                                          classes={
                                            Object {
                                              "alignItemsFlexStart": "PodBrowser-alignItemsFlexStart",
                                              "button": "PodBrowser-button",
                                              "container": "PodBrowser-container",
                                              "dense": "PodBrowser-dense",
                                              "disabled": "PodBrowser-disabled",
                                              "divider": "PodBrowser-divider",
                                              "focusVisible": "PodBrowser-focusVisible",
                                              "gutters": "PodBrowser-gutters",
                                              "root": "PodBrowser-root",
                                              "secondaryAction": "PodBrowser-secondaryAction",
                                              "selected": "PodBrowser-selected",
                                            }
                                          }
                                        >
                                          <li
                                            className="PodBrowser-root PodBrowser-listItem PodBrowser-gutters"
                                            disabled={false}
                                          >
                                            <WithStyles(ForwardRef(FormControlLabel))
                                              classes={
                                                Object {
                                                  "label": "PodBrowser-label",
                                                }
                                              }
                                              control={
                                                <WithStyles(ForwardRef(Checkbox))
                                                  checked={true}
                                                  classes={
                                                    Object {
                                                      "root": "PodBrowser-checkbox",
                                                    }
                                                  }
                                                  name="append"
                                                  onChange={[Function]}
                                                />
                                              }
                                              key=".0"
                                              label="Append"
                                            >
                                              <ForwardRef(FormControlLabel)
                                                classes={
                                                  Object {
                                                    "disabled": "PodBrowser-disabled",
                                                    "label": "PodBrowser-label PodBrowser-label",
                                                    "labelPlacementBottom": "PodBrowser-labelPlacementBottom",
                                                    "labelPlacementStart": "PodBrowser-labelPlacementStart",
                                                    "labelPlacementTop": "PodBrowser-labelPlacementTop",
                                                    "root": "PodBrowser-root",
                                                  }
                                                }
                                                control={
                                                  <WithStyles(ForwardRef(Checkbox))
                                                    checked={true}
                                                    classes={
                                                      Object {
                                                        "root": "PodBrowser-checkbox",
                                                      }
                                                    }
                                                    name="append"
                                                    onChange={[Function]}
                                                  />
                                                }
                                                label="Append"
                                              >
                                                <label
                                                  className="PodBrowser-root"
                                                >
                                                  <WithStyles(ForwardRef(Checkbox))
                                                    checked={true}
                                                    classes={
                                                      Object {
                                                        "root": "PodBrowser-checkbox",
                                                      }
                                                    }
                                                    name="append"
                                                    onChange={[Function]}
                                                  >
                                                    <ForwardRef(Checkbox)
                                                      checked={true}
                                                      classes={
                                                        Object {
                                                          "checked": "PodBrowser-checked",
                                                          "colorPrimary": "PodBrowser-colorPrimary",
                                                          "colorSecondary": "PodBrowser-colorSecondary",
                                                          "disabled": "PodBrowser-disabled",
                                                          "indeterminate": "PodBrowser-indeterminate",
                                                          "root": "PodBrowser-root PodBrowser-checkbox",
                                                        }
                                                      }
                                                      name="append"
                                                      onChange={[Function]}
                                                    >
                                                      <WithStyles(ForwardRef(SwitchBase))
                                                        checked={true}
                                                        checkedIcon={<Memo />}
                                                        classes={
                                                          Object {
                                                            "checked": "PodBrowser-checked",
                                                            "disabled": "PodBrowser-disabled",
                                                            "root": "PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary",
                                                          }
                                                        }
                                                        color="secondary"
                                                        icon={<Memo />}
                                                        inputProps={
                                                          Object {
                                                            "data-indeterminate": false,
                                                          }
                                                        }
                                                        name="append"
                                                        onChange={[Function]}
                                                        type="checkbox"
                                                      >
                                                        <ForwardRef(SwitchBase)
                                                          checked={true}
                                                          checkedIcon={<Memo />}
                                                          classes={
                                                            Object {
                                                              "checked": "PodBrowser-checked PodBrowser-checked",
                                                              "disabled": "PodBrowser-disabled PodBrowser-disabled",
                                                              "input": "PodBrowser-input",
                                                              "root": "PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary",
                                                            }
                                                          }
                                                          color="secondary"
                                                          icon={<Memo />}
                                                          inputProps={
                                                            Object {
                                                              "data-indeterminate": false,
                                                            }
                                                          }
                                                          name="append"
                                                          onChange={[Function]}
                                                          type="checkbox"
                                                        >
                                                          <WithStyles(ForwardRef(IconButton))
                                                            className="PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary PodBrowser-checked PodBrowser-checked"
                                                            color="secondary"
                                                            component="span"
                                                            onBlur={[Function]}
                                                            onFocus={[Function]}
                                                            tabIndex={null}
                                                          >
                                                            <ForwardRef(IconButton)
                                                              className="PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary PodBrowser-checked PodBrowser-checked"
                                                              classes={
                                                                Object {
                                                                  "colorInherit": "PodBrowser-colorInherit",
                                                                  "colorPrimary": "PodBrowser-colorPrimary",
                                                                  "colorSecondary": "PodBrowser-colorSecondary",
                                                                  "disabled": "PodBrowser-disabled",
                                                                  "edgeEnd": "PodBrowser-edgeEnd",
                                                                  "edgeStart": "PodBrowser-edgeStart",
                                                                  "label": "PodBrowser-label",
                                                                  "root": "PodBrowser-root",
                                                                  "sizeSmall": "PodBrowser-sizeSmall",
                                                                }
                                                              }
                                                              color="secondary"
                                                              component="span"
                                                              onBlur={[Function]}
                                                              onFocus={[Function]}
                                                              tabIndex={null}
                                                            >
                                                              <WithStyles(ForwardRef(ButtonBase))
                                                                centerRipple={true}
                                                                className="PodBrowser-root PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary PodBrowser-checked PodBrowser-checked PodBrowser-colorSecondary"
                                                                component="span"
                                                                disabled={false}
                                                                focusRipple={true}
                                                                onBlur={[Function]}
                                                                onFocus={[Function]}
                                                                tabIndex={null}
                                                              >
                                                                <ForwardRef(ButtonBase)
                                                                  centerRipple={true}
                                                                  className="PodBrowser-root PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary PodBrowser-checked PodBrowser-checked PodBrowser-colorSecondary"
                                                                  classes={
                                                                    Object {
                                                                      "disabled": "PodBrowser-disabled",
                                                                      "focusVisible": "PodBrowser-focusVisible",
                                                                      "root": "PodBrowser-root",
                                                                    }
                                                                  }
                                                                  component="span"
                                                                  disabled={false}
                                                                  focusRipple={true}
                                                                  onBlur={[Function]}
                                                                  onFocus={[Function]}
                                                                  tabIndex={null}
                                                                >
                                                                  <span
                                                                    aria-disabled={false}
                                                                    className="PodBrowser-root PodBrowser-root PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary PodBrowser-checked PodBrowser-checked PodBrowser-colorSecondary"
                                                                    onBlur={[Function]}
                                                                    onDragLeave={[Function]}
                                                                    onFocus={[Function]}
                                                                    onKeyDown={[Function]}
                                                                    onKeyUp={[Function]}
                                                                    onMouseDown={[Function]}
                                                                    onMouseLeave={[Function]}
                                                                    onMouseUp={[Function]}
                                                                    onTouchEnd={[Function]}
                                                                    onTouchMove={[Function]}
                                                                    onTouchStart={[Function]}
                                                                    tabIndex={null}
                                                                  >
                                                                    <span
                                                                      className="PodBrowser-label"
                                                                    >
                                                                      <input
                                                                        checked={true}
                                                                        className="PodBrowser-input"
                                                                        data-indeterminate={false}
                                                                        name="append"
                                                                        onChange={[Function]}
                                                                        type="checkbox"
                                                                      />
                                                                      <ForwardRef(CheckBoxIcon)>
                                                                        <WithStyles(ForwardRef(SvgIcon))>
                                                                          <ForwardRef(SvgIcon)
                                                                            classes={
                                                                              Object {
                                                                                "colorAction": "PodBrowser-colorAction",
                                                                                "colorDisabled": "PodBrowser-colorDisabled",
                                                                                "colorError": "PodBrowser-colorError",
                                                                                "colorPrimary": "PodBrowser-colorPrimary",
                                                                                "colorSecondary": "PodBrowser-colorSecondary",
                                                                                "fontSizeInherit": "PodBrowser-fontSizeInherit",
                                                                                "fontSizeLarge": "PodBrowser-fontSizeLarge",
                                                                                "fontSizeSmall": "PodBrowser-fontSizeSmall",
                                                                                "root": "PodBrowser-root",
                                                                              }
                                                                            }
                                                                          >
                                                                            <svg
                                                                              aria-hidden={true}
                                                                              className="PodBrowser-root"
                                                                              focusable="false"
                                                                              viewBox="0 0 24 24"
                                                                            >
                                                                              <path
                                                                                d="M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"
                                                                              />
                                                                            </svg>
                                                                          </ForwardRef(SvgIcon)>
                                                                        </WithStyles(ForwardRef(SvgIcon))>
                                                                      </ForwardRef(CheckBoxIcon)>
                                                                    </span>
                                                                    <WithStyles(memo)
                                                                      center={true}
                                                                    >
                                                                      <ForwardRef(TouchRipple)
                                                                        center={true}
                                                                        classes={
                                                                          Object {
                                                                            "child": "PodBrowser-child",
                                                                            "childLeaving": "PodBrowser-childLeaving",
                                                                            "childPulsate": "PodBrowser-childPulsate",
                                                                            "ripple": "PodBrowser-ripple",
                                                                            "ripplePulsate": "PodBrowser-ripplePulsate",
                                                                            "rippleVisible": "PodBrowser-rippleVisible",
                                                                            "root": "PodBrowser-root",
                                                                          }
                                                                        }
                                                                      >
                                                                        <span
                                                                          className="PodBrowser-root"
                                                                        >
                                                                          <TransitionGroup
                                                                            childFactory={[Function]}
                                                                            component={null}
                                                                            exit={true}
                                                                          />
                                                                        </span>
                                                                      </ForwardRef(TouchRipple)>
                                                                    </WithStyles(memo)>
                                                                  </span>
                                                                </ForwardRef(ButtonBase)>
                                                              </WithStyles(ForwardRef(ButtonBase))>
                                                            </ForwardRef(IconButton)>
                                                          </WithStyles(ForwardRef(IconButton))>
                                                        </ForwardRef(SwitchBase)>
                                                      </WithStyles(ForwardRef(SwitchBase))>
                                                    </ForwardRef(Checkbox)>
                                                  </WithStyles(ForwardRef(Checkbox))>
                                                  <WithStyles(ForwardRef(Typography))
                                                    className="PodBrowser-label PodBrowser-label"
                                                    component="span"
                                                  >
                                                    <ForwardRef(Typography)
                                                      className="PodBrowser-label PodBrowser-label"
                                                      classes={
                                                        Object {
                                                          "alignCenter": "PodBrowser-alignCenter",
                                                          "alignJustify": "PodBrowser-alignJustify",
                                                          "alignLeft": "PodBrowser-alignLeft",
                                                          "alignRight": "PodBrowser-alignRight",
                                                          "body1": "PodBrowser-body1",
                                                          "body2": "PodBrowser-body2",
                                                          "button": "PodBrowser-button",
                                                          "caption": "PodBrowser-caption",
                                                          "colorError": "PodBrowser-colorError",
                                                          "colorInherit": "PodBrowser-colorInherit",
                                                          "colorPrimary": "PodBrowser-colorPrimary",
                                                          "colorSecondary": "PodBrowser-colorSecondary",
                                                          "colorTextPrimary": "PodBrowser-colorTextPrimary",
                                                          "colorTextSecondary": "PodBrowser-colorTextSecondary",
                                                          "displayBlock": "PodBrowser-displayBlock",
                                                          "displayInline": "PodBrowser-displayInline",
                                                          "gutterBottom": "PodBrowser-gutterBottom",
                                                          "h1": "PodBrowser-h1",
                                                          "h2": "PodBrowser-h2",
                                                          "h3": "PodBrowser-h3",
                                                          "h4": "PodBrowser-h4",
                                                          "h5": "PodBrowser-h5",
                                                          "h6": "PodBrowser-h6",
                                                          "noWrap": "PodBrowser-noWrap",
                                                          "overline": "PodBrowser-overline",
                                                          "paragraph": "PodBrowser-paragraph",
                                                          "root": "PodBrowser-root",
                                                          "srOnly": "PodBrowser-srOnly",
                                                          "subtitle1": "PodBrowser-subtitle1",
                                                          "subtitle2": "PodBrowser-subtitle2",
                                                        }
                                                      }
                                                      component="span"
                                                    >
                                                      <span
                                                        className="PodBrowser-root PodBrowser-label PodBrowser-label PodBrowser-body1"
                                                      >
                                                        Append
                                                      </span>
                                                    </ForwardRef(Typography)>
                                                  </WithStyles(ForwardRef(Typography))>
                                                </label>
                                              </ForwardRef(FormControlLabel)>
                                            </WithStyles(ForwardRef(FormControlLabel))>
                                          </li>
                                        </ForwardRef(ListItem)>
                                      </WithStyles(ForwardRef(ListItem))>
                                    </PermissionCheckbox>
                                    <PermissionCheckbox
                                      classes={
                                        Object {
                                          "checkbox": "PodBrowser-checkbox",
                                          "container": "PodBrowser-container",
                                          "label": "PodBrowser-label",
                                          "listItem": "PodBrowser-listItem",
                                          "selectionClosed": "PodBrowser-selectionClosed",
                                          "selectionOpen": "PodBrowser-selectionOpen",
                                          "summary": "PodBrowser-summary",
                                        }
                                      }
                                      label="Control"
                                      onChange={[Function]}
                                      value={true}
                                    >
                                      <WithStyles(ForwardRef(ListItem))
                                        className="PodBrowser-listItem"
                                      >
                                        <ForwardRef(ListItem)
                                          className="PodBrowser-listItem"
                                          classes={
                                            Object {
                                              "alignItemsFlexStart": "PodBrowser-alignItemsFlexStart",
                                              "button": "PodBrowser-button",
                                              "container": "PodBrowser-container",
                                              "dense": "PodBrowser-dense",
                                              "disabled": "PodBrowser-disabled",
                                              "divider": "PodBrowser-divider",
                                              "focusVisible": "PodBrowser-focusVisible",
                                              "gutters": "PodBrowser-gutters",
                                              "root": "PodBrowser-root",
                                              "secondaryAction": "PodBrowser-secondaryAction",
                                              "selected": "PodBrowser-selected",
                                            }
                                          }
                                        >
                                          <li
                                            className="PodBrowser-root PodBrowser-listItem PodBrowser-gutters"
                                            disabled={false}
                                          >
                                            <WithStyles(ForwardRef(FormControlLabel))
                                              classes={
                                                Object {
                                                  "label": "PodBrowser-label",
                                                }
                                              }
                                              control={
                                                <WithStyles(ForwardRef(Checkbox))
                                                  checked={true}
                                                  classes={
                                                    Object {
                                                      "root": "PodBrowser-checkbox",
                                                    }
                                                  }
                                                  name="control"
                                                  onChange={[Function]}
                                                />
                                              }
                                              key=".0"
                                              label="Control"
                                            >
                                              <ForwardRef(FormControlLabel)
                                                classes={
                                                  Object {
                                                    "disabled": "PodBrowser-disabled",
                                                    "label": "PodBrowser-label PodBrowser-label",
                                                    "labelPlacementBottom": "PodBrowser-labelPlacementBottom",
                                                    "labelPlacementStart": "PodBrowser-labelPlacementStart",
                                                    "labelPlacementTop": "PodBrowser-labelPlacementTop",
                                                    "root": "PodBrowser-root",
                                                  }
                                                }
                                                control={
                                                  <WithStyles(ForwardRef(Checkbox))
                                                    checked={true}
                                                    classes={
                                                      Object {
                                                        "root": "PodBrowser-checkbox",
                                                      }
                                                    }
                                                    name="control"
                                                    onChange={[Function]}
                                                  />
                                                }
                                                label="Control"
                                              >
                                                <label
                                                  className="PodBrowser-root"
                                                >
                                                  <WithStyles(ForwardRef(Checkbox))
                                                    checked={true}
                                                    classes={
                                                      Object {
                                                        "root": "PodBrowser-checkbox",
                                                      }
                                                    }
                                                    name="control"
                                                    onChange={[Function]}
                                                  >
                                                    <ForwardRef(Checkbox)
                                                      checked={true}
                                                      classes={
                                                        Object {
                                                          "checked": "PodBrowser-checked",
                                                          "colorPrimary": "PodBrowser-colorPrimary",
                                                          "colorSecondary": "PodBrowser-colorSecondary",
                                                          "disabled": "PodBrowser-disabled",
                                                          "indeterminate": "PodBrowser-indeterminate",
                                                          "root": "PodBrowser-root PodBrowser-checkbox",
                                                        }
                                                      }
                                                      name="control"
                                                      onChange={[Function]}
                                                    >
                                                      <WithStyles(ForwardRef(SwitchBase))
                                                        checked={true}
                                                        checkedIcon={<Memo />}
                                                        classes={
                                                          Object {
                                                            "checked": "PodBrowser-checked",
                                                            "disabled": "PodBrowser-disabled",
                                                            "root": "PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary",
                                                          }
                                                        }
                                                        color="secondary"
                                                        icon={<Memo />}
                                                        inputProps={
                                                          Object {
                                                            "data-indeterminate": false,
                                                          }
                                                        }
                                                        name="control"
                                                        onChange={[Function]}
                                                        type="checkbox"
                                                      >
                                                        <ForwardRef(SwitchBase)
                                                          checked={true}
                                                          checkedIcon={<Memo />}
                                                          classes={
                                                            Object {
                                                              "checked": "PodBrowser-checked PodBrowser-checked",
                                                              "disabled": "PodBrowser-disabled PodBrowser-disabled",
                                                              "input": "PodBrowser-input",
                                                              "root": "PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary",
                                                            }
                                                          }
                                                          color="secondary"
                                                          icon={<Memo />}
                                                          inputProps={
                                                            Object {
                                                              "data-indeterminate": false,
                                                            }
                                                          }
                                                          name="control"
                                                          onChange={[Function]}
                                                          type="checkbox"
                                                        >
                                                          <WithStyles(ForwardRef(IconButton))
                                                            className="PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary PodBrowser-checked PodBrowser-checked"
                                                            color="secondary"
                                                            component="span"
                                                            onBlur={[Function]}
                                                            onFocus={[Function]}
                                                            tabIndex={null}
                                                          >
                                                            <ForwardRef(IconButton)
                                                              className="PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary PodBrowser-checked PodBrowser-checked"
                                                              classes={
                                                                Object {
                                                                  "colorInherit": "PodBrowser-colorInherit",
                                                                  "colorPrimary": "PodBrowser-colorPrimary",
                                                                  "colorSecondary": "PodBrowser-colorSecondary",
                                                                  "disabled": "PodBrowser-disabled",
                                                                  "edgeEnd": "PodBrowser-edgeEnd",
                                                                  "edgeStart": "PodBrowser-edgeStart",
                                                                  "label": "PodBrowser-label",
                                                                  "root": "PodBrowser-root",
                                                                  "sizeSmall": "PodBrowser-sizeSmall",
                                                                }
                                                              }
                                                              color="secondary"
                                                              component="span"
                                                              onBlur={[Function]}
                                                              onFocus={[Function]}
                                                              tabIndex={null}
                                                            >
                                                              <WithStyles(ForwardRef(ButtonBase))
                                                                centerRipple={true}
                                                                className="PodBrowser-root PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary PodBrowser-checked PodBrowser-checked PodBrowser-colorSecondary"
                                                                component="span"
                                                                disabled={false}
                                                                focusRipple={true}
                                                                onBlur={[Function]}
                                                                onFocus={[Function]}
                                                                tabIndex={null}
                                                              >
                                                                <ForwardRef(ButtonBase)
                                                                  centerRipple={true}
                                                                  className="PodBrowser-root PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary PodBrowser-checked PodBrowser-checked PodBrowser-colorSecondary"
                                                                  classes={
                                                                    Object {
                                                                      "disabled": "PodBrowser-disabled",
                                                                      "focusVisible": "PodBrowser-focusVisible",
                                                                      "root": "PodBrowser-root",
                                                                    }
                                                                  }
                                                                  component="span"
                                                                  disabled={false}
                                                                  focusRipple={true}
                                                                  onBlur={[Function]}
                                                                  onFocus={[Function]}
                                                                  tabIndex={null}
                                                                >
                                                                  <span
                                                                    aria-disabled={false}
                                                                    className="PodBrowser-root PodBrowser-root PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary PodBrowser-checked PodBrowser-checked PodBrowser-colorSecondary"
                                                                    onBlur={[Function]}
                                                                    onDragLeave={[Function]}
                                                                    onFocus={[Function]}
                                                                    onKeyDown={[Function]}
                                                                    onKeyUp={[Function]}
                                                                    onMouseDown={[Function]}
                                                                    onMouseLeave={[Function]}
                                                                    onMouseUp={[Function]}
                                                                    onTouchEnd={[Function]}
                                                                    onTouchMove={[Function]}
                                                                    onTouchStart={[Function]}
                                                                    tabIndex={null}
                                                                  >
                                                                    <span
                                                                      className="PodBrowser-label"
                                                                    >
                                                                      <input
                                                                        checked={true}
                                                                        className="PodBrowser-input"
                                                                        data-indeterminate={false}
                                                                        name="control"
                                                                        onChange={[Function]}
                                                                        type="checkbox"
                                                                      />
                                                                      <ForwardRef(CheckBoxIcon)>
                                                                        <WithStyles(ForwardRef(SvgIcon))>
                                                                          <ForwardRef(SvgIcon)
                                                                            classes={
                                                                              Object {
                                                                                "colorAction": "PodBrowser-colorAction",
                                                                                "colorDisabled": "PodBrowser-colorDisabled",
                                                                                "colorError": "PodBrowser-colorError",
                                                                                "colorPrimary": "PodBrowser-colorPrimary",
                                                                                "colorSecondary": "PodBrowser-colorSecondary",
                                                                                "fontSizeInherit": "PodBrowser-fontSizeInherit",
                                                                                "fontSizeLarge": "PodBrowser-fontSizeLarge",
                                                                                "fontSizeSmall": "PodBrowser-fontSizeSmall",
                                                                                "root": "PodBrowser-root",
                                                                              }
                                                                            }
                                                                          >
                                                                            <svg
                                                                              aria-hidden={true}
                                                                              className="PodBrowser-root"
                                                                              focusable="false"
                                                                              viewBox="0 0 24 24"
                                                                            >
                                                                              <path
                                                                                d="M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"
                                                                              />
                                                                            </svg>
                                                                          </ForwardRef(SvgIcon)>
                                                                        </WithStyles(ForwardRef(SvgIcon))>
                                                                      </ForwardRef(CheckBoxIcon)>
                                                                    </span>
                                                                    <WithStyles(memo)
                                                                      center={true}
                                                                    >
                                                                      <ForwardRef(TouchRipple)
                                                                        center={true}
                                                                        classes={
                                                                          Object {
                                                                            "child": "PodBrowser-child",
                                                                            "childLeaving": "PodBrowser-childLeaving",
                                                                            "childPulsate": "PodBrowser-childPulsate",
                                                                            "ripple": "PodBrowser-ripple",
                                                                            "ripplePulsate": "PodBrowser-ripplePulsate",
                                                                            "rippleVisible": "PodBrowser-rippleVisible",
                                                                            "root": "PodBrowser-root",
                                                                          }
                                                                        }
                                                                      >
                                                                        <span
                                                                          className="PodBrowser-root"
                                                                        >
                                                                          <TransitionGroup
                                                                            childFactory={[Function]}
                                                                            component={null}
                                                                            exit={true}
                                                                          />
                                                                        </span>
                                                                      </ForwardRef(TouchRipple)>
                                                                    </WithStyles(memo)>
                                                                  </span>
                                                                </ForwardRef(ButtonBase)>
                                                              </WithStyles(ForwardRef(ButtonBase))>
                                                            </ForwardRef(IconButton)>
                                                          </WithStyles(ForwardRef(IconButton))>
                                                        </ForwardRef(SwitchBase)>
                                                      </WithStyles(ForwardRef(SwitchBase))>
                                                    </ForwardRef(Checkbox)>
                                                  </WithStyles(ForwardRef(Checkbox))>
                                                  <WithStyles(ForwardRef(Typography))
                                                    className="PodBrowser-label PodBrowser-label"
                                                    component="span"
                                                  >
                                                    <ForwardRef(Typography)
                                                      className="PodBrowser-label PodBrowser-label"
                                                      classes={
                                                        Object {
                                                          "alignCenter": "PodBrowser-alignCenter",
                                                          "alignJustify": "PodBrowser-alignJustify",
                                                          "alignLeft": "PodBrowser-alignLeft",
                                                          "alignRight": "PodBrowser-alignRight",
                                                          "body1": "PodBrowser-body1",
                                                          "body2": "PodBrowser-body2",
                                                          "button": "PodBrowser-button",
                                                          "caption": "PodBrowser-caption",
                                                          "colorError": "PodBrowser-colorError",
                                                          "colorInherit": "PodBrowser-colorInherit",
                                                          "colorPrimary": "PodBrowser-colorPrimary",
                                                          "colorSecondary": "PodBrowser-colorSecondary",
                                                          "colorTextPrimary": "PodBrowser-colorTextPrimary",
                                                          "colorTextSecondary": "PodBrowser-colorTextSecondary",
                                                          "displayBlock": "PodBrowser-displayBlock",
                                                          "displayInline": "PodBrowser-displayInline",
                                                          "gutterBottom": "PodBrowser-gutterBottom",
                                                          "h1": "PodBrowser-h1",
                                                          "h2": "PodBrowser-h2",
                                                          "h3": "PodBrowser-h3",
                                                          "h4": "PodBrowser-h4",
                                                          "h5": "PodBrowser-h5",
                                                          "h6": "PodBrowser-h6",
                                                          "noWrap": "PodBrowser-noWrap",
                                                          "overline": "PodBrowser-overline",
                                                          "paragraph": "PodBrowser-paragraph",
                                                          "root": "PodBrowser-root",
                                                          "srOnly": "PodBrowser-srOnly",
                                                          "subtitle1": "PodBrowser-subtitle1",
                                                          "subtitle2": "PodBrowser-subtitle2",
                                                        }
                                                      }
                                                      component="span"
                                                    >
                                                      <span
                                                        className="PodBrowser-root PodBrowser-label PodBrowser-label PodBrowser-body1"
                                                      >
                                                        Control
                                                      </span>
                                                    </ForwardRef(Typography)>
                                                  </WithStyles(ForwardRef(Typography))>
                                                </label>
                                              </ForwardRef(FormControlLabel)>
                                            </WithStyles(ForwardRef(FormControlLabel))>
                                          </li>
                                        </ForwardRef(ListItem)>
                                      </WithStyles(ForwardRef(ListItem))>
                                    </PermissionCheckbox>
                                  </ul>
                                </ForwardRef(List)>
                              </WithStyles(ForwardRef(List))>
                              <WithStyles(ForwardRef(Button))
                                onClick={[Function]}
                                variant="contained"
                              >
                                <ForwardRef(Button)
                                  classes={
                                    Object {
                                      "colorInherit": "PodBrowser-colorInherit",
                                      "contained": "PodBrowser-contained",
                                      "containedPrimary": "PodBrowser-containedPrimary",
                                      "containedSecondary": "PodBrowser-containedSecondary",
                                      "containedSizeLarge": "PodBrowser-containedSizeLarge",
                                      "containedSizeSmall": "PodBrowser-containedSizeSmall",
                                      "disableElevation": "PodBrowser-disableElevation",
                                      "disabled": "PodBrowser-disabled",
                                      "endIcon": "PodBrowser-endIcon",
                                      "focusVisible": "PodBrowser-focusVisible",
                                      "fullWidth": "PodBrowser-fullWidth",
                                      "iconSizeLarge": "PodBrowser-iconSizeLarge",
                                      "iconSizeMedium": "PodBrowser-iconSizeMedium",
                                      "iconSizeSmall": "PodBrowser-iconSizeSmall",
                                      "label": "PodBrowser-label",
                                      "outlined": "PodBrowser-outlined",
                                      "outlinedPrimary": "PodBrowser-outlinedPrimary",
                                      "outlinedSecondary": "PodBrowser-outlinedSecondary",
                                      "outlinedSizeLarge": "PodBrowser-outlinedSizeLarge",
                                      "outlinedSizeSmall": "PodBrowser-outlinedSizeSmall",
                                      "root": "PodBrowser-root",
                                      "sizeLarge": "PodBrowser-sizeLarge",
                                      "sizeSmall": "PodBrowser-sizeSmall",
                                      "startIcon": "PodBrowser-startIcon",
                                      "text": "PodBrowser-text",
                                      "textPrimary": "PodBrowser-textPrimary",
                                      "textSecondary": "PodBrowser-textSecondary",
                                      "textSizeLarge": "PodBrowser-textSizeLarge",
                                      "textSizeSmall": "PodBrowser-textSizeSmall",
                                    }
                                  }
                                  onClick={[Function]}
                                  variant="contained"
                                >
                                  <WithStyles(ForwardRef(ButtonBase))
                                    className="PodBrowser-root PodBrowser-contained"
                                    component="button"
                                    disabled={false}
                                    focusRipple={true}
                                    focusVisibleClassName="PodBrowser-focusVisible"
                                    onClick={[Function]}
                                    type="button"
                                  >
                                    <ForwardRef(ButtonBase)
                                      className="PodBrowser-root PodBrowser-contained"
                                      classes={
                                        Object {
                                          "disabled": "PodBrowser-disabled",
                                          "focusVisible": "PodBrowser-focusVisible",
                                          "root": "PodBrowser-root",
                                        }
                                      }
                                      component="button"
                                      disabled={false}
                                      focusRipple={true}
                                      focusVisibleClassName="PodBrowser-focusVisible"
                                      onClick={[Function]}
                                      type="button"
                                    >
                                      <button
                                        className="PodBrowser-root PodBrowser-root PodBrowser-contained"
                                        disabled={false}
                                        onBlur={[Function]}
                                        onClick={[Function]}
                                        onDragLeave={[Function]}
                                        onFocus={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        onMouseDown={[Function]}
                                        onMouseLeave={[Function]}
                                        onMouseUp={[Function]}
                                        onTouchEnd={[Function]}
                                        onTouchMove={[Function]}
                                        onTouchStart={[Function]}
                                        tabIndex={0}
                                        type="button"
                                      >
                                        <span
                                          className="PodBrowser-label"
                                        >
                                          Save
                                        </span>
                                        <WithStyles(memo)
                                          center={false}
                                        >
                                          <ForwardRef(TouchRipple)
                                            center={false}
                                            classes={
                                              Object {
                                                "child": "PodBrowser-child",
                                                "childLeaving": "PodBrowser-childLeaving",
                                                "childPulsate": "PodBrowser-childPulsate",
                                                "ripple": "PodBrowser-ripple",
                                                "ripplePulsate": "PodBrowser-ripplePulsate",
                                                "rippleVisible": "PodBrowser-rippleVisible",
                                                "root": "PodBrowser-root",
                                              }
                                            }
                                          >
                                            <span
                                              className="PodBrowser-root"
                                            >
                                              <TransitionGroup
                                                childFactory={[Function]}
                                                component={null}
                                                exit={true}
                                              />
                                            </span>
                                          </ForwardRef(TouchRipple)>
                                        </WithStyles(memo)>
                                      </button>
                                    </ForwardRef(ButtonBase)>
                                  </WithStyles(ForwardRef(ButtonBase))>
                                </ForwardRef(Button)>
                              </WithStyles(ForwardRef(Button))>
                            </section>
                          </div>
                        </PermissionsForm>
                      </li>
                    </ForwardRef(ListItem)>
                  </WithStyles(ForwardRef(ListItem))>
                </ul>
              </ForwardRef(List)>
            </WithStyles(ForwardRef(List))>
          </AgentAccessList>
        </section>
        <ThirdPartyPermissions
          classes={
            Object {
              "agentAddButton": "PodBrowser-agentAddButton",
              "agentInput": "PodBrowser-agentInput",
              "avatar": "PodBrowser-avatar",
              "centeredSection": "PodBrowser-centeredSection",
              "content": "PodBrowser-content",
              "content-blockquote": "PodBrowser-content-blockquote",
              "content-h1": "PodBrowser-content-h1",
              "content-h2": "PodBrowser-content-h2",
              "content-h3": "PodBrowser-content-h3",
              "content-h4": "PodBrowser-content-h4",
              "content-h5": "PodBrowser-content-h5",
              "content-h6": "PodBrowser-content-h6",
              "content-ol": "PodBrowser-content-ol",
              "content-p": "PodBrowser-content-p",
              "content-ul": "PodBrowser-content-ul",
              "detailText": "PodBrowser-detailText",
              "downloadButton": "PodBrowser-downloadButton",
              "formListItem": "PodBrowser-formListItem",
              "headerSection": "PodBrowser-headerSection",
              "image": "PodBrowser-image",
              "listItem": "PodBrowser-listItem",
              "raw": "PodBrowser-raw",
              "typeValue": "PodBrowser-typeValue",
            }
          }
          iri="iri"
          setThirdPartyPermissions={[Function]}
          thirdPartyPermissions={Array []}
        >
          <NoThirdPartyPermissions
            classes={
              Object {
                "agentAddButton": "PodBrowser-agentAddButton",
                "agentInput": "PodBrowser-agentInput",
                "avatar": "PodBrowser-avatar",
                "centeredSection": "PodBrowser-centeredSection",
                "content": "PodBrowser-content",
                "content-blockquote": "PodBrowser-content-blockquote",
                "content-h1": "PodBrowser-content-h1",
                "content-h2": "PodBrowser-content-h2",
                "content-h3": "PodBrowser-content-h3",
                "content-h4": "PodBrowser-content-h4",
                "content-h5": "PodBrowser-content-h5",
                "content-h6": "PodBrowser-content-h6",
                "content-ol": "PodBrowser-content-ol",
                "content-p": "PodBrowser-content-p",
                "content-ul": "PodBrowser-content-ul",
                "detailText": "PodBrowser-detailText",
                "downloadButton": "PodBrowser-downloadButton",
                "formListItem": "PodBrowser-formListItem",
                "headerSection": "PodBrowser-headerSection",
                "image": "PodBrowser-image",
                "listItem": "PodBrowser-listItem",
                "raw": "PodBrowser-raw",
                "typeValue": "PodBrowser-typeValue",
              }
            }
          >
            <section
              className="PodBrowser-centeredSection"
            >
              <WithStyles(ForwardRef(List))>
                <ForwardRef(List)
                  classes={
                    Object {
                      "dense": "PodBrowser-dense",
                      "padding": "PodBrowser-padding",
                      "root": "PodBrowser-root",
                      "subheader": "PodBrowser-subheader",
                    }
                  }
                >
                  <ul
                    className="PodBrowser-root PodBrowser-padding"
                  >
                    <WithStyles(ForwardRef(ListItem))
                      className="PodBrowser-listItem"
                      key="0"
                    >
                      <ForwardRef(ListItem)
                        className="PodBrowser-listItem"
                        classes={
                          Object {
                            "alignItemsFlexStart": "PodBrowser-alignItemsFlexStart",
                            "button": "PodBrowser-button",
                            "container": "PodBrowser-container",
                            "dense": "PodBrowser-dense",
                            "disabled": "PodBrowser-disabled",
                            "divider": "PodBrowser-divider",
                            "focusVisible": "PodBrowser-focusVisible",
                            "gutters": "PodBrowser-gutters",
                            "root": "PodBrowser-root",
                            "secondaryAction": "PodBrowser-secondaryAction",
                            "selected": "PodBrowser-selected",
                          }
                        }
                      >
                        <li
                          className="PodBrowser-root PodBrowser-listItem PodBrowser-gutters"
                          disabled={false}
                        >
                          <WithStyles(ForwardRef(ListItemIcon))
                            key=".0"
                          >
                            <ForwardRef(ListItemIcon)
                              classes={
                                Object {
                                  "alignItemsFlexStart": "PodBrowser-alignItemsFlexStart",
                                  "root": "PodBrowser-root",
                                }
                              }
                            >
                              <div
                                className="PodBrowser-root"
                              >
                                <ForwardRef>
                                  <WithStyles(ForwardRef(SvgIcon))>
                                    <ForwardRef(SvgIcon)
                                      classes={
                                        Object {
                                          "colorAction": "PodBrowser-colorAction",
                                          "colorDisabled": "PodBrowser-colorDisabled",
                                          "colorError": "PodBrowser-colorError",
                                          "colorPrimary": "PodBrowser-colorPrimary",
                                          "colorSecondary": "PodBrowser-colorSecondary",
                                          "fontSizeInherit": "PodBrowser-fontSizeInherit",
                                          "fontSizeLarge": "PodBrowser-fontSizeLarge",
                                          "fontSizeSmall": "PodBrowser-fontSizeSmall",
                                          "root": "PodBrowser-root",
                                        }
                                      }
                                    >
                                      <svg
                                        aria-hidden={true}
                                        className="PodBrowser-root"
                                        focusable="false"
                                        viewBox="0 0 24 24"
                                      >
                                        <path
                                          d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"
                                        />
                                      </svg>
                                    </ForwardRef(SvgIcon)>
                                  </WithStyles(ForwardRef(SvgIcon))>
                                </ForwardRef>
                                People
                              </div>
                            </ForwardRef(ListItemIcon)>
                          </WithStyles(ForwardRef(ListItemIcon))>
                        </li>
                      </ForwardRef(ListItem)>
                    </WithStyles(ForwardRef(ListItem))>
                    <WithStyles(ForwardRef(ListItem))
                      className="PodBrowser-listItem"
                      key="1"
                    >
                      <ForwardRef(ListItem)
                        className="PodBrowser-listItem"
                        classes={
                          Object {
                            "alignItemsFlexStart": "PodBrowser-alignItemsFlexStart",
                            "button": "PodBrowser-button",
                            "container": "PodBrowser-container",
                            "dense": "PodBrowser-dense",
                            "disabled": "PodBrowser-disabled",
                            "divider": "PodBrowser-divider",
                            "focusVisible": "PodBrowser-focusVisible",
                            "gutters": "PodBrowser-gutters",
                            "root": "PodBrowser-root",
                            "secondaryAction": "PodBrowser-secondaryAction",
                            "selected": "PodBrowser-selected",
                          }
                        }
                      >
                        <li
                          className="PodBrowser-root PodBrowser-listItem PodBrowser-gutters"
                          disabled={false}
                        >
                          <WithStyles(ForwardRef(Typography))
                            className="PodBrowser-detailText"
                            key=".0"
                          >
                            <ForwardRef(Typography)
                              className="PodBrowser-detailText"
                              classes={
                                Object {
                                  "alignCenter": "PodBrowser-alignCenter",
                                  "alignJustify": "PodBrowser-alignJustify",
                                  "alignLeft": "PodBrowser-alignLeft",
                                  "alignRight": "PodBrowser-alignRight",
                                  "body1": "PodBrowser-body1",
                                  "body2": "PodBrowser-body2",
                                  "button": "PodBrowser-button",
                                  "caption": "PodBrowser-caption",
                                  "colorError": "PodBrowser-colorError",
                                  "colorInherit": "PodBrowser-colorInherit",
                                  "colorPrimary": "PodBrowser-colorPrimary",
                                  "colorSecondary": "PodBrowser-colorSecondary",
                                  "colorTextPrimary": "PodBrowser-colorTextPrimary",
                                  "colorTextSecondary": "PodBrowser-colorTextSecondary",
                                  "displayBlock": "PodBrowser-displayBlock",
                                  "displayInline": "PodBrowser-displayInline",
                                  "gutterBottom": "PodBrowser-gutterBottom",
                                  "h1": "PodBrowser-h1",
                                  "h2": "PodBrowser-h2",
                                  "h3": "PodBrowser-h3",
                                  "h4": "PodBrowser-h4",
                                  "h5": "PodBrowser-h5",
                                  "h6": "PodBrowser-h6",
                                  "noWrap": "PodBrowser-noWrap",
                                  "overline": "PodBrowser-overline",
                                  "paragraph": "PodBrowser-paragraph",
                                  "root": "PodBrowser-root",
                                  "srOnly": "PodBrowser-srOnly",
                                  "subtitle1": "PodBrowser-subtitle1",
                                  "subtitle2": "PodBrowser-subtitle2",
                                }
                              }
                            >
                              <p
                                className="PodBrowser-root PodBrowser-detailText PodBrowser-body1"
                              >
                                No 3rd party access
                              </p>
                            </ForwardRef(Typography)>
                          </WithStyles(ForwardRef(Typography))>
                        </li>
                      </ForwardRef(ListItem)>
                    </WithStyles(ForwardRef(ListItem))>
                  </ul>
                </ForwardRef(List)>
              </WithStyles(ForwardRef(List))>
            </section>
          </NoThirdPartyPermissions>
        </ThirdPartyPermissions>
        <WithStyles(ForwardRef(Divider))>
          <ForwardRef(Divider)
            classes={
              Object {
                "absolute": "PodBrowser-absolute",
                "flexItem": "PodBrowser-flexItem",
                "inset": "PodBrowser-inset",
                "light": "PodBrowser-light",
                "middle": "PodBrowser-middle",
                "root": "PodBrowser-root",
                "vertical": "PodBrowser-vertical",
              }
            }
          >
            <hr
              className="PodBrowser-root"
            />
          </ForwardRef(Divider)>
        </WithStyles(ForwardRef(Divider))>
        <section
          className="PodBrowser-centeredSection"
        >
          <AgentSearchForm
            buttonText="Add"
            heading="Grant Permission"
            onSubmit={[Function]}
          >
            <h5
              className="PodBrowser-content-h5"
            >
              Grant Permission
            </h5>
            <WithStyles(ForwardRef(FormControl))
              className="PodBrowser-agentInput"
            >
              <ForwardRef(FormControl)
                className="PodBrowser-agentInput"
                classes={
                  Object {
                    "fullWidth": "PodBrowser-fullWidth",
                    "marginDense": "PodBrowser-marginDense",
                    "marginNormal": "PodBrowser-marginNormal",
                    "root": "PodBrowser-root",
                  }
                }
              >
                <div
                  className="PodBrowser-root PodBrowser-agentInput"
                >
                  <WithStyles(ForwardRef(InputLabel))
                    htmlFor={
                      Array [
                        "id2",
                      ]
                    }
                  >
                    <ForwardRef(InputLabel)
                      classes={
                        Object {
                          "animated": "PodBrowser-animated",
                          "asterisk": "PodBrowser-asterisk",
                          "disabled": "PodBrowser-disabled",
                          "error": "PodBrowser-error",
                          "filled": "PodBrowser-filled",
                          "focused": "PodBrowser-focused",
                          "formControl": "PodBrowser-formControl",
                          "marginDense": "PodBrowser-marginDense",
                          "outlined": "PodBrowser-outlined",
                          "required": "PodBrowser-required",
                          "root": "PodBrowser-root",
                          "shrink": "PodBrowser-shrink",
                        }
                      }
                      htmlFor={
                        Array [
                          "id2",
                        ]
                      }
                    >
                      <WithStyles(ForwardRef(FormLabel))
                        className="PodBrowser-root PodBrowser-formControl PodBrowser-animated PodBrowser-shrink"
                        classes={
                          Object {
                            "asterisk": "PodBrowser-asterisk",
                            "disabled": "PodBrowser-disabled",
                            "error": "PodBrowser-error",
                            "focused": "PodBrowser-focused",
                            "required": "PodBrowser-required",
                          }
                        }
                        data-shrink={true}
                        htmlFor={
                          Array [
                            "id2",
                          ]
                        }
                      >
                        <ForwardRef(FormLabel)
                          className="PodBrowser-root PodBrowser-formControl PodBrowser-animated PodBrowser-shrink"
                          classes={
                            Object {
                              "asterisk": "PodBrowser-asterisk PodBrowser-asterisk",
                              "colorSecondary": "PodBrowser-colorSecondary",
                              "disabled": "PodBrowser-disabled PodBrowser-disabled",
                              "error": "PodBrowser-error PodBrowser-error",
                              "filled": "PodBrowser-filled",
                              "focused": "PodBrowser-focused PodBrowser-focused",
                              "required": "PodBrowser-required PodBrowser-required",
                              "root": "PodBrowser-root",
                            }
                          }
                          data-shrink={true}
                          htmlFor={
                            Array [
                              "id2",
                            ]
                          }
                        >
                          <label
                            className="PodBrowser-root PodBrowser-root PodBrowser-formControl PodBrowser-animated PodBrowser-shrink"
                            data-shrink={true}
                            htmlFor={
                              Array [
                                "id2",
                              ]
                            }
                          >
                            Web ID
                          </label>
                        </ForwardRef(FormLabel)>
                      </WithStyles(ForwardRef(FormLabel))>
                    </ForwardRef(InputLabel)>
                  </WithStyles(ForwardRef(InputLabel))>
                  <WithStyles(ForwardRef(Input))
                    id={
                      Array [
                        "id2",
                      ]
                    }
                    onChange={[Function]}
                    startAdornment={
                      <WithStyles(ForwardRef(InputAdornment))
                        position="start"
                      >
                        <Memo(AccountCircleIcon) />
                      </WithStyles(ForwardRef(InputAdornment))>
                    }
                    value=""
                  >
                    <ForwardRef(Input)
                      classes={
                        Object {
                          "colorSecondary": "PodBrowser-colorSecondary",
                          "disabled": "PodBrowser-disabled",
                          "error": "PodBrowser-error",
                          "focused": "PodBrowser-focused",
                          "formControl": "PodBrowser-formControl",
                          "fullWidth": "PodBrowser-fullWidth",
                          "input": "PodBrowser-input",
                          "inputMarginDense": "PodBrowser-inputMarginDense",
                          "inputMultiline": "PodBrowser-inputMultiline",
                          "inputTypeSearch": "PodBrowser-inputTypeSearch",
                          "marginDense": "PodBrowser-marginDense",
                          "multiline": "PodBrowser-multiline",
                          "root": "PodBrowser-root",
                          "underline": "PodBrowser-underline",
                        }
                      }
                      id={
                        Array [
                          "id2",
                        ]
                      }
                      onChange={[Function]}
                      startAdornment={
                        <WithStyles(ForwardRef(InputAdornment))
                          position="start"
                        >
                          <Memo(AccountCircleIcon) />
                        </WithStyles(ForwardRef(InputAdornment))>
                      }
                      value=""
                    >
                      <WithStyles(ForwardRef(InputBase))
                        classes={
                          Object {
                            "colorSecondary": "PodBrowser-colorSecondary",
                            "disabled": "PodBrowser-disabled",
                            "error": "PodBrowser-error",
                            "focused": "PodBrowser-focused",
                            "formControl": "PodBrowser-formControl",
                            "fullWidth": "PodBrowser-fullWidth",
                            "input": "PodBrowser-input",
                            "inputMarginDense": "PodBrowser-inputMarginDense",
                            "inputMultiline": "PodBrowser-inputMultiline",
                            "inputTypeSearch": "PodBrowser-inputTypeSearch",
                            "marginDense": "PodBrowser-marginDense",
                            "multiline": "PodBrowser-multiline",
                            "root": "PodBrowser-root PodBrowser-underline",
                            "underline": null,
                          }
                        }
                        fullWidth={false}
                        id={
                          Array [
                            "id2",
                          ]
                        }
                        inputComponent="input"
                        multiline={false}
                        onChange={[Function]}
                        startAdornment={
                          <WithStyles(ForwardRef(InputAdornment))
                            position="start"
                          >
                            <Memo(AccountCircleIcon) />
                          </WithStyles(ForwardRef(InputAdornment))>
                        }
                        type="text"
                        value=""
                      >
                        <ForwardRef(InputBase)
                          classes={
                            Object {
                              "adornedEnd": "PodBrowser-adornedEnd",
                              "adornedStart": "PodBrowser-adornedStart",
                              "colorSecondary": "PodBrowser-colorSecondary PodBrowser-colorSecondary",
                              "disabled": "PodBrowser-disabled PodBrowser-disabled",
                              "error": "PodBrowser-error PodBrowser-error",
                              "focused": "PodBrowser-focused PodBrowser-focused",
                              "formControl": "PodBrowser-formControl PodBrowser-formControl",
                              "fullWidth": "PodBrowser-fullWidth PodBrowser-fullWidth",
                              "input": "PodBrowser-input PodBrowser-input",
                              "inputAdornedEnd": "PodBrowser-inputAdornedEnd",
                              "inputAdornedStart": "PodBrowser-inputAdornedStart",
                              "inputHiddenLabel": "PodBrowser-inputHiddenLabel",
                              "inputMarginDense": "PodBrowser-inputMarginDense PodBrowser-inputMarginDense",
                              "inputMultiline": "PodBrowser-inputMultiline PodBrowser-inputMultiline",
                              "inputTypeSearch": "PodBrowser-inputTypeSearch PodBrowser-inputTypeSearch",
                              "marginDense": "PodBrowser-marginDense PodBrowser-marginDense",
                              "multiline": "PodBrowser-multiline PodBrowser-multiline",
                              "root": "PodBrowser-root PodBrowser-root PodBrowser-underline",
                            }
                          }
                          fullWidth={false}
                          id={
                            Array [
                              "id2",
                            ]
                          }
                          inputComponent="input"
                          multiline={false}
                          onChange={[Function]}
                          startAdornment={
                            <WithStyles(ForwardRef(InputAdornment))
                              position="start"
                            >
                              <Memo(AccountCircleIcon) />
                            </WithStyles(ForwardRef(InputAdornment))>
                          }
                          type="text"
                          value=""
                        >
                          <div
                            className="PodBrowser-root PodBrowser-root PodBrowser-underline PodBrowser-formControl PodBrowser-formControl PodBrowser-adornedStart"
                            onClick={[Function]}
                          >
                            <WithStyles(ForwardRef(InputAdornment))
                              position="start"
                            >
                              <ForwardRef(InputAdornment)
                                classes={
                                  Object {
                                    "disablePointerEvents": "PodBrowser-disablePointerEvents",
                                    "filled": "PodBrowser-filled",
                                    "hiddenLabel": "PodBrowser-hiddenLabel",
                                    "marginDense": "PodBrowser-marginDense",
                                    "positionEnd": "PodBrowser-positionEnd",
                                    "positionStart": "PodBrowser-positionStart",
                                    "root": "PodBrowser-root",
                                  }
                                }
                                position="start"
                              >
                                <div
                                  className="PodBrowser-root PodBrowser-positionStart"
                                >
                                  <ForwardRef>
                                    <WithStyles(ForwardRef(SvgIcon))>
                                      <ForwardRef(SvgIcon)
                                        classes={
                                          Object {
                                            "colorAction": "PodBrowser-colorAction",
                                            "colorDisabled": "PodBrowser-colorDisabled",
                                            "colorError": "PodBrowser-colorError",
                                            "colorPrimary": "PodBrowser-colorPrimary",
                                            "colorSecondary": "PodBrowser-colorSecondary",
                                            "fontSizeInherit": "PodBrowser-fontSizeInherit",
                                            "fontSizeLarge": "PodBrowser-fontSizeLarge",
                                            "fontSizeSmall": "PodBrowser-fontSizeSmall",
                                            "root": "PodBrowser-root",
                                          }
                                        }
                                      >
                                        <svg
                                          aria-hidden={true}
                                          className="PodBrowser-root"
                                          focusable="false"
                                          viewBox="0 0 24 24"
                                        >
                                          <path
                                            d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 3c1.66 0 3 1.34 3 3s-1.34 3-3 3-3-1.34-3-3 1.34-3 3-3zm0 14.2c-2.5 0-4.71-1.28-6-3.22.03-1.99 4-3.08 6-3.08 1.99 0 5.97 1.09 6 3.08-1.29 1.94-3.5 3.22-6 3.22z"
                                          />
                                        </svg>
                                      </ForwardRef(SvgIcon)>
                                    </WithStyles(ForwardRef(SvgIcon))>
                                  </ForwardRef>
                                </div>
                              </ForwardRef(InputAdornment)>
                            </WithStyles(ForwardRef(InputAdornment))>
                            <input
                              aria-invalid={false}
                              className="PodBrowser-input PodBrowser-input PodBrowser-inputAdornedStart"
                              disabled={false}
                              id={
                                Array [
                                  "id2",
                                ]
                              }
                              onAnimationStart={[Function]}
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              required={false}
                              type="text"
                              value=""
                            />
                          </div>
                        </ForwardRef(InputBase)>
                      </WithStyles(ForwardRef(InputBase))>
                    </ForwardRef(Input)>
                  </WithStyles(ForwardRef(Input))>
                </div>
              </ForwardRef(FormControl)>
            </WithStyles(ForwardRef(FormControl))>
            <WithStyles(ForwardRef(Button))
              className="PodBrowser-agentAddButton"
              onClick={[Function]}
              variant="contained"
            >
              <ForwardRef(Button)
                className="PodBrowser-agentAddButton"
                classes={
                  Object {
                    "colorInherit": "PodBrowser-colorInherit",
                    "contained": "PodBrowser-contained",
                    "containedPrimary": "PodBrowser-containedPrimary",
                    "containedSecondary": "PodBrowser-containedSecondary",
                    "containedSizeLarge": "PodBrowser-containedSizeLarge",
                    "containedSizeSmall": "PodBrowser-containedSizeSmall",
                    "disableElevation": "PodBrowser-disableElevation",
                    "disabled": "PodBrowser-disabled",
                    "endIcon": "PodBrowser-endIcon",
                    "focusVisible": "PodBrowser-focusVisible",
                    "fullWidth": "PodBrowser-fullWidth",
                    "iconSizeLarge": "PodBrowser-iconSizeLarge",
                    "iconSizeMedium": "PodBrowser-iconSizeMedium",
                    "iconSizeSmall": "PodBrowser-iconSizeSmall",
                    "label": "PodBrowser-label",
                    "outlined": "PodBrowser-outlined",
                    "outlinedPrimary": "PodBrowser-outlinedPrimary",
                    "outlinedSecondary": "PodBrowser-outlinedSecondary",
                    "outlinedSizeLarge": "PodBrowser-outlinedSizeLarge",
                    "outlinedSizeSmall": "PodBrowser-outlinedSizeSmall",
                    "root": "PodBrowser-root",
                    "sizeLarge": "PodBrowser-sizeLarge",
                    "sizeSmall": "PodBrowser-sizeSmall",
                    "startIcon": "PodBrowser-startIcon",
                    "text": "PodBrowser-text",
                    "textPrimary": "PodBrowser-textPrimary",
                    "textSecondary": "PodBrowser-textSecondary",
                    "textSizeLarge": "PodBrowser-textSizeLarge",
                    "textSizeSmall": "PodBrowser-textSizeSmall",
                  }
                }
                onClick={[Function]}
                variant="contained"
              >
                <WithStyles(ForwardRef(ButtonBase))
                  className="PodBrowser-root PodBrowser-contained PodBrowser-agentAddButton"
                  component="button"
                  disabled={false}
                  focusRipple={true}
                  focusVisibleClassName="PodBrowser-focusVisible"
                  onClick={[Function]}
                  type="button"
                >
                  <ForwardRef(ButtonBase)
                    className="PodBrowser-root PodBrowser-contained PodBrowser-agentAddButton"
                    classes={
                      Object {
                        "disabled": "PodBrowser-disabled",
                        "focusVisible": "PodBrowser-focusVisible",
                        "root": "PodBrowser-root",
                      }
                    }
                    component="button"
                    disabled={false}
                    focusRipple={true}
                    focusVisibleClassName="PodBrowser-focusVisible"
                    onClick={[Function]}
                    type="button"
                  >
                    <button
                      className="PodBrowser-root PodBrowser-root PodBrowser-contained PodBrowser-agentAddButton"
                      disabled={false}
                      onBlur={[Function]}
                      onClick={[Function]}
                      onDragLeave={[Function]}
                      onFocus={[Function]}
                      onKeyDown={[Function]}
                      onKeyUp={[Function]}
                      onMouseDown={[Function]}
                      onMouseLeave={[Function]}
                      onMouseUp={[Function]}
                      onTouchEnd={[Function]}
                      onTouchMove={[Function]}
                      onTouchStart={[Function]}
                      tabIndex={0}
                      type="button"
                    >
                      <span
                        className="PodBrowser-label"
                      >
                        Add
                      </span>
                      <WithStyles(memo)
                        center={false}
                      >
                        <ForwardRef(TouchRipple)
                          center={false}
                          classes={
                            Object {
                              "child": "PodBrowser-child",
                              "childLeaving": "PodBrowser-childLeaving",
                              "childPulsate": "PodBrowser-childPulsate",
                              "ripple": "PodBrowser-ripple",
                              "ripplePulsate": "PodBrowser-ripplePulsate",
                              "rippleVisible": "PodBrowser-rippleVisible",
                              "root": "PodBrowser-root",
                            }
                          }
                        >
                          <span
                            className="PodBrowser-root"
                          >
                            <TransitionGroup
                              childFactory={[Function]}
                              component={null}
                              exit={true}
                            />
                          </span>
                        </ForwardRef(TouchRipple)>
                      </WithStyles(memo)>
                    </button>
                  </ForwardRef(ButtonBase)>
                </WithStyles(ForwardRef(ButtonBase))>
              </ForwardRef(Button)>
            </WithStyles(ForwardRef(Button))>
          </AgentSearchForm>
        </section>
        <section
          className="PodBrowser-centeredSection"
        >
          <AgentAccessList
            iri="iri"
            onSave={[Function]}
            onSubmit={[Function]}
            permissions={Array []}
            saveFn={[Function]}
            warn={false}
          />
        </section>
        <WithStyles(ForwardRef(Divider))>
          <ForwardRef(Divider)
            classes={
              Object {
                "absolute": "PodBrowser-absolute",
                "flexItem": "PodBrowser-flexItem",
                "inset": "PodBrowser-inset",
                "light": "PodBrowser-light",
                "middle": "PodBrowser-middle",
                "root": "PodBrowser-root",
                "vertical": "PodBrowser-vertical",
              }
            }
          >
            <hr
              className="PodBrowser-root"
            />
          </ForwardRef(Divider)>
        </WithStyles(ForwardRef(Divider))>
        <section
          className="PodBrowser-centeredSection"
        >
          <h5
            className="PodBrowser-content-h5"
          >
            Default Access
          </h5>
          <WithStyles(ForwardRef(List))>
            <ForwardRef(List)
              classes={
                Object {
                  "dense": "PodBrowser-dense",
                  "padding": "PodBrowser-padding",
                  "root": "PodBrowser-root",
                  "subheader": "PodBrowser-subheader",
                }
              }
            >
              <ul
                className="PodBrowser-root PodBrowser-padding"
              >
                <WithStyles(ForwardRef(ListItem))
                  className="PodBrowser-listItem"
                  key="0"
                >
                  <ForwardRef(ListItem)
                    className="PodBrowser-listItem"
                    classes={
                      Object {
                        "alignItemsFlexStart": "PodBrowser-alignItemsFlexStart",
                        "button": "PodBrowser-button",
                        "container": "PodBrowser-container",
                        "dense": "PodBrowser-dense",
                        "disabled": "PodBrowser-disabled",
                        "divider": "PodBrowser-divider",
                        "focusVisible": "PodBrowser-focusVisible",
                        "gutters": "PodBrowser-gutters",
                        "root": "PodBrowser-root",
                        "secondaryAction": "PodBrowser-secondaryAction",
                        "selected": "PodBrowser-selected",
                      }
                    }
                  >
                    <li
                      className="PodBrowser-root PodBrowser-listItem PodBrowser-gutters"
                      disabled={false}
                    >
                      <WithStyles(ForwardRef(ListItemIcon))
                        key=".0"
                      >
                        <ForwardRef(ListItemIcon)
                          classes={
                            Object {
                              "alignItemsFlexStart": "PodBrowser-alignItemsFlexStart",
                              "root": "PodBrowser-root",
                            }
                          }
                        >
                          <div
                            className="PodBrowser-root"
                          >
                            <ForwardRef>
                              <WithStyles(ForwardRef(SvgIcon))>
                                <ForwardRef(SvgIcon)
                                  classes={
                                    Object {
                                      "colorAction": "PodBrowser-colorAction",
                                      "colorDisabled": "PodBrowser-colorDisabled",
                                      "colorError": "PodBrowser-colorError",
                                      "colorPrimary": "PodBrowser-colorPrimary",
                                      "colorSecondary": "PodBrowser-colorSecondary",
                                      "fontSizeInherit": "PodBrowser-fontSizeInherit",
                                      "fontSizeLarge": "PodBrowser-fontSizeLarge",
                                      "fontSizeSmall": "PodBrowser-fontSizeSmall",
                                      "root": "PodBrowser-root",
                                    }
                                  }
                                >
                                  <svg
                                    aria-hidden={true}
                                    className="PodBrowser-root"
                                    focusable="false"
                                    viewBox="0 0 24 24"
                                  >
                                    <path
                                      d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"
                                    />
                                  </svg>
                                </ForwardRef(SvgIcon)>
                              </WithStyles(ForwardRef(SvgIcon))>
                            </ForwardRef>
                            People
                          </div>
                        </ForwardRef(ListItemIcon)>
                      </WithStyles(ForwardRef(ListItemIcon))>
                    </li>
                  </ForwardRef(ListItem)>
                </WithStyles(ForwardRef(ListItem))>
                <WithStyles(ForwardRef(Divider))>
                  <ForwardRef(Divider)
                    classes={
                      Object {
                        "absolute": "PodBrowser-absolute",
                        "flexItem": "PodBrowser-flexItem",
                        "inset": "PodBrowser-inset",
                        "light": "PodBrowser-light",
                        "middle": "PodBrowser-middle",
                        "root": "PodBrowser-root",
                        "vertical": "PodBrowser-vertical",
                      }
                    }
                  >
                    <hr
                      className="PodBrowser-root"
                    />
                  </ForwardRef(Divider)>
                </WithStyles(ForwardRef(Divider))>
                <AgentAccessList
                  iri="iri"
                  onSave={[Function]}
                  onSubmit={[Function]}
                  permissions={Array []}
                  saveFn={[Function]}
                  warn={false}
                />
              </ul>
            </ForwardRef(List)>
          </WithStyles(ForwardRef(List))>
          <DefaultPermissionForm
            iri="iri"
            onSubmit={[Function]}
            permission={
              Object {
                "acl": Object {
                  "append": true,
                  "control": true,
                  "read": true,
                  "write": true,
                },
                "alias": "Control",
                "profile": Object {
                  "webId": "webId",
                },
                "webId": "webId",
              }
            }
            webId="webId"
          />
          <WithStyles(ForwardRef(Divider))>
            <ForwardRef(Divider)
              classes={
                Object {
                  "absolute": "PodBrowser-absolute",
                  "flexItem": "PodBrowser-flexItem",
                  "inset": "PodBrowser-inset",
                  "light": "PodBrowser-light",
                  "middle": "PodBrowser-middle",
                  "root": "PodBrowser-root",
                  "vertical": "PodBrowser-vertical",
                }
              }
            >
              <hr
                className="PodBrowser-root"
              />
            </ForwardRef(Divider)>
          </WithStyles(ForwardRef(Divider))>
        </section>
      </ResourceSharing>
    </ThemeProvider>
  </StylesProvider>
</WithTheme>
`;

exports[`ResourceSharing it renders the sharing action component 1`] = `
<WithTheme
  theme={
    Object {
      "breakpoints": Object {
        "between": [Function],
        "down": [Function],
        "keys": Array [
          "xs",
          "sm",
          "md",
          "lg",
          "xl",
        ],
        "only": [Function],
        "up": [Function],
        "values": Object {
          "lg": 1280,
          "md": 960,
          "sm": 600,
          "xl": 1920,
          "xs": 0,
        },
        "width": [Function],
      },
      "direction": "ltr",
      "iconSet": Object {
        "config": Object {
          "cssFiles": Array [
            "css/all.css",
          ],
          "fonts": Array [
            Object {
              "fontFace": "
font-family: 'Font Awesome 5 Free';
font-style: normal;
font-weight: 900;
font-display: block;",
              "fontsPath": "./webfonts",
              "licensePath": "./LICENSE.txt",
              "source": "fa-solid-900.eot",
              "sources": Array [
                Object {
                  "format": "embedded-opentype",
                  "path": "fa-solid-900.eot",
                  "urlAddition": "?#iefix",
                },
                Object {
                  "format": "woff2",
                  "path": "fa-solid-900.woff2",
                },
                Object {
                  "format": "woff",
                  "path": "fa-solid-900.woff",
                },
                Object {
                  "format": "truetype",
                  "path": "fa-solid-900.ttf",
                },
                Object {
                  "format": "svg",
                  "path": "fa-solid-900.svg",
                  "urlAddition": "#fontawesome",
                },
              ],
            },
          ],
          "label": "Font Awesome Solid",
          "name": "fontawesome-solid",
          "npmModule": "@fortawesome/fontawesome-free",
          "type": 0,
        },
        "iconColor": [Function],
        "styles": [Function],
      },
      "icons": Object {
        "config": Object {
          "cssFiles": Array [
            "css/all.css",
          ],
          "fonts": Array [
            Object {
              "fontFace": "
font-family: 'Font Awesome 5 Free';
font-style: normal;
font-weight: 900;
font-display: block;",
              "fontsPath": "./webfonts",
              "licensePath": "./LICENSE.txt",
              "source": "fa-solid-900.eot",
              "sources": Array [
                Object {
                  "format": "embedded-opentype",
                  "path": "fa-solid-900.eot",
                  "urlAddition": "?#iefix",
                },
                Object {
                  "format": "woff2",
                  "path": "fa-solid-900.woff2",
                },
                Object {
                  "format": "woff",
                  "path": "fa-solid-900.woff",
                },
                Object {
                  "format": "truetype",
                  "path": "fa-solid-900.ttf",
                },
                Object {
                  "format": "svg",
                  "path": "fa-solid-900.svg",
                  "urlAddition": "#fontawesome",
                },
              ],
            },
          ],
          "label": "Font Awesome Solid",
          "name": "fontawesome-solid",
          "npmModule": "@fortawesome/fontawesome-free",
          "type": 0,
        },
        "iconColor": [Function],
        "styles": [Function],
      },
      "label": "SDK Default",
      "licenses": Array [
        "fonts/Raleway/OFL.txt",
      ],
      "localFonts": Object {
        "fonts/Raleway/Raleway-ExtraBold": [Function],
        "fonts/Raleway/Raleway-Medium": [Function],
      },
      "mixins": Object {
        "gutters": [Function],
        "toolbar": Object {
          "@media (min-width:0px) and (orientation: landscape)": Object {
            "minHeight": 48,
          },
          "@media (min-width:600px)": Object {
            "minHeight": 64,
          },
          "minHeight": 56,
        },
      },
      "name": "sdk-default",
      "overrides": Object {},
      "palette": Object {
        "action": Object {
          "activatedOpacity": 0.12,
          "active": "rgba(0, 0, 0, 0.54)",
          "disabled": "rgba(0, 0, 0, 0.26)",
          "disabledBackground": "rgba(0, 0, 0, 0.12)",
          "disabledOpacity": 0.38,
          "focus": "rgba(0, 0, 0, 0.12)",
          "focusOpacity": 0.12,
          "hover": "rgba(0, 0, 0, 0.04)",
          "hoverOpacity": 0.04,
          "selected": "rgba(0, 0, 0, 0.08)",
          "selectedOpacity": 0.08,
        },
        "adjustAlpha": [Function],
        "augmentColor": [Function],
        "background": Object {
          "default": "#FFFFFF",
          "paper": "#fff",
        },
        "common": Object {
          "black": "#000",
          "white": "#fff",
        },
        "contrastThreshold": 3,
        "divider": "rgba(0, 0, 0, 0.12)",
        "error": Object {
          "contrastText": "#fff",
          "dark": "#d32f2f",
          "light": "#e57373",
          "main": "#f44336",
        },
        "getContrastText": [Function],
        "grey": Object {
          "100": "#f5f5f5",
          "200": "#eeeeee",
          "300": "#e0e0e0",
          "400": "#bdbdbd",
          "50": "#fafafa",
          "500": "#9e9e9e",
          "600": "#757575",
          "700": "#616161",
          "800": "#424242",
          "900": "#212121",
          "A100": "#d5d5d5",
          "A200": "#aaaaaa",
          "A400": "#303030",
          "A700": "#616161",
        },
        "info": Object {
          "contrastText": "#fff",
          "dark": "#1976d2",
          "light": "#64b5f6",
          "main": "#2196f3",
        },
        "primary": Object {
          "contrastText": "#fff",
          "dark": "rgb(86, 53, 178)",
          "light": "rgb(150, 112, 255)",
          "main": "#7C4DFF",
        },
        "secondary": Object {
          "contrastText": "rgba(0, 0, 0, 0.87)",
          "dark": "#083575",
          "light": "#01C9EA",
          "main": "#18A9E6",
        },
        "success": Object {
          "contrastText": "rgba(0, 0, 0, 0.87)",
          "dark": "#388e3c",
          "light": "#81c784",
          "main": "#4caf50",
        },
        "text": Object {
          "disabled": "rgba(0, 0, 0, 0.38)",
          "hint": "rgba(0, 0, 0, 0.38)",
          "primary": "#4E4E4E",
          "secondary": "#4E4E4E",
        },
        "tonalOffset": 0.2,
        "type": "light",
        "warning": Object {
          "contrastText": "rgba(0, 0, 0, 0.87)",
          "dark": "#f57c00",
          "light": "#ffb74d",
          "main": "#ff9800",
        },
      },
      "props": Object {},
      "shadows": Array [
        "none",
        "0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12)",
        "0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12)",
        "0px 3px 3px -2px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 1px 8px 0px rgba(0,0,0,0.12)",
        "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
        "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
        "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
        "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
        "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
        "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
        "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
        "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
        "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
        "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
        "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
        "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
        "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
        "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
        "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
        "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
        "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
        "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
        "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
        "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
        "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
      ],
      "shape": Object {
        "borderRadius": 4,
      },
      "spacing": [Function],
      "stylesheets": Array [
        "https://fonts.googleapis.com/css?family=Raleway:500,800&display=swap",
      ],
      "transitions": Object {
        "create": [Function],
        "duration": Object {
          "complex": 375,
          "enteringScreen": 225,
          "leavingScreen": 195,
          "short": 250,
          "shorter": 200,
          "shortest": 150,
          "standard": 300,
        },
        "easing": Object {
          "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
          "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
          "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
          "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
        },
        "getAutoHeightDuration": [Function],
      },
      "typography": Object {
        "body": Object {
          "fontFamily": "\\"Raleway-Medium\\"",
          "fontSize": "0.9375rem",
          "fontWeight": 500,
          "letterSpacing": "0.01071em",
          "lineHeight": 1.43,
        },
        "body1": Object {
          "fontFamily": "\\"Raleway-ExtraBold\\"",
          "fontSize": "1rem",
          "fontWeight": 800,
          "letterSpacing": "0.00938em",
          "lineHeight": 1.5,
        },
        "body2": Object {
          "fontFamily": "\\"Raleway-Medium\\"",
          "fontSize": "0.9375rem",
          "fontWeight": 500,
          "letterSpacing": "0.01071em",
          "lineHeight": 1.43,
        },
        "button": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "0.875rem",
          "fontWeight": 500,
          "letterSpacing": "0.02857em",
          "lineHeight": 1.75,
          "textTransform": "uppercase",
        },
        "caption": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "0.75rem",
          "fontWeight": 400,
          "letterSpacing": "0.03333em",
          "lineHeight": 1.66,
        },
        "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
        "fontSize": 14,
        "fontWeightBold": 800,
        "fontWeightLight": 500,
        "fontWeightMedium": 500,
        "fontWeightRegular": 400,
        "h1": Object {
          "fontFamily": "\\"Raleway-ExtraBold\\"",
          "fontSize": "1.375rem",
          "fontWeight": 800,
          "letterSpacing": "-0.01562em",
          "lineHeight": 1.45,
        },
        "h2": Object {
          "fontFamily": "\\"Raleway-ExtraBold\\"",
          "fontSize": "1.125rem",
          "fontWeight": 800,
          "letterSpacing": "-0.00833em",
          "lineHeight": 1.27,
        },
        "h3": Object {
          "fontFamily": "\\"Raleway-ExtraBold\\"",
          "fontSize": "1.05rem",
          "fontWeight": 800,
          "letterSpacing": "0em",
          "lineHeight": 1.2,
        },
        "h4": Object {
          "fontFamily": "\\"Raleway-ExtraBold\\"",
          "fontSize": "1rem",
          "fontWeight": 800,
          "letterSpacing": "0.00735em",
          "lineHeight": 1.1,
        },
        "h5": Object {
          "fontFamily": "\\"Raleway-ExtraBold\\"",
          "fontSize": "1rem",
          "fontWeight": 800,
          "letterSpacing": "0em",
          "lineHeight": 1,
        },
        "h6": Object {
          "fontFamily": "\\"Raleway-ExtraBold\\"",
          "fontSize": "0.625rem",
          "fontWeight": 800,
          "letterSpacing": "0.0075em",
          "lineHeight": 1,
        },
        "heading": Object {
          "fontFamily": "\\"Raleway-ExtraBold\\"",
          "fontSize": "1rem",
          "fontWeight": 800,
          "letterSpacing": "0.00938em",
          "lineHeight": 1.5,
        },
        "htmlFontSize": 16,
        "overline": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "0.75rem",
          "fontWeight": 400,
          "letterSpacing": "0.08333em",
          "lineHeight": 2.66,
          "textTransform": "uppercase",
        },
        "pxToRem": [Function],
        "round": [Function],
        "subtitle1": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "1rem",
          "fontWeight": 400,
          "letterSpacing": "0.00938em",
          "lineHeight": 1.75,
        },
        "subtitle2": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "0.875rem",
          "fontWeight": 500,
          "letterSpacing": "0.00714em",
          "lineHeight": 1.57,
        },
      },
      "zIndex": Object {
        "appBar": 1100,
        "drawer": 1200,
        "mobileStepper": 1000,
        "modal": 1300,
        "snackbar": 1400,
        "speedDial": 1050,
        "tooltip": 1500,
      },
      Symbol(mui.nested): false,
    }
  }
>
  <StylesProvider
    generateClassName={[Function]}
  >
    <ThemeProvider
      theme={
        Object {
          "breakpoints": Object {
            "between": [Function],
            "down": [Function],
            "keys": Array [
              "xs",
              "sm",
              "md",
              "lg",
              "xl",
            ],
            "only": [Function],
            "up": [Function],
            "values": Object {
              "lg": 1280,
              "md": 960,
              "sm": 600,
              "xl": 1920,
              "xs": 0,
            },
            "width": [Function],
          },
          "direction": "ltr",
          "iconSet": Object {
            "config": Object {
              "cssFiles": Array [
                "css/all.css",
              ],
              "fonts": Array [
                Object {
                  "fontFace": "
font-family: 'Font Awesome 5 Free';
font-style: normal;
font-weight: 900;
font-display: block;",
                  "fontsPath": "./webfonts",
                  "licensePath": "./LICENSE.txt",
                  "source": "fa-solid-900.eot",
                  "sources": Array [
                    Object {
                      "format": "embedded-opentype",
                      "path": "fa-solid-900.eot",
                      "urlAddition": "?#iefix",
                    },
                    Object {
                      "format": "woff2",
                      "path": "fa-solid-900.woff2",
                    },
                    Object {
                      "format": "woff",
                      "path": "fa-solid-900.woff",
                    },
                    Object {
                      "format": "truetype",
                      "path": "fa-solid-900.ttf",
                    },
                    Object {
                      "format": "svg",
                      "path": "fa-solid-900.svg",
                      "urlAddition": "#fontawesome",
                    },
                  ],
                },
              ],
              "label": "Font Awesome Solid",
              "name": "fontawesome-solid",
              "npmModule": "@fortawesome/fontawesome-free",
              "type": 0,
            },
            "iconColor": [Function],
            "styles": [Function],
          },
          "icons": Object {
            "config": Object {
              "cssFiles": Array [
                "css/all.css",
              ],
              "fonts": Array [
                Object {
                  "fontFace": "
font-family: 'Font Awesome 5 Free';
font-style: normal;
font-weight: 900;
font-display: block;",
                  "fontsPath": "./webfonts",
                  "licensePath": "./LICENSE.txt",
                  "source": "fa-solid-900.eot",
                  "sources": Array [
                    Object {
                      "format": "embedded-opentype",
                      "path": "fa-solid-900.eot",
                      "urlAddition": "?#iefix",
                    },
                    Object {
                      "format": "woff2",
                      "path": "fa-solid-900.woff2",
                    },
                    Object {
                      "format": "woff",
                      "path": "fa-solid-900.woff",
                    },
                    Object {
                      "format": "truetype",
                      "path": "fa-solid-900.ttf",
                    },
                    Object {
                      "format": "svg",
                      "path": "fa-solid-900.svg",
                      "urlAddition": "#fontawesome",
                    },
                  ],
                },
              ],
              "label": "Font Awesome Solid",
              "name": "fontawesome-solid",
              "npmModule": "@fortawesome/fontawesome-free",
              "type": 0,
            },
            "iconColor": [Function],
            "styles": [Function],
          },
          "label": "SDK Default",
          "licenses": Array [
            "fonts/Raleway/OFL.txt",
          ],
          "localFonts": Object {
            "fonts/Raleway/Raleway-ExtraBold": [Function],
            "fonts/Raleway/Raleway-Medium": [Function],
          },
          "mixins": Object {
            "gutters": [Function],
            "toolbar": Object {
              "@media (min-width:0px) and (orientation: landscape)": Object {
                "minHeight": 48,
              },
              "@media (min-width:600px)": Object {
                "minHeight": 64,
              },
              "minHeight": 56,
            },
          },
          "name": "sdk-default",
          "overrides": Object {},
          "palette": Object {
            "action": Object {
              "activatedOpacity": 0.12,
              "active": "rgba(0, 0, 0, 0.54)",
              "disabled": "rgba(0, 0, 0, 0.26)",
              "disabledBackground": "rgba(0, 0, 0, 0.12)",
              "disabledOpacity": 0.38,
              "focus": "rgba(0, 0, 0, 0.12)",
              "focusOpacity": 0.12,
              "hover": "rgba(0, 0, 0, 0.04)",
              "hoverOpacity": 0.04,
              "selected": "rgba(0, 0, 0, 0.08)",
              "selectedOpacity": 0.08,
            },
            "adjustAlpha": [Function],
            "augmentColor": [Function],
            "background": Object {
              "default": "#FFFFFF",
              "paper": "#fff",
            },
            "common": Object {
              "black": "#000",
              "white": "#fff",
            },
            "contrastThreshold": 3,
            "divider": "rgba(0, 0, 0, 0.12)",
            "error": Object {
              "contrastText": "#fff",
              "dark": "#d32f2f",
              "light": "#e57373",
              "main": "#f44336",
            },
            "getContrastText": [Function],
            "grey": Object {
              "100": "#f5f5f5",
              "200": "#eeeeee",
              "300": "#e0e0e0",
              "400": "#bdbdbd",
              "50": "#fafafa",
              "500": "#9e9e9e",
              "600": "#757575",
              "700": "#616161",
              "800": "#424242",
              "900": "#212121",
              "A100": "#d5d5d5",
              "A200": "#aaaaaa",
              "A400": "#303030",
              "A700": "#616161",
            },
            "info": Object {
              "contrastText": "#fff",
              "dark": "#1976d2",
              "light": "#64b5f6",
              "main": "#2196f3",
            },
            "primary": Object {
              "contrastText": "#fff",
              "dark": "rgb(86, 53, 178)",
              "light": "rgb(150, 112, 255)",
              "main": "#7C4DFF",
            },
            "secondary": Object {
              "contrastText": "rgba(0, 0, 0, 0.87)",
              "dark": "#083575",
              "light": "#01C9EA",
              "main": "#18A9E6",
            },
            "success": Object {
              "contrastText": "rgba(0, 0, 0, 0.87)",
              "dark": "#388e3c",
              "light": "#81c784",
              "main": "#4caf50",
            },
            "text": Object {
              "disabled": "rgba(0, 0, 0, 0.38)",
              "hint": "rgba(0, 0, 0, 0.38)",
              "primary": "#4E4E4E",
              "secondary": "#4E4E4E",
            },
            "tonalOffset": 0.2,
            "type": "light",
            "warning": Object {
              "contrastText": "rgba(0, 0, 0, 0.87)",
              "dark": "#f57c00",
              "light": "#ffb74d",
              "main": "#ff9800",
            },
          },
          "props": Object {},
          "shadows": Array [
            "none",
            "0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12)",
            "0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12)",
            "0px 3px 3px -2px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 1px 8px 0px rgba(0,0,0,0.12)",
            "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
            "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
            "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
            "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
            "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
            "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
            "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
            "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
            "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
            "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
            "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
            "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
            "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
            "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
            "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
            "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
            "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
            "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
            "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
            "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
            "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
          ],
          "shape": Object {
            "borderRadius": 4,
          },
          "spacing": [Function],
          "stylesheets": Array [
            "https://fonts.googleapis.com/css?family=Raleway:500,800&display=swap",
          ],
          "transitions": Object {
            "create": [Function],
            "duration": Object {
              "complex": 375,
              "enteringScreen": 225,
              "leavingScreen": 195,
              "short": 250,
              "shorter": 200,
              "shortest": 150,
              "standard": 300,
            },
            "easing": Object {
              "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
              "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
              "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
              "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
            },
            "getAutoHeightDuration": [Function],
          },
          "typography": Object {
            "body": Object {
              "fontFamily": "\\"Raleway-Medium\\"",
              "fontSize": "0.9375rem",
              "fontWeight": 500,
              "letterSpacing": "0.01071em",
              "lineHeight": 1.43,
            },
            "body1": Object {
              "fontFamily": "\\"Raleway-ExtraBold\\"",
              "fontSize": "1rem",
              "fontWeight": 800,
              "letterSpacing": "0.00938em",
              "lineHeight": 1.5,
            },
            "body2": Object {
              "fontFamily": "\\"Raleway-Medium\\"",
              "fontSize": "0.9375rem",
              "fontWeight": 500,
              "letterSpacing": "0.01071em",
              "lineHeight": 1.43,
            },
            "button": Object {
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "0.875rem",
              "fontWeight": 500,
              "letterSpacing": "0.02857em",
              "lineHeight": 1.75,
              "textTransform": "uppercase",
            },
            "caption": Object {
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "0.75rem",
              "fontWeight": 400,
              "letterSpacing": "0.03333em",
              "lineHeight": 1.66,
            },
            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
            "fontSize": 14,
            "fontWeightBold": 800,
            "fontWeightLight": 500,
            "fontWeightMedium": 500,
            "fontWeightRegular": 400,
            "h1": Object {
              "fontFamily": "\\"Raleway-ExtraBold\\"",
              "fontSize": "1.375rem",
              "fontWeight": 800,
              "letterSpacing": "-0.01562em",
              "lineHeight": 1.45,
            },
            "h2": Object {
              "fontFamily": "\\"Raleway-ExtraBold\\"",
              "fontSize": "1.125rem",
              "fontWeight": 800,
              "letterSpacing": "-0.00833em",
              "lineHeight": 1.27,
            },
            "h3": Object {
              "fontFamily": "\\"Raleway-ExtraBold\\"",
              "fontSize": "1.05rem",
              "fontWeight": 800,
              "letterSpacing": "0em",
              "lineHeight": 1.2,
            },
            "h4": Object {
              "fontFamily": "\\"Raleway-ExtraBold\\"",
              "fontSize": "1rem",
              "fontWeight": 800,
              "letterSpacing": "0.00735em",
              "lineHeight": 1.1,
            },
            "h5": Object {
              "fontFamily": "\\"Raleway-ExtraBold\\"",
              "fontSize": "1rem",
              "fontWeight": 800,
              "letterSpacing": "0em",
              "lineHeight": 1,
            },
            "h6": Object {
              "fontFamily": "\\"Raleway-ExtraBold\\"",
              "fontSize": "0.625rem",
              "fontWeight": 800,
              "letterSpacing": "0.0075em",
              "lineHeight": 1,
            },
            "heading": Object {
              "fontFamily": "\\"Raleway-ExtraBold\\"",
              "fontSize": "1rem",
              "fontWeight": 800,
              "letterSpacing": "0.00938em",
              "lineHeight": 1.5,
            },
            "htmlFontSize": 16,
            "overline": Object {
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "0.75rem",
              "fontWeight": 400,
              "letterSpacing": "0.08333em",
              "lineHeight": 2.66,
              "textTransform": "uppercase",
            },
            "pxToRem": [Function],
            "round": [Function],
            "subtitle1": Object {
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "1rem",
              "fontWeight": 400,
              "letterSpacing": "0.00938em",
              "lineHeight": 1.75,
            },
            "subtitle2": Object {
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "0.875rem",
              "fontWeight": 500,
              "letterSpacing": "0.00714em",
              "lineHeight": 1.57,
            },
          },
          "zIndex": Object {
            "appBar": 1100,
            "drawer": 1200,
            "mobileStepper": 1000,
            "modal": 1300,
            "snackbar": 1400,
            "speedDial": 1050,
            "tooltip": 1500,
          },
          Symbol(mui.nested): false,
        }
      }
    >
      <ResourceSharing
        dataset={Object {}}
        defaultPermissions={Array []}
        iri="iri"
        name="name"
        permissions={
          Array [
            Object {
              "acl": Object {
                "append": true,
                "control": true,
                "read": true,
                "write": true,
              },
              "alias": "Full Control",
              "profile": Object {
                "webId": "webId",
              },
              "webId": "webId",
            },
            Object {
              "acl": Object {
                "append": true,
                "control": true,
                "read": true,
                "write": true,
              },
              "alias": "Full Control",
              "profile": Object {
                "webId": "agentId",
              },
              "webId": "agentId",
            },
          ]
        }
      >
        <div>
          <WithStyles(ForwardRef(Button))
            onClick={[Function]}
            startIcon={<Memo(ChevronLeftIcon) />}
          >
            <ForwardRef(Button)
              classes={
                Object {
                  "colorInherit": "PodBrowser-colorInherit",
                  "contained": "PodBrowser-contained",
                  "containedPrimary": "PodBrowser-containedPrimary",
                  "containedSecondary": "PodBrowser-containedSecondary",
                  "containedSizeLarge": "PodBrowser-containedSizeLarge",
                  "containedSizeSmall": "PodBrowser-containedSizeSmall",
                  "disableElevation": "PodBrowser-disableElevation",
                  "disabled": "PodBrowser-disabled",
                  "endIcon": "PodBrowser-endIcon",
                  "focusVisible": "PodBrowser-focusVisible",
                  "fullWidth": "PodBrowser-fullWidth",
                  "iconSizeLarge": "PodBrowser-iconSizeLarge",
                  "iconSizeMedium": "PodBrowser-iconSizeMedium",
                  "iconSizeSmall": "PodBrowser-iconSizeSmall",
                  "label": "PodBrowser-label",
                  "outlined": "PodBrowser-outlined",
                  "outlinedPrimary": "PodBrowser-outlinedPrimary",
                  "outlinedSecondary": "PodBrowser-outlinedSecondary",
                  "outlinedSizeLarge": "PodBrowser-outlinedSizeLarge",
                  "outlinedSizeSmall": "PodBrowser-outlinedSizeSmall",
                  "root": "PodBrowser-root",
                  "sizeLarge": "PodBrowser-sizeLarge",
                  "sizeSmall": "PodBrowser-sizeSmall",
                  "startIcon": "PodBrowser-startIcon",
                  "text": "PodBrowser-text",
                  "textPrimary": "PodBrowser-textPrimary",
                  "textSecondary": "PodBrowser-textSecondary",
                  "textSizeLarge": "PodBrowser-textSizeLarge",
                  "textSizeSmall": "PodBrowser-textSizeSmall",
                }
              }
              onClick={[Function]}
              startIcon={<Memo(ChevronLeftIcon) />}
            >
              <WithStyles(ForwardRef(ButtonBase))
                className="PodBrowser-root PodBrowser-text"
                component="button"
                disabled={false}
                focusRipple={true}
                focusVisibleClassName="PodBrowser-focusVisible"
                onClick={[Function]}
                type="button"
              >
                <ForwardRef(ButtonBase)
                  className="PodBrowser-root PodBrowser-text"
                  classes={
                    Object {
                      "disabled": "PodBrowser-disabled",
                      "focusVisible": "PodBrowser-focusVisible",
                      "root": "PodBrowser-root",
                    }
                  }
                  component="button"
                  disabled={false}
                  focusRipple={true}
                  focusVisibleClassName="PodBrowser-focusVisible"
                  onClick={[Function]}
                  type="button"
                >
                  <button
                    className="PodBrowser-root PodBrowser-root PodBrowser-text"
                    disabled={false}
                    onBlur={[Function]}
                    onClick={[Function]}
                    onDragLeave={[Function]}
                    onFocus={[Function]}
                    onKeyDown={[Function]}
                    onKeyUp={[Function]}
                    onMouseDown={[Function]}
                    onMouseLeave={[Function]}
                    onMouseUp={[Function]}
                    onTouchEnd={[Function]}
                    onTouchMove={[Function]}
                    onTouchStart={[Function]}
                    tabIndex={0}
                    type="button"
                  >
                    <span
                      className="PodBrowser-label"
                    >
                      <span
                        className="PodBrowser-startIcon PodBrowser-iconSizeMedium"
                      >
                        <ForwardRef>
                          <WithStyles(ForwardRef(SvgIcon))>
                            <ForwardRef(SvgIcon)
                              classes={
                                Object {
                                  "colorAction": "PodBrowser-colorAction",
                                  "colorDisabled": "PodBrowser-colorDisabled",
                                  "colorError": "PodBrowser-colorError",
                                  "colorPrimary": "PodBrowser-colorPrimary",
                                  "colorSecondary": "PodBrowser-colorSecondary",
                                  "fontSizeInherit": "PodBrowser-fontSizeInherit",
                                  "fontSizeLarge": "PodBrowser-fontSizeLarge",
                                  "fontSizeSmall": "PodBrowser-fontSizeSmall",
                                  "root": "PodBrowser-root",
                                }
                              }
                            >
                              <svg
                                aria-hidden={true}
                                className="PodBrowser-root"
                                focusable="false"
                                viewBox="0 0 24 24"
                              >
                                <path
                                  d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"
                                />
                              </svg>
                            </ForwardRef(SvgIcon)>
                          </WithStyles(ForwardRef(SvgIcon))>
                        </ForwardRef>
                      </span>
                      Details
                    </span>
                    <WithStyles(memo)
                      center={false}
                    >
                      <ForwardRef(TouchRipple)
                        center={false}
                        classes={
                          Object {
                            "child": "PodBrowser-child",
                            "childLeaving": "PodBrowser-childLeaving",
                            "childPulsate": "PodBrowser-childPulsate",
                            "ripple": "PodBrowser-ripple",
                            "ripplePulsate": "PodBrowser-ripplePulsate",
                            "rippleVisible": "PodBrowser-rippleVisible",
                            "root": "PodBrowser-root",
                          }
                        }
                      >
                        <span
                          className="PodBrowser-root"
                        >
                          <TransitionGroup
                            childFactory={[Function]}
                            component={null}
                            exit={true}
                          />
                        </span>
                      </ForwardRef(TouchRipple)>
                    </WithStyles(memo)>
                  </button>
                </ForwardRef(ButtonBase)>
              </WithStyles(ForwardRef(ButtonBase))>
            </ForwardRef(Button)>
          </WithStyles(ForwardRef(Button))>
        </div>
        <WithStyles(ForwardRef(Divider))>
          <ForwardRef(Divider)
            classes={
              Object {
                "absolute": "PodBrowser-absolute",
                "flexItem": "PodBrowser-flexItem",
                "inset": "PodBrowser-inset",
                "light": "PodBrowser-light",
                "middle": "PodBrowser-middle",
                "root": "PodBrowser-root",
                "vertical": "PodBrowser-vertical",
              }
            }
          >
            <hr
              className="PodBrowser-root"
            />
          </ForwardRef(Divider)>
        </WithStyles(ForwardRef(Divider))>
        <section
          className="PodBrowser-headerSection"
        >
          <h3
            className="PodBrowser-content-h3"
            title="iri"
          >
            name
          </h3>
        </section>
        <WithStyles(ForwardRef(Divider))>
          <ForwardRef(Divider)
            classes={
              Object {
                "absolute": "PodBrowser-absolute",
                "flexItem": "PodBrowser-flexItem",
                "inset": "PodBrowser-inset",
                "light": "PodBrowser-light",
                "middle": "PodBrowser-middle",
                "root": "PodBrowser-root",
                "vertical": "PodBrowser-vertical",
              }
            }
          >
            <hr
              className="PodBrowser-root"
            />
          </ForwardRef(Divider)>
        </WithStyles(ForwardRef(Divider))>
        <section
          className="PodBrowser-centeredSection"
        >
          <h5
            className="PodBrowser-content-h5"
          >
            My Access
          </h5>
          <AgentAccessList
            iri="iri"
            onSave={[Function]}
            onSubmit={[Function]}
            permissions={
              Array [
                Object {
                  "acl": Object {
                    "append": true,
                    "control": true,
                    "read": true,
                    "write": true,
                  },
                  "alias": "Full Control",
                  "profile": Object {
                    "webId": "webId",
                  },
                  "webId": "webId",
                },
              ]
            }
            saveFn={[Function]}
            warn={true}
          >
            <WithStyles(ForwardRef(List))>
              <ForwardRef(List)
                classes={
                  Object {
                    "dense": "PodBrowser-dense",
                    "padding": "PodBrowser-padding",
                    "root": "PodBrowser-root",
                    "subheader": "PodBrowser-subheader",
                  }
                }
              >
                <ul
                  className="PodBrowser-root PodBrowser-padding"
                >
                  <WithStyles(ForwardRef(ListItem))
                    className="PodBrowser-listItem"
                    key="webId"
                  >
                    <ForwardRef(ListItem)
                      className="PodBrowser-listItem"
                      classes={
                        Object {
                          "alignItemsFlexStart": "PodBrowser-alignItemsFlexStart",
                          "button": "PodBrowser-button",
                          "container": "PodBrowser-container",
                          "dense": "PodBrowser-dense",
                          "disabled": "PodBrowser-disabled",
                          "divider": "PodBrowser-divider",
                          "focusVisible": "PodBrowser-focusVisible",
                          "gutters": "PodBrowser-gutters",
                          "root": "PodBrowser-root",
                          "secondaryAction": "PodBrowser-secondaryAction",
                          "selected": "PodBrowser-selected",
                        }
                      }
                    >
                      <li
                        className="PodBrowser-root PodBrowser-listItem PodBrowser-gutters"
                        disabled={false}
                      >
                        <WithStyles(ForwardRef(Avatar))
                          alt="webId"
                          className="PodBrowser-avatar"
                          key=".0"
                        >
                          <ForwardRef(Avatar)
                            alt="webId"
                            className="PodBrowser-avatar"
                            classes={
                              Object {
                                "circle": "PodBrowser-circle",
                                "colorDefault": "PodBrowser-colorDefault",
                                "fallback": "PodBrowser-fallback",
                                "img": "PodBrowser-img",
                                "root": "PodBrowser-root",
                                "rounded": "PodBrowser-rounded",
                                "square": "PodBrowser-square",
                              }
                            }
                          >
                            <div
                              className="PodBrowser-root PodBrowser-circle PodBrowser-avatar PodBrowser-colorDefault"
                            >
                              <ForwardRef(PersonIcon)
                                className="PodBrowser-fallback"
                              >
                                <WithStyles(ForwardRef(SvgIcon))
                                  className="PodBrowser-fallback"
                                >
                                  <ForwardRef(SvgIcon)
                                    className="PodBrowser-fallback"
                                    classes={
                                      Object {
                                        "colorAction": "PodBrowser-colorAction",
                                        "colorDisabled": "PodBrowser-colorDisabled",
                                        "colorError": "PodBrowser-colorError",
                                        "colorPrimary": "PodBrowser-colorPrimary",
                                        "colorSecondary": "PodBrowser-colorSecondary",
                                        "fontSizeInherit": "PodBrowser-fontSizeInherit",
                                        "fontSizeLarge": "PodBrowser-fontSizeLarge",
                                        "fontSizeSmall": "PodBrowser-fontSizeSmall",
                                        "root": "PodBrowser-root",
                                      }
                                    }
                                  >
                                    <svg
                                      aria-hidden={true}
                                      className="PodBrowser-root PodBrowser-fallback"
                                      focusable="false"
                                      viewBox="0 0 24 24"
                                    >
                                      <path
                                        d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"
                                      />
                                    </svg>
                                  </ForwardRef(SvgIcon)>
                                </WithStyles(ForwardRef(SvgIcon))>
                              </ForwardRef(PersonIcon)>
                            </div>
                          </ForwardRef(Avatar)>
                        </WithStyles(ForwardRef(Avatar))>
                        <WithStyles(ForwardRef(Typography))
                          className="PodBrowser-detailText"
                          key=".1"
                        >
                          <ForwardRef(Typography)
                            className="PodBrowser-detailText"
                            classes={
                              Object {
                                "alignCenter": "PodBrowser-alignCenter",
                                "alignJustify": "PodBrowser-alignJustify",
                                "alignLeft": "PodBrowser-alignLeft",
                                "alignRight": "PodBrowser-alignRight",
                                "body1": "PodBrowser-body1",
                                "body2": "PodBrowser-body2",
                                "button": "PodBrowser-button",
                                "caption": "PodBrowser-caption",
                                "colorError": "PodBrowser-colorError",
                                "colorInherit": "PodBrowser-colorInherit",
                                "colorPrimary": "PodBrowser-colorPrimary",
                                "colorSecondary": "PodBrowser-colorSecondary",
                                "colorTextPrimary": "PodBrowser-colorTextPrimary",
                                "colorTextSecondary": "PodBrowser-colorTextSecondary",
                                "displayBlock": "PodBrowser-displayBlock",
                                "displayInline": "PodBrowser-displayInline",
                                "gutterBottom": "PodBrowser-gutterBottom",
                                "h1": "PodBrowser-h1",
                                "h2": "PodBrowser-h2",
                                "h3": "PodBrowser-h3",
                                "h4": "PodBrowser-h4",
                                "h5": "PodBrowser-h5",
                                "h6": "PodBrowser-h6",
                                "noWrap": "PodBrowser-noWrap",
                                "overline": "PodBrowser-overline",
                                "paragraph": "PodBrowser-paragraph",
                                "root": "PodBrowser-root",
                                "srOnly": "PodBrowser-srOnly",
                                "subtitle1": "PodBrowser-subtitle1",
                                "subtitle2": "PodBrowser-subtitle2",
                              }
                            }
                          >
                            <p
                              className="PodBrowser-root PodBrowser-detailText PodBrowser-body1"
                            >
                              webId
                            </p>
                          </ForwardRef(Typography)>
                        </WithStyles(ForwardRef(Typography))>
                        <PermissionsForm
                          key=".$webId"
                          onSave={[Function]}
                          permission={
                            Object {
                              "acl": Object {
                                "append": true,
                                "control": true,
                                "read": true,
                                "write": true,
                              },
                              "alias": "Full Control",
                              "profile": Object {
                                "webId": "webId",
                              },
                              "webId": "webId",
                            }
                          }
                          warnOnSubmit={true}
                        >
                          <div
                            className="PodBrowser-container"
                          >
                            <WithStyles(ForwardRef(Button))
                              className="PodBrowser-summary"
                              endIcon={<Memo(KeyboardArrowDownIcon) />}
                              onClick={[Function]}
                            >
                              <ForwardRef(Button)
                                className="PodBrowser-summary"
                                classes={
                                  Object {
                                    "colorInherit": "PodBrowser-colorInherit",
                                    "contained": "PodBrowser-contained",
                                    "containedPrimary": "PodBrowser-containedPrimary",
                                    "containedSecondary": "PodBrowser-containedSecondary",
                                    "containedSizeLarge": "PodBrowser-containedSizeLarge",
                                    "containedSizeSmall": "PodBrowser-containedSizeSmall",
                                    "disableElevation": "PodBrowser-disableElevation",
                                    "disabled": "PodBrowser-disabled",
                                    "endIcon": "PodBrowser-endIcon",
                                    "focusVisible": "PodBrowser-focusVisible",
                                    "fullWidth": "PodBrowser-fullWidth",
                                    "iconSizeLarge": "PodBrowser-iconSizeLarge",
                                    "iconSizeMedium": "PodBrowser-iconSizeMedium",
                                    "iconSizeSmall": "PodBrowser-iconSizeSmall",
                                    "label": "PodBrowser-label",
                                    "outlined": "PodBrowser-outlined",
                                    "outlinedPrimary": "PodBrowser-outlinedPrimary",
                                    "outlinedSecondary": "PodBrowser-outlinedSecondary",
                                    "outlinedSizeLarge": "PodBrowser-outlinedSizeLarge",
                                    "outlinedSizeSmall": "PodBrowser-outlinedSizeSmall",
                                    "root": "PodBrowser-root",
                                    "sizeLarge": "PodBrowser-sizeLarge",
                                    "sizeSmall": "PodBrowser-sizeSmall",
                                    "startIcon": "PodBrowser-startIcon",
                                    "text": "PodBrowser-text",
                                    "textPrimary": "PodBrowser-textPrimary",
                                    "textSecondary": "PodBrowser-textSecondary",
                                    "textSizeLarge": "PodBrowser-textSizeLarge",
                                    "textSizeSmall": "PodBrowser-textSizeSmall",
                                  }
                                }
                                endIcon={<Memo(KeyboardArrowDownIcon) />}
                                onClick={[Function]}
                              >
                                <WithStyles(ForwardRef(ButtonBase))
                                  className="PodBrowser-root PodBrowser-text PodBrowser-summary"
                                  component="button"
                                  disabled={false}
                                  focusRipple={true}
                                  focusVisibleClassName="PodBrowser-focusVisible"
                                  onClick={[Function]}
                                  type="button"
                                >
                                  <ForwardRef(ButtonBase)
                                    className="PodBrowser-root PodBrowser-text PodBrowser-summary"
                                    classes={
                                      Object {
                                        "disabled": "PodBrowser-disabled",
                                        "focusVisible": "PodBrowser-focusVisible",
                                        "root": "PodBrowser-root",
                                      }
                                    }
                                    component="button"
                                    disabled={false}
                                    focusRipple={true}
                                    focusVisibleClassName="PodBrowser-focusVisible"
                                    onClick={[Function]}
                                    type="button"
                                  >
                                    <button
                                      className="PodBrowser-root PodBrowser-root PodBrowser-text PodBrowser-summary"
                                      disabled={false}
                                      onBlur={[Function]}
                                      onClick={[Function]}
                                      onDragLeave={[Function]}
                                      onFocus={[Function]}
                                      onKeyDown={[Function]}
                                      onKeyUp={[Function]}
                                      onMouseDown={[Function]}
                                      onMouseLeave={[Function]}
                                      onMouseUp={[Function]}
                                      onTouchEnd={[Function]}
                                      onTouchMove={[Function]}
                                      onTouchStart={[Function]}
                                      tabIndex={0}
                                      type="button"
                                    >
                                      <span
                                        className="PodBrowser-label"
                                      >
                                        <span>
                                          Control
                                        </span>
                                        <span
                                          className="PodBrowser-endIcon PodBrowser-iconSizeMedium"
                                        >
                                          <ForwardRef>
                                            <WithStyles(ForwardRef(SvgIcon))>
                                              <ForwardRef(SvgIcon)
                                                classes={
                                                  Object {
                                                    "colorAction": "PodBrowser-colorAction",
                                                    "colorDisabled": "PodBrowser-colorDisabled",
                                                    "colorError": "PodBrowser-colorError",
                                                    "colorPrimary": "PodBrowser-colorPrimary",
                                                    "colorSecondary": "PodBrowser-colorSecondary",
                                                    "fontSizeInherit": "PodBrowser-fontSizeInherit",
                                                    "fontSizeLarge": "PodBrowser-fontSizeLarge",
                                                    "fontSizeSmall": "PodBrowser-fontSizeSmall",
                                                    "root": "PodBrowser-root",
                                                  }
                                                }
                                              >
                                                <svg
                                                  aria-hidden={true}
                                                  className="PodBrowser-root"
                                                  focusable="false"
                                                  viewBox="0 0 24 24"
                                                >
                                                  <path
                                                    d="M7.41 8.59L12 13.17l4.59-4.58L18 10l-6 6-6-6 1.41-1.41z"
                                                  />
                                                </svg>
                                              </ForwardRef(SvgIcon)>
                                            </WithStyles(ForwardRef(SvgIcon))>
                                          </ForwardRef>
                                        </span>
                                      </span>
                                      <WithStyles(memo)
                                        center={false}
                                      >
                                        <ForwardRef(TouchRipple)
                                          center={false}
                                          classes={
                                            Object {
                                              "child": "PodBrowser-child",
                                              "childLeaving": "PodBrowser-childLeaving",
                                              "childPulsate": "PodBrowser-childPulsate",
                                              "ripple": "PodBrowser-ripple",
                                              "ripplePulsate": "PodBrowser-ripplePulsate",
                                              "rippleVisible": "PodBrowser-rippleVisible",
                                              "root": "PodBrowser-root",
                                            }
                                          }
                                        >
                                          <span
                                            className="PodBrowser-root"
                                          >
                                            <TransitionGroup
                                              childFactory={[Function]}
                                              component={null}
                                              exit={true}
                                            />
                                          </span>
                                        </ForwardRef(TouchRipple)>
                                      </WithStyles(memo)>
                                    </button>
                                  </ForwardRef(ButtonBase)>
                                </WithStyles(ForwardRef(ButtonBase))>
                              </ForwardRef(Button)>
                            </WithStyles(ForwardRef(Button))>
                            <section
                              className="PodBrowser-selectionClosed"
                            >
                              <WithStyles(ForwardRef(List))>
                                <ForwardRef(List)
                                  classes={
                                    Object {
                                      "dense": "PodBrowser-dense",
                                      "padding": "PodBrowser-padding",
                                      "root": "PodBrowser-root",
                                      "subheader": "PodBrowser-subheader",
                                    }
                                  }
                                >
                                  <ul
                                    className="PodBrowser-root PodBrowser-padding"
                                  >
                                    <PermissionCheckbox
                                      classes={
                                        Object {
                                          "checkbox": "PodBrowser-checkbox",
                                          "container": "PodBrowser-container",
                                          "label": "PodBrowser-label",
                                          "listItem": "PodBrowser-listItem",
                                          "selectionClosed": "PodBrowser-selectionClosed",
                                          "selectionOpen": "PodBrowser-selectionOpen",
                                          "summary": "PodBrowser-summary",
                                        }
                                      }
                                      label="View"
                                      onChange={[Function]}
                                      value={true}
                                    >
                                      <WithStyles(ForwardRef(ListItem))
                                        className="PodBrowser-listItem"
                                      >
                                        <ForwardRef(ListItem)
                                          className="PodBrowser-listItem"
                                          classes={
                                            Object {
                                              "alignItemsFlexStart": "PodBrowser-alignItemsFlexStart",
                                              "button": "PodBrowser-button",
                                              "container": "PodBrowser-container",
                                              "dense": "PodBrowser-dense",
                                              "disabled": "PodBrowser-disabled",
                                              "divider": "PodBrowser-divider",
                                              "focusVisible": "PodBrowser-focusVisible",
                                              "gutters": "PodBrowser-gutters",
                                              "root": "PodBrowser-root",
                                              "secondaryAction": "PodBrowser-secondaryAction",
                                              "selected": "PodBrowser-selected",
                                            }
                                          }
                                        >
                                          <li
                                            className="PodBrowser-root PodBrowser-listItem PodBrowser-gutters"
                                            disabled={false}
                                          >
                                            <WithStyles(ForwardRef(FormControlLabel))
                                              classes={
                                                Object {
                                                  "label": "PodBrowser-label",
                                                }
                                              }
                                              control={
                                                <WithStyles(ForwardRef(Checkbox))
                                                  checked={true}
                                                  classes={
                                                    Object {
                                                      "root": "PodBrowser-checkbox",
                                                    }
                                                  }
                                                  name="view"
                                                  onChange={[Function]}
                                                />
                                              }
                                              key=".0"
                                              label="View"
                                            >
                                              <ForwardRef(FormControlLabel)
                                                classes={
                                                  Object {
                                                    "disabled": "PodBrowser-disabled",
                                                    "label": "PodBrowser-label PodBrowser-label",
                                                    "labelPlacementBottom": "PodBrowser-labelPlacementBottom",
                                                    "labelPlacementStart": "PodBrowser-labelPlacementStart",
                                                    "labelPlacementTop": "PodBrowser-labelPlacementTop",
                                                    "root": "PodBrowser-root",
                                                  }
                                                }
                                                control={
                                                  <WithStyles(ForwardRef(Checkbox))
                                                    checked={true}
                                                    classes={
                                                      Object {
                                                        "root": "PodBrowser-checkbox",
                                                      }
                                                    }
                                                    name="view"
                                                    onChange={[Function]}
                                                  />
                                                }
                                                label="View"
                                              >
                                                <label
                                                  className="PodBrowser-root"
                                                >
                                                  <WithStyles(ForwardRef(Checkbox))
                                                    checked={true}
                                                    classes={
                                                      Object {
                                                        "root": "PodBrowser-checkbox",
                                                      }
                                                    }
                                                    name="view"
                                                    onChange={[Function]}
                                                  >
                                                    <ForwardRef(Checkbox)
                                                      checked={true}
                                                      classes={
                                                        Object {
                                                          "checked": "PodBrowser-checked",
                                                          "colorPrimary": "PodBrowser-colorPrimary",
                                                          "colorSecondary": "PodBrowser-colorSecondary",
                                                          "disabled": "PodBrowser-disabled",
                                                          "indeterminate": "PodBrowser-indeterminate",
                                                          "root": "PodBrowser-root PodBrowser-checkbox",
                                                        }
                                                      }
                                                      name="view"
                                                      onChange={[Function]}
                                                    >
                                                      <WithStyles(ForwardRef(SwitchBase))
                                                        checked={true}
                                                        checkedIcon={<Memo />}
                                                        classes={
                                                          Object {
                                                            "checked": "PodBrowser-checked",
                                                            "disabled": "PodBrowser-disabled",
                                                            "root": "PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary",
                                                          }
                                                        }
                                                        color="secondary"
                                                        icon={<Memo />}
                                                        inputProps={
                                                          Object {
                                                            "data-indeterminate": false,
                                                          }
                                                        }
                                                        name="view"
                                                        onChange={[Function]}
                                                        type="checkbox"
                                                      >
                                                        <ForwardRef(SwitchBase)
                                                          checked={true}
                                                          checkedIcon={<Memo />}
                                                          classes={
                                                            Object {
                                                              "checked": "PodBrowser-checked PodBrowser-checked",
                                                              "disabled": "PodBrowser-disabled PodBrowser-disabled",
                                                              "input": "PodBrowser-input",
                                                              "root": "PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary",
                                                            }
                                                          }
                                                          color="secondary"
                                                          icon={<Memo />}
                                                          inputProps={
                                                            Object {
                                                              "data-indeterminate": false,
                                                            }
                                                          }
                                                          name="view"
                                                          onChange={[Function]}
                                                          type="checkbox"
                                                        >
                                                          <WithStyles(ForwardRef(IconButton))
                                                            className="PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary PodBrowser-checked PodBrowser-checked"
                                                            color="secondary"
                                                            component="span"
                                                            onBlur={[Function]}
                                                            onFocus={[Function]}
                                                            tabIndex={null}
                                                          >
                                                            <ForwardRef(IconButton)
                                                              className="PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary PodBrowser-checked PodBrowser-checked"
                                                              classes={
                                                                Object {
                                                                  "colorInherit": "PodBrowser-colorInherit",
                                                                  "colorPrimary": "PodBrowser-colorPrimary",
                                                                  "colorSecondary": "PodBrowser-colorSecondary",
                                                                  "disabled": "PodBrowser-disabled",
                                                                  "edgeEnd": "PodBrowser-edgeEnd",
                                                                  "edgeStart": "PodBrowser-edgeStart",
                                                                  "label": "PodBrowser-label",
                                                                  "root": "PodBrowser-root",
                                                                  "sizeSmall": "PodBrowser-sizeSmall",
                                                                }
                                                              }
                                                              color="secondary"
                                                              component="span"
                                                              onBlur={[Function]}
                                                              onFocus={[Function]}
                                                              tabIndex={null}
                                                            >
                                                              <WithStyles(ForwardRef(ButtonBase))
                                                                centerRipple={true}
                                                                className="PodBrowser-root PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary PodBrowser-checked PodBrowser-checked PodBrowser-colorSecondary"
                                                                component="span"
                                                                disabled={false}
                                                                focusRipple={true}
                                                                onBlur={[Function]}
                                                                onFocus={[Function]}
                                                                tabIndex={null}
                                                              >
                                                                <ForwardRef(ButtonBase)
                                                                  centerRipple={true}
                                                                  className="PodBrowser-root PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary PodBrowser-checked PodBrowser-checked PodBrowser-colorSecondary"
                                                                  classes={
                                                                    Object {
                                                                      "disabled": "PodBrowser-disabled",
                                                                      "focusVisible": "PodBrowser-focusVisible",
                                                                      "root": "PodBrowser-root",
                                                                    }
                                                                  }
                                                                  component="span"
                                                                  disabled={false}
                                                                  focusRipple={true}
                                                                  onBlur={[Function]}
                                                                  onFocus={[Function]}
                                                                  tabIndex={null}
                                                                >
                                                                  <span
                                                                    aria-disabled={false}
                                                                    className="PodBrowser-root PodBrowser-root PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary PodBrowser-checked PodBrowser-checked PodBrowser-colorSecondary"
                                                                    onBlur={[Function]}
                                                                    onDragLeave={[Function]}
                                                                    onFocus={[Function]}
                                                                    onKeyDown={[Function]}
                                                                    onKeyUp={[Function]}
                                                                    onMouseDown={[Function]}
                                                                    onMouseLeave={[Function]}
                                                                    onMouseUp={[Function]}
                                                                    onTouchEnd={[Function]}
                                                                    onTouchMove={[Function]}
                                                                    onTouchStart={[Function]}
                                                                    tabIndex={null}
                                                                  >
                                                                    <span
                                                                      className="PodBrowser-label"
                                                                    >
                                                                      <input
                                                                        checked={true}
                                                                        className="PodBrowser-input"
                                                                        data-indeterminate={false}
                                                                        name="view"
                                                                        onChange={[Function]}
                                                                        type="checkbox"
                                                                      />
                                                                      <ForwardRef(CheckBoxIcon)>
                                                                        <WithStyles(ForwardRef(SvgIcon))>
                                                                          <ForwardRef(SvgIcon)
                                                                            classes={
                                                                              Object {
                                                                                "colorAction": "PodBrowser-colorAction",
                                                                                "colorDisabled": "PodBrowser-colorDisabled",
                                                                                "colorError": "PodBrowser-colorError",
                                                                                "colorPrimary": "PodBrowser-colorPrimary",
                                                                                "colorSecondary": "PodBrowser-colorSecondary",
                                                                                "fontSizeInherit": "PodBrowser-fontSizeInherit",
                                                                                "fontSizeLarge": "PodBrowser-fontSizeLarge",
                                                                                "fontSizeSmall": "PodBrowser-fontSizeSmall",
                                                                                "root": "PodBrowser-root",
                                                                              }
                                                                            }
                                                                          >
                                                                            <svg
                                                                              aria-hidden={true}
                                                                              className="PodBrowser-root"
                                                                              focusable="false"
                                                                              viewBox="0 0 24 24"
                                                                            >
                                                                              <path
                                                                                d="M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"
                                                                              />
                                                                            </svg>
                                                                          </ForwardRef(SvgIcon)>
                                                                        </WithStyles(ForwardRef(SvgIcon))>
                                                                      </ForwardRef(CheckBoxIcon)>
                                                                    </span>
                                                                    <WithStyles(memo)
                                                                      center={true}
                                                                    >
                                                                      <ForwardRef(TouchRipple)
                                                                        center={true}
                                                                        classes={
                                                                          Object {
                                                                            "child": "PodBrowser-child",
                                                                            "childLeaving": "PodBrowser-childLeaving",
                                                                            "childPulsate": "PodBrowser-childPulsate",
                                                                            "ripple": "PodBrowser-ripple",
                                                                            "ripplePulsate": "PodBrowser-ripplePulsate",
                                                                            "rippleVisible": "PodBrowser-rippleVisible",
                                                                            "root": "PodBrowser-root",
                                                                          }
                                                                        }
                                                                      >
                                                                        <span
                                                                          className="PodBrowser-root"
                                                                        >
                                                                          <TransitionGroup
                                                                            childFactory={[Function]}
                                                                            component={null}
                                                                            exit={true}
                                                                          />
                                                                        </span>
                                                                      </ForwardRef(TouchRipple)>
                                                                    </WithStyles(memo)>
                                                                  </span>
                                                                </ForwardRef(ButtonBase)>
                                                              </WithStyles(ForwardRef(ButtonBase))>
                                                            </ForwardRef(IconButton)>
                                                          </WithStyles(ForwardRef(IconButton))>
                                                        </ForwardRef(SwitchBase)>
                                                      </WithStyles(ForwardRef(SwitchBase))>
                                                    </ForwardRef(Checkbox)>
                                                  </WithStyles(ForwardRef(Checkbox))>
                                                  <WithStyles(ForwardRef(Typography))
                                                    className="PodBrowser-label PodBrowser-label"
                                                    component="span"
                                                  >
                                                    <ForwardRef(Typography)
                                                      className="PodBrowser-label PodBrowser-label"
                                                      classes={
                                                        Object {
                                                          "alignCenter": "PodBrowser-alignCenter",
                                                          "alignJustify": "PodBrowser-alignJustify",
                                                          "alignLeft": "PodBrowser-alignLeft",
                                                          "alignRight": "PodBrowser-alignRight",
                                                          "body1": "PodBrowser-body1",
                                                          "body2": "PodBrowser-body2",
                                                          "button": "PodBrowser-button",
                                                          "caption": "PodBrowser-caption",
                                                          "colorError": "PodBrowser-colorError",
                                                          "colorInherit": "PodBrowser-colorInherit",
                                                          "colorPrimary": "PodBrowser-colorPrimary",
                                                          "colorSecondary": "PodBrowser-colorSecondary",
                                                          "colorTextPrimary": "PodBrowser-colorTextPrimary",
                                                          "colorTextSecondary": "PodBrowser-colorTextSecondary",
                                                          "displayBlock": "PodBrowser-displayBlock",
                                                          "displayInline": "PodBrowser-displayInline",
                                                          "gutterBottom": "PodBrowser-gutterBottom",
                                                          "h1": "PodBrowser-h1",
                                                          "h2": "PodBrowser-h2",
                                                          "h3": "PodBrowser-h3",
                                                          "h4": "PodBrowser-h4",
                                                          "h5": "PodBrowser-h5",
                                                          "h6": "PodBrowser-h6",
                                                          "noWrap": "PodBrowser-noWrap",
                                                          "overline": "PodBrowser-overline",
                                                          "paragraph": "PodBrowser-paragraph",
                                                          "root": "PodBrowser-root",
                                                          "srOnly": "PodBrowser-srOnly",
                                                          "subtitle1": "PodBrowser-subtitle1",
                                                          "subtitle2": "PodBrowser-subtitle2",
                                                        }
                                                      }
                                                      component="span"
                                                    >
                                                      <span
                                                        className="PodBrowser-root PodBrowser-label PodBrowser-label PodBrowser-body1"
                                                      >
                                                        View
                                                      </span>
                                                    </ForwardRef(Typography)>
                                                  </WithStyles(ForwardRef(Typography))>
                                                </label>
                                              </ForwardRef(FormControlLabel)>
                                            </WithStyles(ForwardRef(FormControlLabel))>
                                          </li>
                                        </ForwardRef(ListItem)>
                                      </WithStyles(ForwardRef(ListItem))>
                                    </PermissionCheckbox>
                                    <PermissionCheckbox
                                      classes={
                                        Object {
                                          "checkbox": "PodBrowser-checkbox",
                                          "container": "PodBrowser-container",
                                          "label": "PodBrowser-label",
                                          "listItem": "PodBrowser-listItem",
                                          "selectionClosed": "PodBrowser-selectionClosed",
                                          "selectionOpen": "PodBrowser-selectionOpen",
                                          "summary": "PodBrowser-summary",
                                        }
                                      }
                                      label="Edit"
                                      onChange={[Function]}
                                      value={true}
                                    >
                                      <WithStyles(ForwardRef(ListItem))
                                        className="PodBrowser-listItem"
                                      >
                                        <ForwardRef(ListItem)
                                          className="PodBrowser-listItem"
                                          classes={
                                            Object {
                                              "alignItemsFlexStart": "PodBrowser-alignItemsFlexStart",
                                              "button": "PodBrowser-button",
                                              "container": "PodBrowser-container",
                                              "dense": "PodBrowser-dense",
                                              "disabled": "PodBrowser-disabled",
                                              "divider": "PodBrowser-divider",
                                              "focusVisible": "PodBrowser-focusVisible",
                                              "gutters": "PodBrowser-gutters",
                                              "root": "PodBrowser-root",
                                              "secondaryAction": "PodBrowser-secondaryAction",
                                              "selected": "PodBrowser-selected",
                                            }
                                          }
                                        >
                                          <li
                                            className="PodBrowser-root PodBrowser-listItem PodBrowser-gutters"
                                            disabled={false}
                                          >
                                            <WithStyles(ForwardRef(FormControlLabel))
                                              classes={
                                                Object {
                                                  "label": "PodBrowser-label",
                                                }
                                              }
                                              control={
                                                <WithStyles(ForwardRef(Checkbox))
                                                  checked={true}
                                                  classes={
                                                    Object {
                                                      "root": "PodBrowser-checkbox",
                                                    }
                                                  }
                                                  name="edit"
                                                  onChange={[Function]}
                                                />
                                              }
                                              key=".0"
                                              label="Edit"
                                            >
                                              <ForwardRef(FormControlLabel)
                                                classes={
                                                  Object {
                                                    "disabled": "PodBrowser-disabled",
                                                    "label": "PodBrowser-label PodBrowser-label",
                                                    "labelPlacementBottom": "PodBrowser-labelPlacementBottom",
                                                    "labelPlacementStart": "PodBrowser-labelPlacementStart",
                                                    "labelPlacementTop": "PodBrowser-labelPlacementTop",
                                                    "root": "PodBrowser-root",
                                                  }
                                                }
                                                control={
                                                  <WithStyles(ForwardRef(Checkbox))
                                                    checked={true}
                                                    classes={
                                                      Object {
                                                        "root": "PodBrowser-checkbox",
                                                      }
                                                    }
                                                    name="edit"
                                                    onChange={[Function]}
                                                  />
                                                }
                                                label="Edit"
                                              >
                                                <label
                                                  className="PodBrowser-root"
                                                >
                                                  <WithStyles(ForwardRef(Checkbox))
                                                    checked={true}
                                                    classes={
                                                      Object {
                                                        "root": "PodBrowser-checkbox",
                                                      }
                                                    }
                                                    name="edit"
                                                    onChange={[Function]}
                                                  >
                                                    <ForwardRef(Checkbox)
                                                      checked={true}
                                                      classes={
                                                        Object {
                                                          "checked": "PodBrowser-checked",
                                                          "colorPrimary": "PodBrowser-colorPrimary",
                                                          "colorSecondary": "PodBrowser-colorSecondary",
                                                          "disabled": "PodBrowser-disabled",
                                                          "indeterminate": "PodBrowser-indeterminate",
                                                          "root": "PodBrowser-root PodBrowser-checkbox",
                                                        }
                                                      }
                                                      name="edit"
                                                      onChange={[Function]}
                                                    >
                                                      <WithStyles(ForwardRef(SwitchBase))
                                                        checked={true}
                                                        checkedIcon={<Memo />}
                                                        classes={
                                                          Object {
                                                            "checked": "PodBrowser-checked",
                                                            "disabled": "PodBrowser-disabled",
                                                            "root": "PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary",
                                                          }
                                                        }
                                                        color="secondary"
                                                        icon={<Memo />}
                                                        inputProps={
                                                          Object {
                                                            "data-indeterminate": false,
                                                          }
                                                        }
                                                        name="edit"
                                                        onChange={[Function]}
                                                        type="checkbox"
                                                      >
                                                        <ForwardRef(SwitchBase)
                                                          checked={true}
                                                          checkedIcon={<Memo />}
                                                          classes={
                                                            Object {
                                                              "checked": "PodBrowser-checked PodBrowser-checked",
                                                              "disabled": "PodBrowser-disabled PodBrowser-disabled",
                                                              "input": "PodBrowser-input",
                                                              "root": "PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary",
                                                            }
                                                          }
                                                          color="secondary"
                                                          icon={<Memo />}
                                                          inputProps={
                                                            Object {
                                                              "data-indeterminate": false,
                                                            }
                                                          }
                                                          name="edit"
                                                          onChange={[Function]}
                                                          type="checkbox"
                                                        >
                                                          <WithStyles(ForwardRef(IconButton))
                                                            className="PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary PodBrowser-checked PodBrowser-checked"
                                                            color="secondary"
                                                            component="span"
                                                            onBlur={[Function]}
                                                            onFocus={[Function]}
                                                            tabIndex={null}
                                                          >
                                                            <ForwardRef(IconButton)
                                                              className="PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary PodBrowser-checked PodBrowser-checked"
                                                              classes={
                                                                Object {
                                                                  "colorInherit": "PodBrowser-colorInherit",
                                                                  "colorPrimary": "PodBrowser-colorPrimary",
                                                                  "colorSecondary": "PodBrowser-colorSecondary",
                                                                  "disabled": "PodBrowser-disabled",
                                                                  "edgeEnd": "PodBrowser-edgeEnd",
                                                                  "edgeStart": "PodBrowser-edgeStart",
                                                                  "label": "PodBrowser-label",
                                                                  "root": "PodBrowser-root",
                                                                  "sizeSmall": "PodBrowser-sizeSmall",
                                                                }
                                                              }
                                                              color="secondary"
                                                              component="span"
                                                              onBlur={[Function]}
                                                              onFocus={[Function]}
                                                              tabIndex={null}
                                                            >
                                                              <WithStyles(ForwardRef(ButtonBase))
                                                                centerRipple={true}
                                                                className="PodBrowser-root PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary PodBrowser-checked PodBrowser-checked PodBrowser-colorSecondary"
                                                                component="span"
                                                                disabled={false}
                                                                focusRipple={true}
                                                                onBlur={[Function]}
                                                                onFocus={[Function]}
                                                                tabIndex={null}
                                                              >
                                                                <ForwardRef(ButtonBase)
                                                                  centerRipple={true}
                                                                  className="PodBrowser-root PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary PodBrowser-checked PodBrowser-checked PodBrowser-colorSecondary"
                                                                  classes={
                                                                    Object {
                                                                      "disabled": "PodBrowser-disabled",
                                                                      "focusVisible": "PodBrowser-focusVisible",
                                                                      "root": "PodBrowser-root",
                                                                    }
                                                                  }
                                                                  component="span"
                                                                  disabled={false}
                                                                  focusRipple={true}
                                                                  onBlur={[Function]}
                                                                  onFocus={[Function]}
                                                                  tabIndex={null}
                                                                >
                                                                  <span
                                                                    aria-disabled={false}
                                                                    className="PodBrowser-root PodBrowser-root PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary PodBrowser-checked PodBrowser-checked PodBrowser-colorSecondary"
                                                                    onBlur={[Function]}
                                                                    onDragLeave={[Function]}
                                                                    onFocus={[Function]}
                                                                    onKeyDown={[Function]}
                                                                    onKeyUp={[Function]}
                                                                    onMouseDown={[Function]}
                                                                    onMouseLeave={[Function]}
                                                                    onMouseUp={[Function]}
                                                                    onTouchEnd={[Function]}
                                                                    onTouchMove={[Function]}
                                                                    onTouchStart={[Function]}
                                                                    tabIndex={null}
                                                                  >
                                                                    <span
                                                                      className="PodBrowser-label"
                                                                    >
                                                                      <input
                                                                        checked={true}
                                                                        className="PodBrowser-input"
                                                                        data-indeterminate={false}
                                                                        name="edit"
                                                                        onChange={[Function]}
                                                                        type="checkbox"
                                                                      />
                                                                      <ForwardRef(CheckBoxIcon)>
                                                                        <WithStyles(ForwardRef(SvgIcon))>
                                                                          <ForwardRef(SvgIcon)
                                                                            classes={
                                                                              Object {
                                                                                "colorAction": "PodBrowser-colorAction",
                                                                                "colorDisabled": "PodBrowser-colorDisabled",
                                                                                "colorError": "PodBrowser-colorError",
                                                                                "colorPrimary": "PodBrowser-colorPrimary",
                                                                                "colorSecondary": "PodBrowser-colorSecondary",
                                                                                "fontSizeInherit": "PodBrowser-fontSizeInherit",
                                                                                "fontSizeLarge": "PodBrowser-fontSizeLarge",
                                                                                "fontSizeSmall": "PodBrowser-fontSizeSmall",
                                                                                "root": "PodBrowser-root",
                                                                              }
                                                                            }
                                                                          >
                                                                            <svg
                                                                              aria-hidden={true}
                                                                              className="PodBrowser-root"
                                                                              focusable="false"
                                                                              viewBox="0 0 24 24"
                                                                            >
                                                                              <path
                                                                                d="M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"
                                                                              />
                                                                            </svg>
                                                                          </ForwardRef(SvgIcon)>
                                                                        </WithStyles(ForwardRef(SvgIcon))>
                                                                      </ForwardRef(CheckBoxIcon)>
                                                                    </span>
                                                                    <WithStyles(memo)
                                                                      center={true}
                                                                    >
                                                                      <ForwardRef(TouchRipple)
                                                                        center={true}
                                                                        classes={
                                                                          Object {
                                                                            "child": "PodBrowser-child",
                                                                            "childLeaving": "PodBrowser-childLeaving",
                                                                            "childPulsate": "PodBrowser-childPulsate",
                                                                            "ripple": "PodBrowser-ripple",
                                                                            "ripplePulsate": "PodBrowser-ripplePulsate",
                                                                            "rippleVisible": "PodBrowser-rippleVisible",
                                                                            "root": "PodBrowser-root",
                                                                          }
                                                                        }
                                                                      >
                                                                        <span
                                                                          className="PodBrowser-root"
                                                                        >
                                                                          <TransitionGroup
                                                                            childFactory={[Function]}
                                                                            component={null}
                                                                            exit={true}
                                                                          />
                                                                        </span>
                                                                      </ForwardRef(TouchRipple)>
                                                                    </WithStyles(memo)>
                                                                  </span>
                                                                </ForwardRef(ButtonBase)>
                                                              </WithStyles(ForwardRef(ButtonBase))>
                                                            </ForwardRef(IconButton)>
                                                          </WithStyles(ForwardRef(IconButton))>
                                                        </ForwardRef(SwitchBase)>
                                                      </WithStyles(ForwardRef(SwitchBase))>
                                                    </ForwardRef(Checkbox)>
                                                  </WithStyles(ForwardRef(Checkbox))>
                                                  <WithStyles(ForwardRef(Typography))
                                                    className="PodBrowser-label PodBrowser-label"
                                                    component="span"
                                                  >
                                                    <ForwardRef(Typography)
                                                      className="PodBrowser-label PodBrowser-label"
                                                      classes={
                                                        Object {
                                                          "alignCenter": "PodBrowser-alignCenter",
                                                          "alignJustify": "PodBrowser-alignJustify",
                                                          "alignLeft": "PodBrowser-alignLeft",
                                                          "alignRight": "PodBrowser-alignRight",
                                                          "body1": "PodBrowser-body1",
                                                          "body2": "PodBrowser-body2",
                                                          "button": "PodBrowser-button",
                                                          "caption": "PodBrowser-caption",
                                                          "colorError": "PodBrowser-colorError",
                                                          "colorInherit": "PodBrowser-colorInherit",
                                                          "colorPrimary": "PodBrowser-colorPrimary",
                                                          "colorSecondary": "PodBrowser-colorSecondary",
                                                          "colorTextPrimary": "PodBrowser-colorTextPrimary",
                                                          "colorTextSecondary": "PodBrowser-colorTextSecondary",
                                                          "displayBlock": "PodBrowser-displayBlock",
                                                          "displayInline": "PodBrowser-displayInline",
                                                          "gutterBottom": "PodBrowser-gutterBottom",
                                                          "h1": "PodBrowser-h1",
                                                          "h2": "PodBrowser-h2",
                                                          "h3": "PodBrowser-h3",
                                                          "h4": "PodBrowser-h4",
                                                          "h5": "PodBrowser-h5",
                                                          "h6": "PodBrowser-h6",
                                                          "noWrap": "PodBrowser-noWrap",
                                                          "overline": "PodBrowser-overline",
                                                          "paragraph": "PodBrowser-paragraph",
                                                          "root": "PodBrowser-root",
                                                          "srOnly": "PodBrowser-srOnly",
                                                          "subtitle1": "PodBrowser-subtitle1",
                                                          "subtitle2": "PodBrowser-subtitle2",
                                                        }
                                                      }
                                                      component="span"
                                                    >
                                                      <span
                                                        className="PodBrowser-root PodBrowser-label PodBrowser-label PodBrowser-body1"
                                                      >
                                                        Edit
                                                      </span>
                                                    </ForwardRef(Typography)>
                                                  </WithStyles(ForwardRef(Typography))>
                                                </label>
                                              </ForwardRef(FormControlLabel)>
                                            </WithStyles(ForwardRef(FormControlLabel))>
                                          </li>
                                        </ForwardRef(ListItem)>
                                      </WithStyles(ForwardRef(ListItem))>
                                    </PermissionCheckbox>
                                    <PermissionCheckbox
                                      classes={
                                        Object {
                                          "checkbox": "PodBrowser-checkbox",
                                          "container": "PodBrowser-container",
                                          "label": "PodBrowser-label",
                                          "listItem": "PodBrowser-listItem",
                                          "selectionClosed": "PodBrowser-selectionClosed",
                                          "selectionOpen": "PodBrowser-selectionOpen",
                                          "summary": "PodBrowser-summary",
                                        }
                                      }
                                      label="Append"
                                      onChange={[Function]}
                                      value={true}
                                    >
                                      <WithStyles(ForwardRef(ListItem))
                                        className="PodBrowser-listItem"
                                      >
                                        <ForwardRef(ListItem)
                                          className="PodBrowser-listItem"
                                          classes={
                                            Object {
                                              "alignItemsFlexStart": "PodBrowser-alignItemsFlexStart",
                                              "button": "PodBrowser-button",
                                              "container": "PodBrowser-container",
                                              "dense": "PodBrowser-dense",
                                              "disabled": "PodBrowser-disabled",
                                              "divider": "PodBrowser-divider",
                                              "focusVisible": "PodBrowser-focusVisible",
                                              "gutters": "PodBrowser-gutters",
                                              "root": "PodBrowser-root",
                                              "secondaryAction": "PodBrowser-secondaryAction",
                                              "selected": "PodBrowser-selected",
                                            }
                                          }
                                        >
                                          <li
                                            className="PodBrowser-root PodBrowser-listItem PodBrowser-gutters"
                                            disabled={false}
                                          >
                                            <WithStyles(ForwardRef(FormControlLabel))
                                              classes={
                                                Object {
                                                  "label": "PodBrowser-label",
                                                }
                                              }
                                              control={
                                                <WithStyles(ForwardRef(Checkbox))
                                                  checked={true}
                                                  classes={
                                                    Object {
                                                      "root": "PodBrowser-checkbox",
                                                    }
                                                  }
                                                  name="append"
                                                  onChange={[Function]}
                                                />
                                              }
                                              key=".0"
                                              label="Append"
                                            >
                                              <ForwardRef(FormControlLabel)
                                                classes={
                                                  Object {
                                                    "disabled": "PodBrowser-disabled",
                                                    "label": "PodBrowser-label PodBrowser-label",
                                                    "labelPlacementBottom": "PodBrowser-labelPlacementBottom",
                                                    "labelPlacementStart": "PodBrowser-labelPlacementStart",
                                                    "labelPlacementTop": "PodBrowser-labelPlacementTop",
                                                    "root": "PodBrowser-root",
                                                  }
                                                }
                                                control={
                                                  <WithStyles(ForwardRef(Checkbox))
                                                    checked={true}
                                                    classes={
                                                      Object {
                                                        "root": "PodBrowser-checkbox",
                                                      }
                                                    }
                                                    name="append"
                                                    onChange={[Function]}
                                                  />
                                                }
                                                label="Append"
                                              >
                                                <label
                                                  className="PodBrowser-root"
                                                >
                                                  <WithStyles(ForwardRef(Checkbox))
                                                    checked={true}
                                                    classes={
                                                      Object {
                                                        "root": "PodBrowser-checkbox",
                                                      }
                                                    }
                                                    name="append"
                                                    onChange={[Function]}
                                                  >
                                                    <ForwardRef(Checkbox)
                                                      checked={true}
                                                      classes={
                                                        Object {
                                                          "checked": "PodBrowser-checked",
                                                          "colorPrimary": "PodBrowser-colorPrimary",
                                                          "colorSecondary": "PodBrowser-colorSecondary",
                                                          "disabled": "PodBrowser-disabled",
                                                          "indeterminate": "PodBrowser-indeterminate",
                                                          "root": "PodBrowser-root PodBrowser-checkbox",
                                                        }
                                                      }
                                                      name="append"
                                                      onChange={[Function]}
                                                    >
                                                      <WithStyles(ForwardRef(SwitchBase))
                                                        checked={true}
                                                        checkedIcon={<Memo />}
                                                        classes={
                                                          Object {
                                                            "checked": "PodBrowser-checked",
                                                            "disabled": "PodBrowser-disabled",
                                                            "root": "PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary",
                                                          }
                                                        }
                                                        color="secondary"
                                                        icon={<Memo />}
                                                        inputProps={
                                                          Object {
                                                            "data-indeterminate": false,
                                                          }
                                                        }
                                                        name="append"
                                                        onChange={[Function]}
                                                        type="checkbox"
                                                      >
                                                        <ForwardRef(SwitchBase)
                                                          checked={true}
                                                          checkedIcon={<Memo />}
                                                          classes={
                                                            Object {
                                                              "checked": "PodBrowser-checked PodBrowser-checked",
                                                              "disabled": "PodBrowser-disabled PodBrowser-disabled",
                                                              "input": "PodBrowser-input",
                                                              "root": "PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary",
                                                            }
                                                          }
                                                          color="secondary"
                                                          icon={<Memo />}
                                                          inputProps={
                                                            Object {
                                                              "data-indeterminate": false,
                                                            }
                                                          }
                                                          name="append"
                                                          onChange={[Function]}
                                                          type="checkbox"
                                                        >
                                                          <WithStyles(ForwardRef(IconButton))
                                                            className="PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary PodBrowser-checked PodBrowser-checked"
                                                            color="secondary"
                                                            component="span"
                                                            onBlur={[Function]}
                                                            onFocus={[Function]}
                                                            tabIndex={null}
                                                          >
                                                            <ForwardRef(IconButton)
                                                              className="PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary PodBrowser-checked PodBrowser-checked"
                                                              classes={
                                                                Object {
                                                                  "colorInherit": "PodBrowser-colorInherit",
                                                                  "colorPrimary": "PodBrowser-colorPrimary",
                                                                  "colorSecondary": "PodBrowser-colorSecondary",
                                                                  "disabled": "PodBrowser-disabled",
                                                                  "edgeEnd": "PodBrowser-edgeEnd",
                                                                  "edgeStart": "PodBrowser-edgeStart",
                                                                  "label": "PodBrowser-label",
                                                                  "root": "PodBrowser-root",
                                                                  "sizeSmall": "PodBrowser-sizeSmall",
                                                                }
                                                              }
                                                              color="secondary"
                                                              component="span"
                                                              onBlur={[Function]}
                                                              onFocus={[Function]}
                                                              tabIndex={null}
                                                            >
                                                              <WithStyles(ForwardRef(ButtonBase))
                                                                centerRipple={true}
                                                                className="PodBrowser-root PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary PodBrowser-checked PodBrowser-checked PodBrowser-colorSecondary"
                                                                component="span"
                                                                disabled={false}
                                                                focusRipple={true}
                                                                onBlur={[Function]}
                                                                onFocus={[Function]}
                                                                tabIndex={null}
                                                              >
                                                                <ForwardRef(ButtonBase)
                                                                  centerRipple={true}
                                                                  className="PodBrowser-root PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary PodBrowser-checked PodBrowser-checked PodBrowser-colorSecondary"
                                                                  classes={
                                                                    Object {
                                                                      "disabled": "PodBrowser-disabled",
                                                                      "focusVisible": "PodBrowser-focusVisible",
                                                                      "root": "PodBrowser-root",
                                                                    }
                                                                  }
                                                                  component="span"
                                                                  disabled={false}
                                                                  focusRipple={true}
                                                                  onBlur={[Function]}
                                                                  onFocus={[Function]}
                                                                  tabIndex={null}
                                                                >
                                                                  <span
                                                                    aria-disabled={false}
                                                                    className="PodBrowser-root PodBrowser-root PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary PodBrowser-checked PodBrowser-checked PodBrowser-colorSecondary"
                                                                    onBlur={[Function]}
                                                                    onDragLeave={[Function]}
                                                                    onFocus={[Function]}
                                                                    onKeyDown={[Function]}
                                                                    onKeyUp={[Function]}
                                                                    onMouseDown={[Function]}
                                                                    onMouseLeave={[Function]}
                                                                    onMouseUp={[Function]}
                                                                    onTouchEnd={[Function]}
                                                                    onTouchMove={[Function]}
                                                                    onTouchStart={[Function]}
                                                                    tabIndex={null}
                                                                  >
                                                                    <span
                                                                      className="PodBrowser-label"
                                                                    >
                                                                      <input
                                                                        checked={true}
                                                                        className="PodBrowser-input"
                                                                        data-indeterminate={false}
                                                                        name="append"
                                                                        onChange={[Function]}
                                                                        type="checkbox"
                                                                      />
                                                                      <ForwardRef(CheckBoxIcon)>
                                                                        <WithStyles(ForwardRef(SvgIcon))>
                                                                          <ForwardRef(SvgIcon)
                                                                            classes={
                                                                              Object {
                                                                                "colorAction": "PodBrowser-colorAction",
                                                                                "colorDisabled": "PodBrowser-colorDisabled",
                                                                                "colorError": "PodBrowser-colorError",
                                                                                "colorPrimary": "PodBrowser-colorPrimary",
                                                                                "colorSecondary": "PodBrowser-colorSecondary",
                                                                                "fontSizeInherit": "PodBrowser-fontSizeInherit",
                                                                                "fontSizeLarge": "PodBrowser-fontSizeLarge",
                                                                                "fontSizeSmall": "PodBrowser-fontSizeSmall",
                                                                                "root": "PodBrowser-root",
                                                                              }
                                                                            }
                                                                          >
                                                                            <svg
                                                                              aria-hidden={true}
                                                                              className="PodBrowser-root"
                                                                              focusable="false"
                                                                              viewBox="0 0 24 24"
                                                                            >
                                                                              <path
                                                                                d="M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"
                                                                              />
                                                                            </svg>
                                                                          </ForwardRef(SvgIcon)>
                                                                        </WithStyles(ForwardRef(SvgIcon))>
                                                                      </ForwardRef(CheckBoxIcon)>
                                                                    </span>
                                                                    <WithStyles(memo)
                                                                      center={true}
                                                                    >
                                                                      <ForwardRef(TouchRipple)
                                                                        center={true}
                                                                        classes={
                                                                          Object {
                                                                            "child": "PodBrowser-child",
                                                                            "childLeaving": "PodBrowser-childLeaving",
                                                                            "childPulsate": "PodBrowser-childPulsate",
                                                                            "ripple": "PodBrowser-ripple",
                                                                            "ripplePulsate": "PodBrowser-ripplePulsate",
                                                                            "rippleVisible": "PodBrowser-rippleVisible",
                                                                            "root": "PodBrowser-root",
                                                                          }
                                                                        }
                                                                      >
                                                                        <span
                                                                          className="PodBrowser-root"
                                                                        >
                                                                          <TransitionGroup
                                                                            childFactory={[Function]}
                                                                            component={null}
                                                                            exit={true}
                                                                          />
                                                                        </span>
                                                                      </ForwardRef(TouchRipple)>
                                                                    </WithStyles(memo)>
                                                                  </span>
                                                                </ForwardRef(ButtonBase)>
                                                              </WithStyles(ForwardRef(ButtonBase))>
                                                            </ForwardRef(IconButton)>
                                                          </WithStyles(ForwardRef(IconButton))>
                                                        </ForwardRef(SwitchBase)>
                                                      </WithStyles(ForwardRef(SwitchBase))>
                                                    </ForwardRef(Checkbox)>
                                                  </WithStyles(ForwardRef(Checkbox))>
                                                  <WithStyles(ForwardRef(Typography))
                                                    className="PodBrowser-label PodBrowser-label"
                                                    component="span"
                                                  >
                                                    <ForwardRef(Typography)
                                                      className="PodBrowser-label PodBrowser-label"
                                                      classes={
                                                        Object {
                                                          "alignCenter": "PodBrowser-alignCenter",
                                                          "alignJustify": "PodBrowser-alignJustify",
                                                          "alignLeft": "PodBrowser-alignLeft",
                                                          "alignRight": "PodBrowser-alignRight",
                                                          "body1": "PodBrowser-body1",
                                                          "body2": "PodBrowser-body2",
                                                          "button": "PodBrowser-button",
                                                          "caption": "PodBrowser-caption",
                                                          "colorError": "PodBrowser-colorError",
                                                          "colorInherit": "PodBrowser-colorInherit",
                                                          "colorPrimary": "PodBrowser-colorPrimary",
                                                          "colorSecondary": "PodBrowser-colorSecondary",
                                                          "colorTextPrimary": "PodBrowser-colorTextPrimary",
                                                          "colorTextSecondary": "PodBrowser-colorTextSecondary",
                                                          "displayBlock": "PodBrowser-displayBlock",
                                                          "displayInline": "PodBrowser-displayInline",
                                                          "gutterBottom": "PodBrowser-gutterBottom",
                                                          "h1": "PodBrowser-h1",
                                                          "h2": "PodBrowser-h2",
                                                          "h3": "PodBrowser-h3",
                                                          "h4": "PodBrowser-h4",
                                                          "h5": "PodBrowser-h5",
                                                          "h6": "PodBrowser-h6",
                                                          "noWrap": "PodBrowser-noWrap",
                                                          "overline": "PodBrowser-overline",
                                                          "paragraph": "PodBrowser-paragraph",
                                                          "root": "PodBrowser-root",
                                                          "srOnly": "PodBrowser-srOnly",
                                                          "subtitle1": "PodBrowser-subtitle1",
                                                          "subtitle2": "PodBrowser-subtitle2",
                                                        }
                                                      }
                                                      component="span"
                                                    >
                                                      <span
                                                        className="PodBrowser-root PodBrowser-label PodBrowser-label PodBrowser-body1"
                                                      >
                                                        Append
                                                      </span>
                                                    </ForwardRef(Typography)>
                                                  </WithStyles(ForwardRef(Typography))>
                                                </label>
                                              </ForwardRef(FormControlLabel)>
                                            </WithStyles(ForwardRef(FormControlLabel))>
                                          </li>
                                        </ForwardRef(ListItem)>
                                      </WithStyles(ForwardRef(ListItem))>
                                    </PermissionCheckbox>
                                    <PermissionCheckbox
                                      classes={
                                        Object {
                                          "checkbox": "PodBrowser-checkbox",
                                          "container": "PodBrowser-container",
                                          "label": "PodBrowser-label",
                                          "listItem": "PodBrowser-listItem",
                                          "selectionClosed": "PodBrowser-selectionClosed",
                                          "selectionOpen": "PodBrowser-selectionOpen",
                                          "summary": "PodBrowser-summary",
                                        }
                                      }
                                      label="Control"
                                      onChange={[Function]}
                                      value={true}
                                    >
                                      <WithStyles(ForwardRef(ListItem))
                                        className="PodBrowser-listItem"
                                      >
                                        <ForwardRef(ListItem)
                                          className="PodBrowser-listItem"
                                          classes={
                                            Object {
                                              "alignItemsFlexStart": "PodBrowser-alignItemsFlexStart",
                                              "button": "PodBrowser-button",
                                              "container": "PodBrowser-container",
                                              "dense": "PodBrowser-dense",
                                              "disabled": "PodBrowser-disabled",
                                              "divider": "PodBrowser-divider",
                                              "focusVisible": "PodBrowser-focusVisible",
                                              "gutters": "PodBrowser-gutters",
                                              "root": "PodBrowser-root",
                                              "secondaryAction": "PodBrowser-secondaryAction",
                                              "selected": "PodBrowser-selected",
                                            }
                                          }
                                        >
                                          <li
                                            className="PodBrowser-root PodBrowser-listItem PodBrowser-gutters"
                                            disabled={false}
                                          >
                                            <WithStyles(ForwardRef(FormControlLabel))
                                              classes={
                                                Object {
                                                  "label": "PodBrowser-label",
                                                }
                                              }
                                              control={
                                                <WithStyles(ForwardRef(Checkbox))
                                                  checked={true}
                                                  classes={
                                                    Object {
                                                      "root": "PodBrowser-checkbox",
                                                    }
                                                  }
                                                  name="control"
                                                  onChange={[Function]}
                                                />
                                              }
                                              key=".0"
                                              label="Control"
                                            >
                                              <ForwardRef(FormControlLabel)
                                                classes={
                                                  Object {
                                                    "disabled": "PodBrowser-disabled",
                                                    "label": "PodBrowser-label PodBrowser-label",
                                                    "labelPlacementBottom": "PodBrowser-labelPlacementBottom",
                                                    "labelPlacementStart": "PodBrowser-labelPlacementStart",
                                                    "labelPlacementTop": "PodBrowser-labelPlacementTop",
                                                    "root": "PodBrowser-root",
                                                  }
                                                }
                                                control={
                                                  <WithStyles(ForwardRef(Checkbox))
                                                    checked={true}
                                                    classes={
                                                      Object {
                                                        "root": "PodBrowser-checkbox",
                                                      }
                                                    }
                                                    name="control"
                                                    onChange={[Function]}
                                                  />
                                                }
                                                label="Control"
                                              >
                                                <label
                                                  className="PodBrowser-root"
                                                >
                                                  <WithStyles(ForwardRef(Checkbox))
                                                    checked={true}
                                                    classes={
                                                      Object {
                                                        "root": "PodBrowser-checkbox",
                                                      }
                                                    }
                                                    name="control"
                                                    onChange={[Function]}
                                                  >
                                                    <ForwardRef(Checkbox)
                                                      checked={true}
                                                      classes={
                                                        Object {
                                                          "checked": "PodBrowser-checked",
                                                          "colorPrimary": "PodBrowser-colorPrimary",
                                                          "colorSecondary": "PodBrowser-colorSecondary",
                                                          "disabled": "PodBrowser-disabled",
                                                          "indeterminate": "PodBrowser-indeterminate",
                                                          "root": "PodBrowser-root PodBrowser-checkbox",
                                                        }
                                                      }
                                                      name="control"
                                                      onChange={[Function]}
                                                    >
                                                      <WithStyles(ForwardRef(SwitchBase))
                                                        checked={true}
                                                        checkedIcon={<Memo />}
                                                        classes={
                                                          Object {
                                                            "checked": "PodBrowser-checked",
                                                            "disabled": "PodBrowser-disabled",
                                                            "root": "PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary",
                                                          }
                                                        }
                                                        color="secondary"
                                                        icon={<Memo />}
                                                        inputProps={
                                                          Object {
                                                            "data-indeterminate": false,
                                                          }
                                                        }
                                                        name="control"
                                                        onChange={[Function]}
                                                        type="checkbox"
                                                      >
                                                        <ForwardRef(SwitchBase)
                                                          checked={true}
                                                          checkedIcon={<Memo />}
                                                          classes={
                                                            Object {
                                                              "checked": "PodBrowser-checked PodBrowser-checked",
                                                              "disabled": "PodBrowser-disabled PodBrowser-disabled",
                                                              "input": "PodBrowser-input",
                                                              "root": "PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary",
                                                            }
                                                          }
                                                          color="secondary"
                                                          icon={<Memo />}
                                                          inputProps={
                                                            Object {
                                                              "data-indeterminate": false,
                                                            }
                                                          }
                                                          name="control"
                                                          onChange={[Function]}
                                                          type="checkbox"
                                                        >
                                                          <WithStyles(ForwardRef(IconButton))
                                                            className="PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary PodBrowser-checked PodBrowser-checked"
                                                            color="secondary"
                                                            component="span"
                                                            onBlur={[Function]}
                                                            onFocus={[Function]}
                                                            tabIndex={null}
                                                          >
                                                            <ForwardRef(IconButton)
                                                              className="PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary PodBrowser-checked PodBrowser-checked"
                                                              classes={
                                                                Object {
                                                                  "colorInherit": "PodBrowser-colorInherit",
                                                                  "colorPrimary": "PodBrowser-colorPrimary",
                                                                  "colorSecondary": "PodBrowser-colorSecondary",
                                                                  "disabled": "PodBrowser-disabled",
                                                                  "edgeEnd": "PodBrowser-edgeEnd",
                                                                  "edgeStart": "PodBrowser-edgeStart",
                                                                  "label": "PodBrowser-label",
                                                                  "root": "PodBrowser-root",
                                                                  "sizeSmall": "PodBrowser-sizeSmall",
                                                                }
                                                              }
                                                              color="secondary"
                                                              component="span"
                                                              onBlur={[Function]}
                                                              onFocus={[Function]}
                                                              tabIndex={null}
                                                            >
                                                              <WithStyles(ForwardRef(ButtonBase))
                                                                centerRipple={true}
                                                                className="PodBrowser-root PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary PodBrowser-checked PodBrowser-checked PodBrowser-colorSecondary"
                                                                component="span"
                                                                disabled={false}
                                                                focusRipple={true}
                                                                onBlur={[Function]}
                                                                onFocus={[Function]}
                                                                tabIndex={null}
                                                              >
                                                                <ForwardRef(ButtonBase)
                                                                  centerRipple={true}
                                                                  className="PodBrowser-root PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary PodBrowser-checked PodBrowser-checked PodBrowser-colorSecondary"
                                                                  classes={
                                                                    Object {
                                                                      "disabled": "PodBrowser-disabled",
                                                                      "focusVisible": "PodBrowser-focusVisible",
                                                                      "root": "PodBrowser-root",
                                                                    }
                                                                  }
                                                                  component="span"
                                                                  disabled={false}
                                                                  focusRipple={true}
                                                                  onBlur={[Function]}
                                                                  onFocus={[Function]}
                                                                  tabIndex={null}
                                                                >
                                                                  <span
                                                                    aria-disabled={false}
                                                                    className="PodBrowser-root PodBrowser-root PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary PodBrowser-checked PodBrowser-checked PodBrowser-colorSecondary"
                                                                    onBlur={[Function]}
                                                                    onDragLeave={[Function]}
                                                                    onFocus={[Function]}
                                                                    onKeyDown={[Function]}
                                                                    onKeyUp={[Function]}
                                                                    onMouseDown={[Function]}
                                                                    onMouseLeave={[Function]}
                                                                    onMouseUp={[Function]}
                                                                    onTouchEnd={[Function]}
                                                                    onTouchMove={[Function]}
                                                                    onTouchStart={[Function]}
                                                                    tabIndex={null}
                                                                  >
                                                                    <span
                                                                      className="PodBrowser-label"
                                                                    >
                                                                      <input
                                                                        checked={true}
                                                                        className="PodBrowser-input"
                                                                        data-indeterminate={false}
                                                                        name="control"
                                                                        onChange={[Function]}
                                                                        type="checkbox"
                                                                      />
                                                                      <ForwardRef(CheckBoxIcon)>
                                                                        <WithStyles(ForwardRef(SvgIcon))>
                                                                          <ForwardRef(SvgIcon)
                                                                            classes={
                                                                              Object {
                                                                                "colorAction": "PodBrowser-colorAction",
                                                                                "colorDisabled": "PodBrowser-colorDisabled",
                                                                                "colorError": "PodBrowser-colorError",
                                                                                "colorPrimary": "PodBrowser-colorPrimary",
                                                                                "colorSecondary": "PodBrowser-colorSecondary",
                                                                                "fontSizeInherit": "PodBrowser-fontSizeInherit",
                                                                                "fontSizeLarge": "PodBrowser-fontSizeLarge",
                                                                                "fontSizeSmall": "PodBrowser-fontSizeSmall",
                                                                                "root": "PodBrowser-root",
                                                                              }
                                                                            }
                                                                          >
                                                                            <svg
                                                                              aria-hidden={true}
                                                                              className="PodBrowser-root"
                                                                              focusable="false"
                                                                              viewBox="0 0 24 24"
                                                                            >
                                                                              <path
                                                                                d="M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"
                                                                              />
                                                                            </svg>
                                                                          </ForwardRef(SvgIcon)>
                                                                        </WithStyles(ForwardRef(SvgIcon))>
                                                                      </ForwardRef(CheckBoxIcon)>
                                                                    </span>
                                                                    <WithStyles(memo)
                                                                      center={true}
                                                                    >
                                                                      <ForwardRef(TouchRipple)
                                                                        center={true}
                                                                        classes={
                                                                          Object {
                                                                            "child": "PodBrowser-child",
                                                                            "childLeaving": "PodBrowser-childLeaving",
                                                                            "childPulsate": "PodBrowser-childPulsate",
                                                                            "ripple": "PodBrowser-ripple",
                                                                            "ripplePulsate": "PodBrowser-ripplePulsate",
                                                                            "rippleVisible": "PodBrowser-rippleVisible",
                                                                            "root": "PodBrowser-root",
                                                                          }
                                                                        }
                                                                      >
                                                                        <span
                                                                          className="PodBrowser-root"
                                                                        >
                                                                          <TransitionGroup
                                                                            childFactory={[Function]}
                                                                            component={null}
                                                                            exit={true}
                                                                          />
                                                                        </span>
                                                                      </ForwardRef(TouchRipple)>
                                                                    </WithStyles(memo)>
                                                                  </span>
                                                                </ForwardRef(ButtonBase)>
                                                              </WithStyles(ForwardRef(ButtonBase))>
                                                            </ForwardRef(IconButton)>
                                                          </WithStyles(ForwardRef(IconButton))>
                                                        </ForwardRef(SwitchBase)>
                                                      </WithStyles(ForwardRef(SwitchBase))>
                                                    </ForwardRef(Checkbox)>
                                                  </WithStyles(ForwardRef(Checkbox))>
                                                  <WithStyles(ForwardRef(Typography))
                                                    className="PodBrowser-label PodBrowser-label"
                                                    component="span"
                                                  >
                                                    <ForwardRef(Typography)
                                                      className="PodBrowser-label PodBrowser-label"
                                                      classes={
                                                        Object {
                                                          "alignCenter": "PodBrowser-alignCenter",
                                                          "alignJustify": "PodBrowser-alignJustify",
                                                          "alignLeft": "PodBrowser-alignLeft",
                                                          "alignRight": "PodBrowser-alignRight",
                                                          "body1": "PodBrowser-body1",
                                                          "body2": "PodBrowser-body2",
                                                          "button": "PodBrowser-button",
                                                          "caption": "PodBrowser-caption",
                                                          "colorError": "PodBrowser-colorError",
                                                          "colorInherit": "PodBrowser-colorInherit",
                                                          "colorPrimary": "PodBrowser-colorPrimary",
                                                          "colorSecondary": "PodBrowser-colorSecondary",
                                                          "colorTextPrimary": "PodBrowser-colorTextPrimary",
                                                          "colorTextSecondary": "PodBrowser-colorTextSecondary",
                                                          "displayBlock": "PodBrowser-displayBlock",
                                                          "displayInline": "PodBrowser-displayInline",
                                                          "gutterBottom": "PodBrowser-gutterBottom",
                                                          "h1": "PodBrowser-h1",
                                                          "h2": "PodBrowser-h2",
                                                          "h3": "PodBrowser-h3",
                                                          "h4": "PodBrowser-h4",
                                                          "h5": "PodBrowser-h5",
                                                          "h6": "PodBrowser-h6",
                                                          "noWrap": "PodBrowser-noWrap",
                                                          "overline": "PodBrowser-overline",
                                                          "paragraph": "PodBrowser-paragraph",
                                                          "root": "PodBrowser-root",
                                                          "srOnly": "PodBrowser-srOnly",
                                                          "subtitle1": "PodBrowser-subtitle1",
                                                          "subtitle2": "PodBrowser-subtitle2",
                                                        }
                                                      }
                                                      component="span"
                                                    >
                                                      <span
                                                        className="PodBrowser-root PodBrowser-label PodBrowser-label PodBrowser-body1"
                                                      >
                                                        Control
                                                      </span>
                                                    </ForwardRef(Typography)>
                                                  </WithStyles(ForwardRef(Typography))>
                                                </label>
                                              </ForwardRef(FormControlLabel)>
                                            </WithStyles(ForwardRef(FormControlLabel))>
                                          </li>
                                        </ForwardRef(ListItem)>
                                      </WithStyles(ForwardRef(ListItem))>
                                    </PermissionCheckbox>
                                  </ul>
                                </ForwardRef(List)>
                              </WithStyles(ForwardRef(List))>
                              <WithStyles(ForwardRef(Button))
                                onClick={[Function]}
                                variant="contained"
                              >
                                <ForwardRef(Button)
                                  classes={
                                    Object {
                                      "colorInherit": "PodBrowser-colorInherit",
                                      "contained": "PodBrowser-contained",
                                      "containedPrimary": "PodBrowser-containedPrimary",
                                      "containedSecondary": "PodBrowser-containedSecondary",
                                      "containedSizeLarge": "PodBrowser-containedSizeLarge",
                                      "containedSizeSmall": "PodBrowser-containedSizeSmall",
                                      "disableElevation": "PodBrowser-disableElevation",
                                      "disabled": "PodBrowser-disabled",
                                      "endIcon": "PodBrowser-endIcon",
                                      "focusVisible": "PodBrowser-focusVisible",
                                      "fullWidth": "PodBrowser-fullWidth",
                                      "iconSizeLarge": "PodBrowser-iconSizeLarge",
                                      "iconSizeMedium": "PodBrowser-iconSizeMedium",
                                      "iconSizeSmall": "PodBrowser-iconSizeSmall",
                                      "label": "PodBrowser-label",
                                      "outlined": "PodBrowser-outlined",
                                      "outlinedPrimary": "PodBrowser-outlinedPrimary",
                                      "outlinedSecondary": "PodBrowser-outlinedSecondary",
                                      "outlinedSizeLarge": "PodBrowser-outlinedSizeLarge",
                                      "outlinedSizeSmall": "PodBrowser-outlinedSizeSmall",
                                      "root": "PodBrowser-root",
                                      "sizeLarge": "PodBrowser-sizeLarge",
                                      "sizeSmall": "PodBrowser-sizeSmall",
                                      "startIcon": "PodBrowser-startIcon",
                                      "text": "PodBrowser-text",
                                      "textPrimary": "PodBrowser-textPrimary",
                                      "textSecondary": "PodBrowser-textSecondary",
                                      "textSizeLarge": "PodBrowser-textSizeLarge",
                                      "textSizeSmall": "PodBrowser-textSizeSmall",
                                    }
                                  }
                                  onClick={[Function]}
                                  variant="contained"
                                >
                                  <WithStyles(ForwardRef(ButtonBase))
                                    className="PodBrowser-root PodBrowser-contained"
                                    component="button"
                                    disabled={false}
                                    focusRipple={true}
                                    focusVisibleClassName="PodBrowser-focusVisible"
                                    onClick={[Function]}
                                    type="button"
                                  >
                                    <ForwardRef(ButtonBase)
                                      className="PodBrowser-root PodBrowser-contained"
                                      classes={
                                        Object {
                                          "disabled": "PodBrowser-disabled",
                                          "focusVisible": "PodBrowser-focusVisible",
                                          "root": "PodBrowser-root",
                                        }
                                      }
                                      component="button"
                                      disabled={false}
                                      focusRipple={true}
                                      focusVisibleClassName="PodBrowser-focusVisible"
                                      onClick={[Function]}
                                      type="button"
                                    >
                                      <button
                                        className="PodBrowser-root PodBrowser-root PodBrowser-contained"
                                        disabled={false}
                                        onBlur={[Function]}
                                        onClick={[Function]}
                                        onDragLeave={[Function]}
                                        onFocus={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        onMouseDown={[Function]}
                                        onMouseLeave={[Function]}
                                        onMouseUp={[Function]}
                                        onTouchEnd={[Function]}
                                        onTouchMove={[Function]}
                                        onTouchStart={[Function]}
                                        tabIndex={0}
                                        type="button"
                                      >
                                        <span
                                          className="PodBrowser-label"
                                        >
                                          Save
                                        </span>
                                        <WithStyles(memo)
                                          center={false}
                                        >
                                          <ForwardRef(TouchRipple)
                                            center={false}
                                            classes={
                                              Object {
                                                "child": "PodBrowser-child",
                                                "childLeaving": "PodBrowser-childLeaving",
                                                "childPulsate": "PodBrowser-childPulsate",
                                                "ripple": "PodBrowser-ripple",
                                                "ripplePulsate": "PodBrowser-ripplePulsate",
                                                "rippleVisible": "PodBrowser-rippleVisible",
                                                "root": "PodBrowser-root",
                                              }
                                            }
                                          >
                                            <span
                                              className="PodBrowser-root"
                                            >
                                              <TransitionGroup
                                                childFactory={[Function]}
                                                component={null}
                                                exit={true}
                                              />
                                            </span>
                                          </ForwardRef(TouchRipple)>
                                        </WithStyles(memo)>
                                      </button>
                                    </ForwardRef(ButtonBase)>
                                  </WithStyles(ForwardRef(ButtonBase))>
                                </ForwardRef(Button)>
                              </WithStyles(ForwardRef(Button))>
                            </section>
                          </div>
                        </PermissionsForm>
                      </li>
                    </ForwardRef(ListItem)>
                  </WithStyles(ForwardRef(ListItem))>
                </ul>
              </ForwardRef(List)>
            </WithStyles(ForwardRef(List))>
          </AgentAccessList>
        </section>
        <ThirdPartyPermissions
          classes={
            Object {
              "agentAddButton": "PodBrowser-agentAddButton",
              "agentInput": "PodBrowser-agentInput",
              "avatar": "PodBrowser-avatar",
              "centeredSection": "PodBrowser-centeredSection",
              "content": "PodBrowser-content",
              "content-blockquote": "PodBrowser-content-blockquote",
              "content-h1": "PodBrowser-content-h1",
              "content-h2": "PodBrowser-content-h2",
              "content-h3": "PodBrowser-content-h3",
              "content-h4": "PodBrowser-content-h4",
              "content-h5": "PodBrowser-content-h5",
              "content-h6": "PodBrowser-content-h6",
              "content-ol": "PodBrowser-content-ol",
              "content-p": "PodBrowser-content-p",
              "content-ul": "PodBrowser-content-ul",
              "detailText": "PodBrowser-detailText",
              "downloadButton": "PodBrowser-downloadButton",
              "formListItem": "PodBrowser-formListItem",
              "headerSection": "PodBrowser-headerSection",
              "image": "PodBrowser-image",
              "listItem": "PodBrowser-listItem",
              "raw": "PodBrowser-raw",
              "typeValue": "PodBrowser-typeValue",
            }
          }
          iri="iri"
          setThirdPartyPermissions={[Function]}
          thirdPartyPermissions={
            Array [
              Object {
                "acl": Object {
                  "append": true,
                  "control": true,
                  "read": true,
                  "write": true,
                },
                "alias": "Full Control",
                "profile": Object {
                  "webId": "agentId",
                },
                "webId": "agentId",
              },
            ]
          }
        >
          <section
            className="PodBrowser-centeredSection"
          >
            <h5
              className="PodBrowser-content-h5"
            >
              Sharing
            </h5>
            <WithStyles(ForwardRef(List))>
              <ForwardRef(List)
                classes={
                  Object {
                    "dense": "PodBrowser-dense",
                    "padding": "PodBrowser-padding",
                    "root": "PodBrowser-root",
                    "subheader": "PodBrowser-subheader",
                  }
                }
              >
                <ul
                  className="PodBrowser-root PodBrowser-padding"
                >
                  <WithStyles(ForwardRef(ListItem))
                    className="PodBrowser-listItem"
                    key="0"
                  >
                    <ForwardRef(ListItem)
                      className="PodBrowser-listItem"
                      classes={
                        Object {
                          "alignItemsFlexStart": "PodBrowser-alignItemsFlexStart",
                          "button": "PodBrowser-button",
                          "container": "PodBrowser-container",
                          "dense": "PodBrowser-dense",
                          "disabled": "PodBrowser-disabled",
                          "divider": "PodBrowser-divider",
                          "focusVisible": "PodBrowser-focusVisible",
                          "gutters": "PodBrowser-gutters",
                          "root": "PodBrowser-root",
                          "secondaryAction": "PodBrowser-secondaryAction",
                          "selected": "PodBrowser-selected",
                        }
                      }
                    >
                      <li
                        className="PodBrowser-root PodBrowser-listItem PodBrowser-gutters"
                        disabled={false}
                      >
                        <WithStyles(ForwardRef(ListItemIcon))
                          key=".0"
                        >
                          <ForwardRef(ListItemIcon)
                            classes={
                              Object {
                                "alignItemsFlexStart": "PodBrowser-alignItemsFlexStart",
                                "root": "PodBrowser-root",
                              }
                            }
                          >
                            <div
                              className="PodBrowser-root"
                            >
                              <ForwardRef>
                                <WithStyles(ForwardRef(SvgIcon))>
                                  <ForwardRef(SvgIcon)
                                    classes={
                                      Object {
                                        "colorAction": "PodBrowser-colorAction",
                                        "colorDisabled": "PodBrowser-colorDisabled",
                                        "colorError": "PodBrowser-colorError",
                                        "colorPrimary": "PodBrowser-colorPrimary",
                                        "colorSecondary": "PodBrowser-colorSecondary",
                                        "fontSizeInherit": "PodBrowser-fontSizeInherit",
                                        "fontSizeLarge": "PodBrowser-fontSizeLarge",
                                        "fontSizeSmall": "PodBrowser-fontSizeSmall",
                                        "root": "PodBrowser-root",
                                      }
                                    }
                                  >
                                    <svg
                                      aria-hidden={true}
                                      className="PodBrowser-root"
                                      focusable="false"
                                      viewBox="0 0 24 24"
                                    >
                                      <path
                                        d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"
                                      />
                                    </svg>
                                  </ForwardRef(SvgIcon)>
                                </WithStyles(ForwardRef(SvgIcon))>
                              </ForwardRef>
                              People
                            </div>
                          </ForwardRef(ListItemIcon)>
                        </WithStyles(ForwardRef(ListItemIcon))>
                      </li>
                    </ForwardRef(ListItem)>
                  </WithStyles(ForwardRef(ListItem))>
                  <WithStyles(ForwardRef(Divider))>
                    <ForwardRef(Divider)
                      classes={
                        Object {
                          "absolute": "PodBrowser-absolute",
                          "flexItem": "PodBrowser-flexItem",
                          "inset": "PodBrowser-inset",
                          "light": "PodBrowser-light",
                          "middle": "PodBrowser-middle",
                          "root": "PodBrowser-root",
                          "vertical": "PodBrowser-vertical",
                        }
                      }
                    >
                      <hr
                        className="PodBrowser-root"
                      />
                    </ForwardRef(Divider)>
                  </WithStyles(ForwardRef(Divider))>
                  <AgentAccessList
                    classes={
                      Object {
                        "agentAddButton": "PodBrowser-agentAddButton",
                        "agentInput": "PodBrowser-agentInput",
                        "avatar": "PodBrowser-avatar",
                        "centeredSection": "PodBrowser-centeredSection",
                        "content": "PodBrowser-content",
                        "content-blockquote": "PodBrowser-content-blockquote",
                        "content-h1": "PodBrowser-content-h1",
                        "content-h2": "PodBrowser-content-h2",
                        "content-h3": "PodBrowser-content-h3",
                        "content-h4": "PodBrowser-content-h4",
                        "content-h5": "PodBrowser-content-h5",
                        "content-h6": "PodBrowser-content-h6",
                        "content-ol": "PodBrowser-content-ol",
                        "content-p": "PodBrowser-content-p",
                        "content-ul": "PodBrowser-content-ul",
                        "detailText": "PodBrowser-detailText",
                        "downloadButton": "PodBrowser-downloadButton",
                        "formListItem": "PodBrowser-formListItem",
                        "headerSection": "PodBrowser-headerSection",
                        "image": "PodBrowser-image",
                        "listItem": "PodBrowser-listItem",
                        "raw": "PodBrowser-raw",
                        "typeValue": "PodBrowser-typeValue",
                      }
                    }
                    iri="iri"
                    onSave={[Function]}
                    onSubmit={[Function]}
                    permissions={
                      Array [
                        Object {
                          "acl": Object {
                            "append": true,
                            "control": true,
                            "read": true,
                            "write": true,
                          },
                          "alias": "Full Control",
                          "profile": Object {
                            "webId": "agentId",
                          },
                          "webId": "agentId",
                        },
                      ]
                    }
                    saveFn={[Function]}
                    warn={false}
                  >
                    <WithStyles(ForwardRef(List))>
                      <ForwardRef(List)
                        classes={
                          Object {
                            "dense": "PodBrowser-dense",
                            "padding": "PodBrowser-padding",
                            "root": "PodBrowser-root",
                            "subheader": "PodBrowser-subheader",
                          }
                        }
                      >
                        <ul
                          className="PodBrowser-root PodBrowser-padding"
                        >
                          <WithStyles(ForwardRef(ListItem))
                            className="PodBrowser-listItem"
                            key="agentId"
                          >
                            <ForwardRef(ListItem)
                              className="PodBrowser-listItem"
                              classes={
                                Object {
                                  "alignItemsFlexStart": "PodBrowser-alignItemsFlexStart",
                                  "button": "PodBrowser-button",
                                  "container": "PodBrowser-container",
                                  "dense": "PodBrowser-dense",
                                  "disabled": "PodBrowser-disabled",
                                  "divider": "PodBrowser-divider",
                                  "focusVisible": "PodBrowser-focusVisible",
                                  "gutters": "PodBrowser-gutters",
                                  "root": "PodBrowser-root",
                                  "secondaryAction": "PodBrowser-secondaryAction",
                                  "selected": "PodBrowser-selected",
                                }
                              }
                            >
                              <li
                                className="PodBrowser-root PodBrowser-listItem PodBrowser-gutters"
                                disabled={false}
                              >
                                <WithStyles(ForwardRef(Avatar))
                                  alt="agentId"
                                  className="PodBrowser-avatar"
                                  key=".0"
                                >
                                  <ForwardRef(Avatar)
                                    alt="agentId"
                                    className="PodBrowser-avatar"
                                    classes={
                                      Object {
                                        "circle": "PodBrowser-circle",
                                        "colorDefault": "PodBrowser-colorDefault",
                                        "fallback": "PodBrowser-fallback",
                                        "img": "PodBrowser-img",
                                        "root": "PodBrowser-root",
                                        "rounded": "PodBrowser-rounded",
                                        "square": "PodBrowser-square",
                                      }
                                    }
                                  >
                                    <div
                                      className="PodBrowser-root PodBrowser-circle PodBrowser-avatar PodBrowser-colorDefault"
                                    >
                                      <ForwardRef(PersonIcon)
                                        className="PodBrowser-fallback"
                                      >
                                        <WithStyles(ForwardRef(SvgIcon))
                                          className="PodBrowser-fallback"
                                        >
                                          <ForwardRef(SvgIcon)
                                            className="PodBrowser-fallback"
                                            classes={
                                              Object {
                                                "colorAction": "PodBrowser-colorAction",
                                                "colorDisabled": "PodBrowser-colorDisabled",
                                                "colorError": "PodBrowser-colorError",
                                                "colorPrimary": "PodBrowser-colorPrimary",
                                                "colorSecondary": "PodBrowser-colorSecondary",
                                                "fontSizeInherit": "PodBrowser-fontSizeInherit",
                                                "fontSizeLarge": "PodBrowser-fontSizeLarge",
                                                "fontSizeSmall": "PodBrowser-fontSizeSmall",
                                                "root": "PodBrowser-root",
                                              }
                                            }
                                          >
                                            <svg
                                              aria-hidden={true}
                                              className="PodBrowser-root PodBrowser-fallback"
                                              focusable="false"
                                              viewBox="0 0 24 24"
                                            >
                                              <path
                                                d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"
                                              />
                                            </svg>
                                          </ForwardRef(SvgIcon)>
                                        </WithStyles(ForwardRef(SvgIcon))>
                                      </ForwardRef(PersonIcon)>
                                    </div>
                                  </ForwardRef(Avatar)>
                                </WithStyles(ForwardRef(Avatar))>
                                <WithStyles(ForwardRef(Typography))
                                  className="PodBrowser-detailText"
                                  key=".1"
                                >
                                  <ForwardRef(Typography)
                                    className="PodBrowser-detailText"
                                    classes={
                                      Object {
                                        "alignCenter": "PodBrowser-alignCenter",
                                        "alignJustify": "PodBrowser-alignJustify",
                                        "alignLeft": "PodBrowser-alignLeft",
                                        "alignRight": "PodBrowser-alignRight",
                                        "body1": "PodBrowser-body1",
                                        "body2": "PodBrowser-body2",
                                        "button": "PodBrowser-button",
                                        "caption": "PodBrowser-caption",
                                        "colorError": "PodBrowser-colorError",
                                        "colorInherit": "PodBrowser-colorInherit",
                                        "colorPrimary": "PodBrowser-colorPrimary",
                                        "colorSecondary": "PodBrowser-colorSecondary",
                                        "colorTextPrimary": "PodBrowser-colorTextPrimary",
                                        "colorTextSecondary": "PodBrowser-colorTextSecondary",
                                        "displayBlock": "PodBrowser-displayBlock",
                                        "displayInline": "PodBrowser-displayInline",
                                        "gutterBottom": "PodBrowser-gutterBottom",
                                        "h1": "PodBrowser-h1",
                                        "h2": "PodBrowser-h2",
                                        "h3": "PodBrowser-h3",
                                        "h4": "PodBrowser-h4",
                                        "h5": "PodBrowser-h5",
                                        "h6": "PodBrowser-h6",
                                        "noWrap": "PodBrowser-noWrap",
                                        "overline": "PodBrowser-overline",
                                        "paragraph": "PodBrowser-paragraph",
                                        "root": "PodBrowser-root",
                                        "srOnly": "PodBrowser-srOnly",
                                        "subtitle1": "PodBrowser-subtitle1",
                                        "subtitle2": "PodBrowser-subtitle2",
                                      }
                                    }
                                  >
                                    <p
                                      className="PodBrowser-root PodBrowser-detailText PodBrowser-body1"
                                    >
                                      agentId
                                    </p>
                                  </ForwardRef(Typography)>
                                </WithStyles(ForwardRef(Typography))>
                                <PermissionsForm
                                  key=".$agentId"
                                  onSave={[Function]}
                                  permission={
                                    Object {
                                      "acl": Object {
                                        "append": true,
                                        "control": true,
                                        "read": true,
                                        "write": true,
                                      },
                                      "alias": "Full Control",
                                      "profile": Object {
                                        "webId": "agentId",
                                      },
                                      "webId": "agentId",
                                    }
                                  }
                                  warnOnSubmit={false}
                                >
                                  <div
                                    className="PodBrowser-container"
                                  >
                                    <WithStyles(ForwardRef(Button))
                                      className="PodBrowser-summary"
                                      endIcon={<Memo(KeyboardArrowDownIcon) />}
                                      onClick={[Function]}
                                    >
                                      <ForwardRef(Button)
                                        className="PodBrowser-summary"
                                        classes={
                                          Object {
                                            "colorInherit": "PodBrowser-colorInherit",
                                            "contained": "PodBrowser-contained",
                                            "containedPrimary": "PodBrowser-containedPrimary",
                                            "containedSecondary": "PodBrowser-containedSecondary",
                                            "containedSizeLarge": "PodBrowser-containedSizeLarge",
                                            "containedSizeSmall": "PodBrowser-containedSizeSmall",
                                            "disableElevation": "PodBrowser-disableElevation",
                                            "disabled": "PodBrowser-disabled",
                                            "endIcon": "PodBrowser-endIcon",
                                            "focusVisible": "PodBrowser-focusVisible",
                                            "fullWidth": "PodBrowser-fullWidth",
                                            "iconSizeLarge": "PodBrowser-iconSizeLarge",
                                            "iconSizeMedium": "PodBrowser-iconSizeMedium",
                                            "iconSizeSmall": "PodBrowser-iconSizeSmall",
                                            "label": "PodBrowser-label",
                                            "outlined": "PodBrowser-outlined",
                                            "outlinedPrimary": "PodBrowser-outlinedPrimary",
                                            "outlinedSecondary": "PodBrowser-outlinedSecondary",
                                            "outlinedSizeLarge": "PodBrowser-outlinedSizeLarge",
                                            "outlinedSizeSmall": "PodBrowser-outlinedSizeSmall",
                                            "root": "PodBrowser-root",
                                            "sizeLarge": "PodBrowser-sizeLarge",
                                            "sizeSmall": "PodBrowser-sizeSmall",
                                            "startIcon": "PodBrowser-startIcon",
                                            "text": "PodBrowser-text",
                                            "textPrimary": "PodBrowser-textPrimary",
                                            "textSecondary": "PodBrowser-textSecondary",
                                            "textSizeLarge": "PodBrowser-textSizeLarge",
                                            "textSizeSmall": "PodBrowser-textSizeSmall",
                                          }
                                        }
                                        endIcon={<Memo(KeyboardArrowDownIcon) />}
                                        onClick={[Function]}
                                      >
                                        <WithStyles(ForwardRef(ButtonBase))
                                          className="PodBrowser-root PodBrowser-text PodBrowser-summary"
                                          component="button"
                                          disabled={false}
                                          focusRipple={true}
                                          focusVisibleClassName="PodBrowser-focusVisible"
                                          onClick={[Function]}
                                          type="button"
                                        >
                                          <ForwardRef(ButtonBase)
                                            className="PodBrowser-root PodBrowser-text PodBrowser-summary"
                                            classes={
                                              Object {
                                                "disabled": "PodBrowser-disabled",
                                                "focusVisible": "PodBrowser-focusVisible",
                                                "root": "PodBrowser-root",
                                              }
                                            }
                                            component="button"
                                            disabled={false}
                                            focusRipple={true}
                                            focusVisibleClassName="PodBrowser-focusVisible"
                                            onClick={[Function]}
                                            type="button"
                                          >
                                            <button
                                              className="PodBrowser-root PodBrowser-root PodBrowser-text PodBrowser-summary"
                                              disabled={false}
                                              onBlur={[Function]}
                                              onClick={[Function]}
                                              onDragLeave={[Function]}
                                              onFocus={[Function]}
                                              onKeyDown={[Function]}
                                              onKeyUp={[Function]}
                                              onMouseDown={[Function]}
                                              onMouseLeave={[Function]}
                                              onMouseUp={[Function]}
                                              onTouchEnd={[Function]}
                                              onTouchMove={[Function]}
                                              onTouchStart={[Function]}
                                              tabIndex={0}
                                              type="button"
                                            >
                                              <span
                                                className="PodBrowser-label"
                                              >
                                                <span>
                                                  Control
                                                </span>
                                                <span
                                                  className="PodBrowser-endIcon PodBrowser-iconSizeMedium"
                                                >
                                                  <ForwardRef>
                                                    <WithStyles(ForwardRef(SvgIcon))>
                                                      <ForwardRef(SvgIcon)
                                                        classes={
                                                          Object {
                                                            "colorAction": "PodBrowser-colorAction",
                                                            "colorDisabled": "PodBrowser-colorDisabled",
                                                            "colorError": "PodBrowser-colorError",
                                                            "colorPrimary": "PodBrowser-colorPrimary",
                                                            "colorSecondary": "PodBrowser-colorSecondary",
                                                            "fontSizeInherit": "PodBrowser-fontSizeInherit",
                                                            "fontSizeLarge": "PodBrowser-fontSizeLarge",
                                                            "fontSizeSmall": "PodBrowser-fontSizeSmall",
                                                            "root": "PodBrowser-root",
                                                          }
                                                        }
                                                      >
                                                        <svg
                                                          aria-hidden={true}
                                                          className="PodBrowser-root"
                                                          focusable="false"
                                                          viewBox="0 0 24 24"
                                                        >
                                                          <path
                                                            d="M7.41 8.59L12 13.17l4.59-4.58L18 10l-6 6-6-6 1.41-1.41z"
                                                          />
                                                        </svg>
                                                      </ForwardRef(SvgIcon)>
                                                    </WithStyles(ForwardRef(SvgIcon))>
                                                  </ForwardRef>
                                                </span>
                                              </span>
                                              <WithStyles(memo)
                                                center={false}
                                              >
                                                <ForwardRef(TouchRipple)
                                                  center={false}
                                                  classes={
                                                    Object {
                                                      "child": "PodBrowser-child",
                                                      "childLeaving": "PodBrowser-childLeaving",
                                                      "childPulsate": "PodBrowser-childPulsate",
                                                      "ripple": "PodBrowser-ripple",
                                                      "ripplePulsate": "PodBrowser-ripplePulsate",
                                                      "rippleVisible": "PodBrowser-rippleVisible",
                                                      "root": "PodBrowser-root",
                                                    }
                                                  }
                                                >
                                                  <span
                                                    className="PodBrowser-root"
                                                  >
                                                    <TransitionGroup
                                                      childFactory={[Function]}
                                                      component={null}
                                                      exit={true}
                                                    />
                                                  </span>
                                                </ForwardRef(TouchRipple)>
                                              </WithStyles(memo)>
                                            </button>
                                          </ForwardRef(ButtonBase)>
                                        </WithStyles(ForwardRef(ButtonBase))>
                                      </ForwardRef(Button)>
                                    </WithStyles(ForwardRef(Button))>
                                    <section
                                      className="PodBrowser-selectionClosed"
                                    >
                                      <WithStyles(ForwardRef(List))>
                                        <ForwardRef(List)
                                          classes={
                                            Object {
                                              "dense": "PodBrowser-dense",
                                              "padding": "PodBrowser-padding",
                                              "root": "PodBrowser-root",
                                              "subheader": "PodBrowser-subheader",
                                            }
                                          }
                                        >
                                          <ul
                                            className="PodBrowser-root PodBrowser-padding"
                                          >
                                            <PermissionCheckbox
                                              classes={
                                                Object {
                                                  "checkbox": "PodBrowser-checkbox",
                                                  "container": "PodBrowser-container",
                                                  "label": "PodBrowser-label",
                                                  "listItem": "PodBrowser-listItem",
                                                  "selectionClosed": "PodBrowser-selectionClosed",
                                                  "selectionOpen": "PodBrowser-selectionOpen",
                                                  "summary": "PodBrowser-summary",
                                                }
                                              }
                                              label="View"
                                              onChange={[Function]}
                                              value={true}
                                            >
                                              <WithStyles(ForwardRef(ListItem))
                                                className="PodBrowser-listItem"
                                              >
                                                <ForwardRef(ListItem)
                                                  className="PodBrowser-listItem"
                                                  classes={
                                                    Object {
                                                      "alignItemsFlexStart": "PodBrowser-alignItemsFlexStart",
                                                      "button": "PodBrowser-button",
                                                      "container": "PodBrowser-container",
                                                      "dense": "PodBrowser-dense",
                                                      "disabled": "PodBrowser-disabled",
                                                      "divider": "PodBrowser-divider",
                                                      "focusVisible": "PodBrowser-focusVisible",
                                                      "gutters": "PodBrowser-gutters",
                                                      "root": "PodBrowser-root",
                                                      "secondaryAction": "PodBrowser-secondaryAction",
                                                      "selected": "PodBrowser-selected",
                                                    }
                                                  }
                                                >
                                                  <li
                                                    className="PodBrowser-root PodBrowser-listItem PodBrowser-gutters"
                                                    disabled={false}
                                                  >
                                                    <WithStyles(ForwardRef(FormControlLabel))
                                                      classes={
                                                        Object {
                                                          "label": "PodBrowser-label",
                                                        }
                                                      }
                                                      control={
                                                        <WithStyles(ForwardRef(Checkbox))
                                                          checked={true}
                                                          classes={
                                                            Object {
                                                              "root": "PodBrowser-checkbox",
                                                            }
                                                          }
                                                          name="view"
                                                          onChange={[Function]}
                                                        />
                                                      }
                                                      key=".0"
                                                      label="View"
                                                    >
                                                      <ForwardRef(FormControlLabel)
                                                        classes={
                                                          Object {
                                                            "disabled": "PodBrowser-disabled",
                                                            "label": "PodBrowser-label PodBrowser-label",
                                                            "labelPlacementBottom": "PodBrowser-labelPlacementBottom",
                                                            "labelPlacementStart": "PodBrowser-labelPlacementStart",
                                                            "labelPlacementTop": "PodBrowser-labelPlacementTop",
                                                            "root": "PodBrowser-root",
                                                          }
                                                        }
                                                        control={
                                                          <WithStyles(ForwardRef(Checkbox))
                                                            checked={true}
                                                            classes={
                                                              Object {
                                                                "root": "PodBrowser-checkbox",
                                                              }
                                                            }
                                                            name="view"
                                                            onChange={[Function]}
                                                          />
                                                        }
                                                        label="View"
                                                      >
                                                        <label
                                                          className="PodBrowser-root"
                                                        >
                                                          <WithStyles(ForwardRef(Checkbox))
                                                            checked={true}
                                                            classes={
                                                              Object {
                                                                "root": "PodBrowser-checkbox",
                                                              }
                                                            }
                                                            name="view"
                                                            onChange={[Function]}
                                                          >
                                                            <ForwardRef(Checkbox)
                                                              checked={true}
                                                              classes={
                                                                Object {
                                                                  "checked": "PodBrowser-checked",
                                                                  "colorPrimary": "PodBrowser-colorPrimary",
                                                                  "colorSecondary": "PodBrowser-colorSecondary",
                                                                  "disabled": "PodBrowser-disabled",
                                                                  "indeterminate": "PodBrowser-indeterminate",
                                                                  "root": "PodBrowser-root PodBrowser-checkbox",
                                                                }
                                                              }
                                                              name="view"
                                                              onChange={[Function]}
                                                            >
                                                              <WithStyles(ForwardRef(SwitchBase))
                                                                checked={true}
                                                                checkedIcon={<Memo />}
                                                                classes={
                                                                  Object {
                                                                    "checked": "PodBrowser-checked",
                                                                    "disabled": "PodBrowser-disabled",
                                                                    "root": "PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary",
                                                                  }
                                                                }
                                                                color="secondary"
                                                                icon={<Memo />}
                                                                inputProps={
                                                                  Object {
                                                                    "data-indeterminate": false,
                                                                  }
                                                                }
                                                                name="view"
                                                                onChange={[Function]}
                                                                type="checkbox"
                                                              >
                                                                <ForwardRef(SwitchBase)
                                                                  checked={true}
                                                                  checkedIcon={<Memo />}
                                                                  classes={
                                                                    Object {
                                                                      "checked": "PodBrowser-checked PodBrowser-checked",
                                                                      "disabled": "PodBrowser-disabled PodBrowser-disabled",
                                                                      "input": "PodBrowser-input",
                                                                      "root": "PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary",
                                                                    }
                                                                  }
                                                                  color="secondary"
                                                                  icon={<Memo />}
                                                                  inputProps={
                                                                    Object {
                                                                      "data-indeterminate": false,
                                                                    }
                                                                  }
                                                                  name="view"
                                                                  onChange={[Function]}
                                                                  type="checkbox"
                                                                >
                                                                  <WithStyles(ForwardRef(IconButton))
                                                                    className="PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary PodBrowser-checked PodBrowser-checked"
                                                                    color="secondary"
                                                                    component="span"
                                                                    onBlur={[Function]}
                                                                    onFocus={[Function]}
                                                                    tabIndex={null}
                                                                  >
                                                                    <ForwardRef(IconButton)
                                                                      className="PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary PodBrowser-checked PodBrowser-checked"
                                                                      classes={
                                                                        Object {
                                                                          "colorInherit": "PodBrowser-colorInherit",
                                                                          "colorPrimary": "PodBrowser-colorPrimary",
                                                                          "colorSecondary": "PodBrowser-colorSecondary",
                                                                          "disabled": "PodBrowser-disabled",
                                                                          "edgeEnd": "PodBrowser-edgeEnd",
                                                                          "edgeStart": "PodBrowser-edgeStart",
                                                                          "label": "PodBrowser-label",
                                                                          "root": "PodBrowser-root",
                                                                          "sizeSmall": "PodBrowser-sizeSmall",
                                                                        }
                                                                      }
                                                                      color="secondary"
                                                                      component="span"
                                                                      onBlur={[Function]}
                                                                      onFocus={[Function]}
                                                                      tabIndex={null}
                                                                    >
                                                                      <WithStyles(ForwardRef(ButtonBase))
                                                                        centerRipple={true}
                                                                        className="PodBrowser-root PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary PodBrowser-checked PodBrowser-checked PodBrowser-colorSecondary"
                                                                        component="span"
                                                                        disabled={false}
                                                                        focusRipple={true}
                                                                        onBlur={[Function]}
                                                                        onFocus={[Function]}
                                                                        tabIndex={null}
                                                                      >
                                                                        <ForwardRef(ButtonBase)
                                                                          centerRipple={true}
                                                                          className="PodBrowser-root PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary PodBrowser-checked PodBrowser-checked PodBrowser-colorSecondary"
                                                                          classes={
                                                                            Object {
                                                                              "disabled": "PodBrowser-disabled",
                                                                              "focusVisible": "PodBrowser-focusVisible",
                                                                              "root": "PodBrowser-root",
                                                                            }
                                                                          }
                                                                          component="span"
                                                                          disabled={false}
                                                                          focusRipple={true}
                                                                          onBlur={[Function]}
                                                                          onFocus={[Function]}
                                                                          tabIndex={null}
                                                                        >
                                                                          <span
                                                                            aria-disabled={false}
                                                                            className="PodBrowser-root PodBrowser-root PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary PodBrowser-checked PodBrowser-checked PodBrowser-colorSecondary"
                                                                            onBlur={[Function]}
                                                                            onDragLeave={[Function]}
                                                                            onFocus={[Function]}
                                                                            onKeyDown={[Function]}
                                                                            onKeyUp={[Function]}
                                                                            onMouseDown={[Function]}
                                                                            onMouseLeave={[Function]}
                                                                            onMouseUp={[Function]}
                                                                            onTouchEnd={[Function]}
                                                                            onTouchMove={[Function]}
                                                                            onTouchStart={[Function]}
                                                                            tabIndex={null}
                                                                          >
                                                                            <span
                                                                              className="PodBrowser-label"
                                                                            >
                                                                              <input
                                                                                checked={true}
                                                                                className="PodBrowser-input"
                                                                                data-indeterminate={false}
                                                                                name="view"
                                                                                onChange={[Function]}
                                                                                type="checkbox"
                                                                              />
                                                                              <ForwardRef(CheckBoxIcon)>
                                                                                <WithStyles(ForwardRef(SvgIcon))>
                                                                                  <ForwardRef(SvgIcon)
                                                                                    classes={
                                                                                      Object {
                                                                                        "colorAction": "PodBrowser-colorAction",
                                                                                        "colorDisabled": "PodBrowser-colorDisabled",
                                                                                        "colorError": "PodBrowser-colorError",
                                                                                        "colorPrimary": "PodBrowser-colorPrimary",
                                                                                        "colorSecondary": "PodBrowser-colorSecondary",
                                                                                        "fontSizeInherit": "PodBrowser-fontSizeInherit",
                                                                                        "fontSizeLarge": "PodBrowser-fontSizeLarge",
                                                                                        "fontSizeSmall": "PodBrowser-fontSizeSmall",
                                                                                        "root": "PodBrowser-root",
                                                                                      }
                                                                                    }
                                                                                  >
                                                                                    <svg
                                                                                      aria-hidden={true}
                                                                                      className="PodBrowser-root"
                                                                                      focusable="false"
                                                                                      viewBox="0 0 24 24"
                                                                                    >
                                                                                      <path
                                                                                        d="M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"
                                                                                      />
                                                                                    </svg>
                                                                                  </ForwardRef(SvgIcon)>
                                                                                </WithStyles(ForwardRef(SvgIcon))>
                                                                              </ForwardRef(CheckBoxIcon)>
                                                                            </span>
                                                                            <WithStyles(memo)
                                                                              center={true}
                                                                            >
                                                                              <ForwardRef(TouchRipple)
                                                                                center={true}
                                                                                classes={
                                                                                  Object {
                                                                                    "child": "PodBrowser-child",
                                                                                    "childLeaving": "PodBrowser-childLeaving",
                                                                                    "childPulsate": "PodBrowser-childPulsate",
                                                                                    "ripple": "PodBrowser-ripple",
                                                                                    "ripplePulsate": "PodBrowser-ripplePulsate",
                                                                                    "rippleVisible": "PodBrowser-rippleVisible",
                                                                                    "root": "PodBrowser-root",
                                                                                  }
                                                                                }
                                                                              >
                                                                                <span
                                                                                  className="PodBrowser-root"
                                                                                >
                                                                                  <TransitionGroup
                                                                                    childFactory={[Function]}
                                                                                    component={null}
                                                                                    exit={true}
                                                                                  />
                                                                                </span>
                                                                              </ForwardRef(TouchRipple)>
                                                                            </WithStyles(memo)>
                                                                          </span>
                                                                        </ForwardRef(ButtonBase)>
                                                                      </WithStyles(ForwardRef(ButtonBase))>
                                                                    </ForwardRef(IconButton)>
                                                                  </WithStyles(ForwardRef(IconButton))>
                                                                </ForwardRef(SwitchBase)>
                                                              </WithStyles(ForwardRef(SwitchBase))>
                                                            </ForwardRef(Checkbox)>
                                                          </WithStyles(ForwardRef(Checkbox))>
                                                          <WithStyles(ForwardRef(Typography))
                                                            className="PodBrowser-label PodBrowser-label"
                                                            component="span"
                                                          >
                                                            <ForwardRef(Typography)
                                                              className="PodBrowser-label PodBrowser-label"
                                                              classes={
                                                                Object {
                                                                  "alignCenter": "PodBrowser-alignCenter",
                                                                  "alignJustify": "PodBrowser-alignJustify",
                                                                  "alignLeft": "PodBrowser-alignLeft",
                                                                  "alignRight": "PodBrowser-alignRight",
                                                                  "body1": "PodBrowser-body1",
                                                                  "body2": "PodBrowser-body2",
                                                                  "button": "PodBrowser-button",
                                                                  "caption": "PodBrowser-caption",
                                                                  "colorError": "PodBrowser-colorError",
                                                                  "colorInherit": "PodBrowser-colorInherit",
                                                                  "colorPrimary": "PodBrowser-colorPrimary",
                                                                  "colorSecondary": "PodBrowser-colorSecondary",
                                                                  "colorTextPrimary": "PodBrowser-colorTextPrimary",
                                                                  "colorTextSecondary": "PodBrowser-colorTextSecondary",
                                                                  "displayBlock": "PodBrowser-displayBlock",
                                                                  "displayInline": "PodBrowser-displayInline",
                                                                  "gutterBottom": "PodBrowser-gutterBottom",
                                                                  "h1": "PodBrowser-h1",
                                                                  "h2": "PodBrowser-h2",
                                                                  "h3": "PodBrowser-h3",
                                                                  "h4": "PodBrowser-h4",
                                                                  "h5": "PodBrowser-h5",
                                                                  "h6": "PodBrowser-h6",
                                                                  "noWrap": "PodBrowser-noWrap",
                                                                  "overline": "PodBrowser-overline",
                                                                  "paragraph": "PodBrowser-paragraph",
                                                                  "root": "PodBrowser-root",
                                                                  "srOnly": "PodBrowser-srOnly",
                                                                  "subtitle1": "PodBrowser-subtitle1",
                                                                  "subtitle2": "PodBrowser-subtitle2",
                                                                }
                                                              }
                                                              component="span"
                                                            >
                                                              <span
                                                                className="PodBrowser-root PodBrowser-label PodBrowser-label PodBrowser-body1"
                                                              >
                                                                View
                                                              </span>
                                                            </ForwardRef(Typography)>
                                                          </WithStyles(ForwardRef(Typography))>
                                                        </label>
                                                      </ForwardRef(FormControlLabel)>
                                                    </WithStyles(ForwardRef(FormControlLabel))>
                                                  </li>
                                                </ForwardRef(ListItem)>
                                              </WithStyles(ForwardRef(ListItem))>
                                            </PermissionCheckbox>
                                            <PermissionCheckbox
                                              classes={
                                                Object {
                                                  "checkbox": "PodBrowser-checkbox",
                                                  "container": "PodBrowser-container",
                                                  "label": "PodBrowser-label",
                                                  "listItem": "PodBrowser-listItem",
                                                  "selectionClosed": "PodBrowser-selectionClosed",
                                                  "selectionOpen": "PodBrowser-selectionOpen",
                                                  "summary": "PodBrowser-summary",
                                                }
                                              }
                                              label="Edit"
                                              onChange={[Function]}
                                              value={true}
                                            >
                                              <WithStyles(ForwardRef(ListItem))
                                                className="PodBrowser-listItem"
                                              >
                                                <ForwardRef(ListItem)
                                                  className="PodBrowser-listItem"
                                                  classes={
                                                    Object {
                                                      "alignItemsFlexStart": "PodBrowser-alignItemsFlexStart",
                                                      "button": "PodBrowser-button",
                                                      "container": "PodBrowser-container",
                                                      "dense": "PodBrowser-dense",
                                                      "disabled": "PodBrowser-disabled",
                                                      "divider": "PodBrowser-divider",
                                                      "focusVisible": "PodBrowser-focusVisible",
                                                      "gutters": "PodBrowser-gutters",
                                                      "root": "PodBrowser-root",
                                                      "secondaryAction": "PodBrowser-secondaryAction",
                                                      "selected": "PodBrowser-selected",
                                                    }
                                                  }
                                                >
                                                  <li
                                                    className="PodBrowser-root PodBrowser-listItem PodBrowser-gutters"
                                                    disabled={false}
                                                  >
                                                    <WithStyles(ForwardRef(FormControlLabel))
                                                      classes={
                                                        Object {
                                                          "label": "PodBrowser-label",
                                                        }
                                                      }
                                                      control={
                                                        <WithStyles(ForwardRef(Checkbox))
                                                          checked={true}
                                                          classes={
                                                            Object {
                                                              "root": "PodBrowser-checkbox",
                                                            }
                                                          }
                                                          name="edit"
                                                          onChange={[Function]}
                                                        />
                                                      }
                                                      key=".0"
                                                      label="Edit"
                                                    >
                                                      <ForwardRef(FormControlLabel)
                                                        classes={
                                                          Object {
                                                            "disabled": "PodBrowser-disabled",
                                                            "label": "PodBrowser-label PodBrowser-label",
                                                            "labelPlacementBottom": "PodBrowser-labelPlacementBottom",
                                                            "labelPlacementStart": "PodBrowser-labelPlacementStart",
                                                            "labelPlacementTop": "PodBrowser-labelPlacementTop",
                                                            "root": "PodBrowser-root",
                                                          }
                                                        }
                                                        control={
                                                          <WithStyles(ForwardRef(Checkbox))
                                                            checked={true}
                                                            classes={
                                                              Object {
                                                                "root": "PodBrowser-checkbox",
                                                              }
                                                            }
                                                            name="edit"
                                                            onChange={[Function]}
                                                          />
                                                        }
                                                        label="Edit"
                                                      >
                                                        <label
                                                          className="PodBrowser-root"
                                                        >
                                                          <WithStyles(ForwardRef(Checkbox))
                                                            checked={true}
                                                            classes={
                                                              Object {
                                                                "root": "PodBrowser-checkbox",
                                                              }
                                                            }
                                                            name="edit"
                                                            onChange={[Function]}
                                                          >
                                                            <ForwardRef(Checkbox)
                                                              checked={true}
                                                              classes={
                                                                Object {
                                                                  "checked": "PodBrowser-checked",
                                                                  "colorPrimary": "PodBrowser-colorPrimary",
                                                                  "colorSecondary": "PodBrowser-colorSecondary",
                                                                  "disabled": "PodBrowser-disabled",
                                                                  "indeterminate": "PodBrowser-indeterminate",
                                                                  "root": "PodBrowser-root PodBrowser-checkbox",
                                                                }
                                                              }
                                                              name="edit"
                                                              onChange={[Function]}
                                                            >
                                                              <WithStyles(ForwardRef(SwitchBase))
                                                                checked={true}
                                                                checkedIcon={<Memo />}
                                                                classes={
                                                                  Object {
                                                                    "checked": "PodBrowser-checked",
                                                                    "disabled": "PodBrowser-disabled",
                                                                    "root": "PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary",
                                                                  }
                                                                }
                                                                color="secondary"
                                                                icon={<Memo />}
                                                                inputProps={
                                                                  Object {
                                                                    "data-indeterminate": false,
                                                                  }
                                                                }
                                                                name="edit"
                                                                onChange={[Function]}
                                                                type="checkbox"
                                                              >
                                                                <ForwardRef(SwitchBase)
                                                                  checked={true}
                                                                  checkedIcon={<Memo />}
                                                                  classes={
                                                                    Object {
                                                                      "checked": "PodBrowser-checked PodBrowser-checked",
                                                                      "disabled": "PodBrowser-disabled PodBrowser-disabled",
                                                                      "input": "PodBrowser-input",
                                                                      "root": "PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary",
                                                                    }
                                                                  }
                                                                  color="secondary"
                                                                  icon={<Memo />}
                                                                  inputProps={
                                                                    Object {
                                                                      "data-indeterminate": false,
                                                                    }
                                                                  }
                                                                  name="edit"
                                                                  onChange={[Function]}
                                                                  type="checkbox"
                                                                >
                                                                  <WithStyles(ForwardRef(IconButton))
                                                                    className="PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary PodBrowser-checked PodBrowser-checked"
                                                                    color="secondary"
                                                                    component="span"
                                                                    onBlur={[Function]}
                                                                    onFocus={[Function]}
                                                                    tabIndex={null}
                                                                  >
                                                                    <ForwardRef(IconButton)
                                                                      className="PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary PodBrowser-checked PodBrowser-checked"
                                                                      classes={
                                                                        Object {
                                                                          "colorInherit": "PodBrowser-colorInherit",
                                                                          "colorPrimary": "PodBrowser-colorPrimary",
                                                                          "colorSecondary": "PodBrowser-colorSecondary",
                                                                          "disabled": "PodBrowser-disabled",
                                                                          "edgeEnd": "PodBrowser-edgeEnd",
                                                                          "edgeStart": "PodBrowser-edgeStart",
                                                                          "label": "PodBrowser-label",
                                                                          "root": "PodBrowser-root",
                                                                          "sizeSmall": "PodBrowser-sizeSmall",
                                                                        }
                                                                      }
                                                                      color="secondary"
                                                                      component="span"
                                                                      onBlur={[Function]}
                                                                      onFocus={[Function]}
                                                                      tabIndex={null}
                                                                    >
                                                                      <WithStyles(ForwardRef(ButtonBase))
                                                                        centerRipple={true}
                                                                        className="PodBrowser-root PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary PodBrowser-checked PodBrowser-checked PodBrowser-colorSecondary"
                                                                        component="span"
                                                                        disabled={false}
                                                                        focusRipple={true}
                                                                        onBlur={[Function]}
                                                                        onFocus={[Function]}
                                                                        tabIndex={null}
                                                                      >
                                                                        <ForwardRef(ButtonBase)
                                                                          centerRipple={true}
                                                                          className="PodBrowser-root PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary PodBrowser-checked PodBrowser-checked PodBrowser-colorSecondary"
                                                                          classes={
                                                                            Object {
                                                                              "disabled": "PodBrowser-disabled",
                                                                              "focusVisible": "PodBrowser-focusVisible",
                                                                              "root": "PodBrowser-root",
                                                                            }
                                                                          }
                                                                          component="span"
                                                                          disabled={false}
                                                                          focusRipple={true}
                                                                          onBlur={[Function]}
                                                                          onFocus={[Function]}
                                                                          tabIndex={null}
                                                                        >
                                                                          <span
                                                                            aria-disabled={false}
                                                                            className="PodBrowser-root PodBrowser-root PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary PodBrowser-checked PodBrowser-checked PodBrowser-colorSecondary"
                                                                            onBlur={[Function]}
                                                                            onDragLeave={[Function]}
                                                                            onFocus={[Function]}
                                                                            onKeyDown={[Function]}
                                                                            onKeyUp={[Function]}
                                                                            onMouseDown={[Function]}
                                                                            onMouseLeave={[Function]}
                                                                            onMouseUp={[Function]}
                                                                            onTouchEnd={[Function]}
                                                                            onTouchMove={[Function]}
                                                                            onTouchStart={[Function]}
                                                                            tabIndex={null}
                                                                          >
                                                                            <span
                                                                              className="PodBrowser-label"
                                                                            >
                                                                              <input
                                                                                checked={true}
                                                                                className="PodBrowser-input"
                                                                                data-indeterminate={false}
                                                                                name="edit"
                                                                                onChange={[Function]}
                                                                                type="checkbox"
                                                                              />
                                                                              <ForwardRef(CheckBoxIcon)>
                                                                                <WithStyles(ForwardRef(SvgIcon))>
                                                                                  <ForwardRef(SvgIcon)
                                                                                    classes={
                                                                                      Object {
                                                                                        "colorAction": "PodBrowser-colorAction",
                                                                                        "colorDisabled": "PodBrowser-colorDisabled",
                                                                                        "colorError": "PodBrowser-colorError",
                                                                                        "colorPrimary": "PodBrowser-colorPrimary",
                                                                                        "colorSecondary": "PodBrowser-colorSecondary",
                                                                                        "fontSizeInherit": "PodBrowser-fontSizeInherit",
                                                                                        "fontSizeLarge": "PodBrowser-fontSizeLarge",
                                                                                        "fontSizeSmall": "PodBrowser-fontSizeSmall",
                                                                                        "root": "PodBrowser-root",
                                                                                      }
                                                                                    }
                                                                                  >
                                                                                    <svg
                                                                                      aria-hidden={true}
                                                                                      className="PodBrowser-root"
                                                                                      focusable="false"
                                                                                      viewBox="0 0 24 24"
                                                                                    >
                                                                                      <path
                                                                                        d="M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"
                                                                                      />
                                                                                    </svg>
                                                                                  </ForwardRef(SvgIcon)>
                                                                                </WithStyles(ForwardRef(SvgIcon))>
                                                                              </ForwardRef(CheckBoxIcon)>
                                                                            </span>
                                                                            <WithStyles(memo)
                                                                              center={true}
                                                                            >
                                                                              <ForwardRef(TouchRipple)
                                                                                center={true}
                                                                                classes={
                                                                                  Object {
                                                                                    "child": "PodBrowser-child",
                                                                                    "childLeaving": "PodBrowser-childLeaving",
                                                                                    "childPulsate": "PodBrowser-childPulsate",
                                                                                    "ripple": "PodBrowser-ripple",
                                                                                    "ripplePulsate": "PodBrowser-ripplePulsate",
                                                                                    "rippleVisible": "PodBrowser-rippleVisible",
                                                                                    "root": "PodBrowser-root",
                                                                                  }
                                                                                }
                                                                              >
                                                                                <span
                                                                                  className="PodBrowser-root"
                                                                                >
                                                                                  <TransitionGroup
                                                                                    childFactory={[Function]}
                                                                                    component={null}
                                                                                    exit={true}
                                                                                  />
                                                                                </span>
                                                                              </ForwardRef(TouchRipple)>
                                                                            </WithStyles(memo)>
                                                                          </span>
                                                                        </ForwardRef(ButtonBase)>
                                                                      </WithStyles(ForwardRef(ButtonBase))>
                                                                    </ForwardRef(IconButton)>
                                                                  </WithStyles(ForwardRef(IconButton))>
                                                                </ForwardRef(SwitchBase)>
                                                              </WithStyles(ForwardRef(SwitchBase))>
                                                            </ForwardRef(Checkbox)>
                                                          </WithStyles(ForwardRef(Checkbox))>
                                                          <WithStyles(ForwardRef(Typography))
                                                            className="PodBrowser-label PodBrowser-label"
                                                            component="span"
                                                          >
                                                            <ForwardRef(Typography)
                                                              className="PodBrowser-label PodBrowser-label"
                                                              classes={
                                                                Object {
                                                                  "alignCenter": "PodBrowser-alignCenter",
                                                                  "alignJustify": "PodBrowser-alignJustify",
                                                                  "alignLeft": "PodBrowser-alignLeft",
                                                                  "alignRight": "PodBrowser-alignRight",
                                                                  "body1": "PodBrowser-body1",
                                                                  "body2": "PodBrowser-body2",
                                                                  "button": "PodBrowser-button",
                                                                  "caption": "PodBrowser-caption",
                                                                  "colorError": "PodBrowser-colorError",
                                                                  "colorInherit": "PodBrowser-colorInherit",
                                                                  "colorPrimary": "PodBrowser-colorPrimary",
                                                                  "colorSecondary": "PodBrowser-colorSecondary",
                                                                  "colorTextPrimary": "PodBrowser-colorTextPrimary",
                                                                  "colorTextSecondary": "PodBrowser-colorTextSecondary",
                                                                  "displayBlock": "PodBrowser-displayBlock",
                                                                  "displayInline": "PodBrowser-displayInline",
                                                                  "gutterBottom": "PodBrowser-gutterBottom",
                                                                  "h1": "PodBrowser-h1",
                                                                  "h2": "PodBrowser-h2",
                                                                  "h3": "PodBrowser-h3",
                                                                  "h4": "PodBrowser-h4",
                                                                  "h5": "PodBrowser-h5",
                                                                  "h6": "PodBrowser-h6",
                                                                  "noWrap": "PodBrowser-noWrap",
                                                                  "overline": "PodBrowser-overline",
                                                                  "paragraph": "PodBrowser-paragraph",
                                                                  "root": "PodBrowser-root",
                                                                  "srOnly": "PodBrowser-srOnly",
                                                                  "subtitle1": "PodBrowser-subtitle1",
                                                                  "subtitle2": "PodBrowser-subtitle2",
                                                                }
                                                              }
                                                              component="span"
                                                            >
                                                              <span
                                                                className="PodBrowser-root PodBrowser-label PodBrowser-label PodBrowser-body1"
                                                              >
                                                                Edit
                                                              </span>
                                                            </ForwardRef(Typography)>
                                                          </WithStyles(ForwardRef(Typography))>
                                                        </label>
                                                      </ForwardRef(FormControlLabel)>
                                                    </WithStyles(ForwardRef(FormControlLabel))>
                                                  </li>
                                                </ForwardRef(ListItem)>
                                              </WithStyles(ForwardRef(ListItem))>
                                            </PermissionCheckbox>
                                            <PermissionCheckbox
                                              classes={
                                                Object {
                                                  "checkbox": "PodBrowser-checkbox",
                                                  "container": "PodBrowser-container",
                                                  "label": "PodBrowser-label",
                                                  "listItem": "PodBrowser-listItem",
                                                  "selectionClosed": "PodBrowser-selectionClosed",
                                                  "selectionOpen": "PodBrowser-selectionOpen",
                                                  "summary": "PodBrowser-summary",
                                                }
                                              }
                                              label="Append"
                                              onChange={[Function]}
                                              value={true}
                                            >
                                              <WithStyles(ForwardRef(ListItem))
                                                className="PodBrowser-listItem"
                                              >
                                                <ForwardRef(ListItem)
                                                  className="PodBrowser-listItem"
                                                  classes={
                                                    Object {
                                                      "alignItemsFlexStart": "PodBrowser-alignItemsFlexStart",
                                                      "button": "PodBrowser-button",
                                                      "container": "PodBrowser-container",
                                                      "dense": "PodBrowser-dense",
                                                      "disabled": "PodBrowser-disabled",
                                                      "divider": "PodBrowser-divider",
                                                      "focusVisible": "PodBrowser-focusVisible",
                                                      "gutters": "PodBrowser-gutters",
                                                      "root": "PodBrowser-root",
                                                      "secondaryAction": "PodBrowser-secondaryAction",
                                                      "selected": "PodBrowser-selected",
                                                    }
                                                  }
                                                >
                                                  <li
                                                    className="PodBrowser-root PodBrowser-listItem PodBrowser-gutters"
                                                    disabled={false}
                                                  >
                                                    <WithStyles(ForwardRef(FormControlLabel))
                                                      classes={
                                                        Object {
                                                          "label": "PodBrowser-label",
                                                        }
                                                      }
                                                      control={
                                                        <WithStyles(ForwardRef(Checkbox))
                                                          checked={true}
                                                          classes={
                                                            Object {
                                                              "root": "PodBrowser-checkbox",
                                                            }
                                                          }
                                                          name="append"
                                                          onChange={[Function]}
                                                        />
                                                      }
                                                      key=".0"
                                                      label="Append"
                                                    >
                                                      <ForwardRef(FormControlLabel)
                                                        classes={
                                                          Object {
                                                            "disabled": "PodBrowser-disabled",
                                                            "label": "PodBrowser-label PodBrowser-label",
                                                            "labelPlacementBottom": "PodBrowser-labelPlacementBottom",
                                                            "labelPlacementStart": "PodBrowser-labelPlacementStart",
                                                            "labelPlacementTop": "PodBrowser-labelPlacementTop",
                                                            "root": "PodBrowser-root",
                                                          }
                                                        }
                                                        control={
                                                          <WithStyles(ForwardRef(Checkbox))
                                                            checked={true}
                                                            classes={
                                                              Object {
                                                                "root": "PodBrowser-checkbox",
                                                              }
                                                            }
                                                            name="append"
                                                            onChange={[Function]}
                                                          />
                                                        }
                                                        label="Append"
                                                      >
                                                        <label
                                                          className="PodBrowser-root"
                                                        >
                                                          <WithStyles(ForwardRef(Checkbox))
                                                            checked={true}
                                                            classes={
                                                              Object {
                                                                "root": "PodBrowser-checkbox",
                                                              }
                                                            }
                                                            name="append"
                                                            onChange={[Function]}
                                                          >
                                                            <ForwardRef(Checkbox)
                                                              checked={true}
                                                              classes={
                                                                Object {
                                                                  "checked": "PodBrowser-checked",
                                                                  "colorPrimary": "PodBrowser-colorPrimary",
                                                                  "colorSecondary": "PodBrowser-colorSecondary",
                                                                  "disabled": "PodBrowser-disabled",
                                                                  "indeterminate": "PodBrowser-indeterminate",
                                                                  "root": "PodBrowser-root PodBrowser-checkbox",
                                                                }
                                                              }
                                                              name="append"
                                                              onChange={[Function]}
                                                            >
                                                              <WithStyles(ForwardRef(SwitchBase))
                                                                checked={true}
                                                                checkedIcon={<Memo />}
                                                                classes={
                                                                  Object {
                                                                    "checked": "PodBrowser-checked",
                                                                    "disabled": "PodBrowser-disabled",
                                                                    "root": "PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary",
                                                                  }
                                                                }
                                                                color="secondary"
                                                                icon={<Memo />}
                                                                inputProps={
                                                                  Object {
                                                                    "data-indeterminate": false,
                                                                  }
                                                                }
                                                                name="append"
                                                                onChange={[Function]}
                                                                type="checkbox"
                                                              >
                                                                <ForwardRef(SwitchBase)
                                                                  checked={true}
                                                                  checkedIcon={<Memo />}
                                                                  classes={
                                                                    Object {
                                                                      "checked": "PodBrowser-checked PodBrowser-checked",
                                                                      "disabled": "PodBrowser-disabled PodBrowser-disabled",
                                                                      "input": "PodBrowser-input",
                                                                      "root": "PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary",
                                                                    }
                                                                  }
                                                                  color="secondary"
                                                                  icon={<Memo />}
                                                                  inputProps={
                                                                    Object {
                                                                      "data-indeterminate": false,
                                                                    }
                                                                  }
                                                                  name="append"
                                                                  onChange={[Function]}
                                                                  type="checkbox"
                                                                >
                                                                  <WithStyles(ForwardRef(IconButton))
                                                                    className="PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary PodBrowser-checked PodBrowser-checked"
                                                                    color="secondary"
                                                                    component="span"
                                                                    onBlur={[Function]}
                                                                    onFocus={[Function]}
                                                                    tabIndex={null}
                                                                  >
                                                                    <ForwardRef(IconButton)
                                                                      className="PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary PodBrowser-checked PodBrowser-checked"
                                                                      classes={
                                                                        Object {
                                                                          "colorInherit": "PodBrowser-colorInherit",
                                                                          "colorPrimary": "PodBrowser-colorPrimary",
                                                                          "colorSecondary": "PodBrowser-colorSecondary",
                                                                          "disabled": "PodBrowser-disabled",
                                                                          "edgeEnd": "PodBrowser-edgeEnd",
                                                                          "edgeStart": "PodBrowser-edgeStart",
                                                                          "label": "PodBrowser-label",
                                                                          "root": "PodBrowser-root",
                                                                          "sizeSmall": "PodBrowser-sizeSmall",
                                                                        }
                                                                      }
                                                                      color="secondary"
                                                                      component="span"
                                                                      onBlur={[Function]}
                                                                      onFocus={[Function]}
                                                                      tabIndex={null}
                                                                    >
                                                                      <WithStyles(ForwardRef(ButtonBase))
                                                                        centerRipple={true}
                                                                        className="PodBrowser-root PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary PodBrowser-checked PodBrowser-checked PodBrowser-colorSecondary"
                                                                        component="span"
                                                                        disabled={false}
                                                                        focusRipple={true}
                                                                        onBlur={[Function]}
                                                                        onFocus={[Function]}
                                                                        tabIndex={null}
                                                                      >
                                                                        <ForwardRef(ButtonBase)
                                                                          centerRipple={true}
                                                                          className="PodBrowser-root PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary PodBrowser-checked PodBrowser-checked PodBrowser-colorSecondary"
                                                                          classes={
                                                                            Object {
                                                                              "disabled": "PodBrowser-disabled",
                                                                              "focusVisible": "PodBrowser-focusVisible",
                                                                              "root": "PodBrowser-root",
                                                                            }
                                                                          }
                                                                          component="span"
                                                                          disabled={false}
                                                                          focusRipple={true}
                                                                          onBlur={[Function]}
                                                                          onFocus={[Function]}
                                                                          tabIndex={null}
                                                                        >
                                                                          <span
                                                                            aria-disabled={false}
                                                                            className="PodBrowser-root PodBrowser-root PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary PodBrowser-checked PodBrowser-checked PodBrowser-colorSecondary"
                                                                            onBlur={[Function]}
                                                                            onDragLeave={[Function]}
                                                                            onFocus={[Function]}
                                                                            onKeyDown={[Function]}
                                                                            onKeyUp={[Function]}
                                                                            onMouseDown={[Function]}
                                                                            onMouseLeave={[Function]}
                                                                            onMouseUp={[Function]}
                                                                            onTouchEnd={[Function]}
                                                                            onTouchMove={[Function]}
                                                                            onTouchStart={[Function]}
                                                                            tabIndex={null}
                                                                          >
                                                                            <span
                                                                              className="PodBrowser-label"
                                                                            >
                                                                              <input
                                                                                checked={true}
                                                                                className="PodBrowser-input"
                                                                                data-indeterminate={false}
                                                                                name="append"
                                                                                onChange={[Function]}
                                                                                type="checkbox"
                                                                              />
                                                                              <ForwardRef(CheckBoxIcon)>
                                                                                <WithStyles(ForwardRef(SvgIcon))>
                                                                                  <ForwardRef(SvgIcon)
                                                                                    classes={
                                                                                      Object {
                                                                                        "colorAction": "PodBrowser-colorAction",
                                                                                        "colorDisabled": "PodBrowser-colorDisabled",
                                                                                        "colorError": "PodBrowser-colorError",
                                                                                        "colorPrimary": "PodBrowser-colorPrimary",
                                                                                        "colorSecondary": "PodBrowser-colorSecondary",
                                                                                        "fontSizeInherit": "PodBrowser-fontSizeInherit",
                                                                                        "fontSizeLarge": "PodBrowser-fontSizeLarge",
                                                                                        "fontSizeSmall": "PodBrowser-fontSizeSmall",
                                                                                        "root": "PodBrowser-root",
                                                                                      }
                                                                                    }
                                                                                  >
                                                                                    <svg
                                                                                      aria-hidden={true}
                                                                                      className="PodBrowser-root"
                                                                                      focusable="false"
                                                                                      viewBox="0 0 24 24"
                                                                                    >
                                                                                      <path
                                                                                        d="M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"
                                                                                      />
                                                                                    </svg>
                                                                                  </ForwardRef(SvgIcon)>
                                                                                </WithStyles(ForwardRef(SvgIcon))>
                                                                              </ForwardRef(CheckBoxIcon)>
                                                                            </span>
                                                                            <WithStyles(memo)
                                                                              center={true}
                                                                            >
                                                                              <ForwardRef(TouchRipple)
                                                                                center={true}
                                                                                classes={
                                                                                  Object {
                                                                                    "child": "PodBrowser-child",
                                                                                    "childLeaving": "PodBrowser-childLeaving",
                                                                                    "childPulsate": "PodBrowser-childPulsate",
                                                                                    "ripple": "PodBrowser-ripple",
                                                                                    "ripplePulsate": "PodBrowser-ripplePulsate",
                                                                                    "rippleVisible": "PodBrowser-rippleVisible",
                                                                                    "root": "PodBrowser-root",
                                                                                  }
                                                                                }
                                                                              >
                                                                                <span
                                                                                  className="PodBrowser-root"
                                                                                >
                                                                                  <TransitionGroup
                                                                                    childFactory={[Function]}
                                                                                    component={null}
                                                                                    exit={true}
                                                                                  />
                                                                                </span>
                                                                              </ForwardRef(TouchRipple)>
                                                                            </WithStyles(memo)>
                                                                          </span>
                                                                        </ForwardRef(ButtonBase)>
                                                                      </WithStyles(ForwardRef(ButtonBase))>
                                                                    </ForwardRef(IconButton)>
                                                                  </WithStyles(ForwardRef(IconButton))>
                                                                </ForwardRef(SwitchBase)>
                                                              </WithStyles(ForwardRef(SwitchBase))>
                                                            </ForwardRef(Checkbox)>
                                                          </WithStyles(ForwardRef(Checkbox))>
                                                          <WithStyles(ForwardRef(Typography))
                                                            className="PodBrowser-label PodBrowser-label"
                                                            component="span"
                                                          >
                                                            <ForwardRef(Typography)
                                                              className="PodBrowser-label PodBrowser-label"
                                                              classes={
                                                                Object {
                                                                  "alignCenter": "PodBrowser-alignCenter",
                                                                  "alignJustify": "PodBrowser-alignJustify",
                                                                  "alignLeft": "PodBrowser-alignLeft",
                                                                  "alignRight": "PodBrowser-alignRight",
                                                                  "body1": "PodBrowser-body1",
                                                                  "body2": "PodBrowser-body2",
                                                                  "button": "PodBrowser-button",
                                                                  "caption": "PodBrowser-caption",
                                                                  "colorError": "PodBrowser-colorError",
                                                                  "colorInherit": "PodBrowser-colorInherit",
                                                                  "colorPrimary": "PodBrowser-colorPrimary",
                                                                  "colorSecondary": "PodBrowser-colorSecondary",
                                                                  "colorTextPrimary": "PodBrowser-colorTextPrimary",
                                                                  "colorTextSecondary": "PodBrowser-colorTextSecondary",
                                                                  "displayBlock": "PodBrowser-displayBlock",
                                                                  "displayInline": "PodBrowser-displayInline",
                                                                  "gutterBottom": "PodBrowser-gutterBottom",
                                                                  "h1": "PodBrowser-h1",
                                                                  "h2": "PodBrowser-h2",
                                                                  "h3": "PodBrowser-h3",
                                                                  "h4": "PodBrowser-h4",
                                                                  "h5": "PodBrowser-h5",
                                                                  "h6": "PodBrowser-h6",
                                                                  "noWrap": "PodBrowser-noWrap",
                                                                  "overline": "PodBrowser-overline",
                                                                  "paragraph": "PodBrowser-paragraph",
                                                                  "root": "PodBrowser-root",
                                                                  "srOnly": "PodBrowser-srOnly",
                                                                  "subtitle1": "PodBrowser-subtitle1",
                                                                  "subtitle2": "PodBrowser-subtitle2",
                                                                }
                                                              }
                                                              component="span"
                                                            >
                                                              <span
                                                                className="PodBrowser-root PodBrowser-label PodBrowser-label PodBrowser-body1"
                                                              >
                                                                Append
                                                              </span>
                                                            </ForwardRef(Typography)>
                                                          </WithStyles(ForwardRef(Typography))>
                                                        </label>
                                                      </ForwardRef(FormControlLabel)>
                                                    </WithStyles(ForwardRef(FormControlLabel))>
                                                  </li>
                                                </ForwardRef(ListItem)>
                                              </WithStyles(ForwardRef(ListItem))>
                                            </PermissionCheckbox>
                                            <PermissionCheckbox
                                              classes={
                                                Object {
                                                  "checkbox": "PodBrowser-checkbox",
                                                  "container": "PodBrowser-container",
                                                  "label": "PodBrowser-label",
                                                  "listItem": "PodBrowser-listItem",
                                                  "selectionClosed": "PodBrowser-selectionClosed",
                                                  "selectionOpen": "PodBrowser-selectionOpen",
                                                  "summary": "PodBrowser-summary",
                                                }
                                              }
                                              label="Control"
                                              onChange={[Function]}
                                              value={true}
                                            >
                                              <WithStyles(ForwardRef(ListItem))
                                                className="PodBrowser-listItem"
                                              >
                                                <ForwardRef(ListItem)
                                                  className="PodBrowser-listItem"
                                                  classes={
                                                    Object {
                                                      "alignItemsFlexStart": "PodBrowser-alignItemsFlexStart",
                                                      "button": "PodBrowser-button",
                                                      "container": "PodBrowser-container",
                                                      "dense": "PodBrowser-dense",
                                                      "disabled": "PodBrowser-disabled",
                                                      "divider": "PodBrowser-divider",
                                                      "focusVisible": "PodBrowser-focusVisible",
                                                      "gutters": "PodBrowser-gutters",
                                                      "root": "PodBrowser-root",
                                                      "secondaryAction": "PodBrowser-secondaryAction",
                                                      "selected": "PodBrowser-selected",
                                                    }
                                                  }
                                                >
                                                  <li
                                                    className="PodBrowser-root PodBrowser-listItem PodBrowser-gutters"
                                                    disabled={false}
                                                  >
                                                    <WithStyles(ForwardRef(FormControlLabel))
                                                      classes={
                                                        Object {
                                                          "label": "PodBrowser-label",
                                                        }
                                                      }
                                                      control={
                                                        <WithStyles(ForwardRef(Checkbox))
                                                          checked={true}
                                                          classes={
                                                            Object {
                                                              "root": "PodBrowser-checkbox",
                                                            }
                                                          }
                                                          name="control"
                                                          onChange={[Function]}
                                                        />
                                                      }
                                                      key=".0"
                                                      label="Control"
                                                    >
                                                      <ForwardRef(FormControlLabel)
                                                        classes={
                                                          Object {
                                                            "disabled": "PodBrowser-disabled",
                                                            "label": "PodBrowser-label PodBrowser-label",
                                                            "labelPlacementBottom": "PodBrowser-labelPlacementBottom",
                                                            "labelPlacementStart": "PodBrowser-labelPlacementStart",
                                                            "labelPlacementTop": "PodBrowser-labelPlacementTop",
                                                            "root": "PodBrowser-root",
                                                          }
                                                        }
                                                        control={
                                                          <WithStyles(ForwardRef(Checkbox))
                                                            checked={true}
                                                            classes={
                                                              Object {
                                                                "root": "PodBrowser-checkbox",
                                                              }
                                                            }
                                                            name="control"
                                                            onChange={[Function]}
                                                          />
                                                        }
                                                        label="Control"
                                                      >
                                                        <label
                                                          className="PodBrowser-root"
                                                        >
                                                          <WithStyles(ForwardRef(Checkbox))
                                                            checked={true}
                                                            classes={
                                                              Object {
                                                                "root": "PodBrowser-checkbox",
                                                              }
                                                            }
                                                            name="control"
                                                            onChange={[Function]}
                                                          >
                                                            <ForwardRef(Checkbox)
                                                              checked={true}
                                                              classes={
                                                                Object {
                                                                  "checked": "PodBrowser-checked",
                                                                  "colorPrimary": "PodBrowser-colorPrimary",
                                                                  "colorSecondary": "PodBrowser-colorSecondary",
                                                                  "disabled": "PodBrowser-disabled",
                                                                  "indeterminate": "PodBrowser-indeterminate",
                                                                  "root": "PodBrowser-root PodBrowser-checkbox",
                                                                }
                                                              }
                                                              name="control"
                                                              onChange={[Function]}
                                                            >
                                                              <WithStyles(ForwardRef(SwitchBase))
                                                                checked={true}
                                                                checkedIcon={<Memo />}
                                                                classes={
                                                                  Object {
                                                                    "checked": "PodBrowser-checked",
                                                                    "disabled": "PodBrowser-disabled",
                                                                    "root": "PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary",
                                                                  }
                                                                }
                                                                color="secondary"
                                                                icon={<Memo />}
                                                                inputProps={
                                                                  Object {
                                                                    "data-indeterminate": false,
                                                                  }
                                                                }
                                                                name="control"
                                                                onChange={[Function]}
                                                                type="checkbox"
                                                              >
                                                                <ForwardRef(SwitchBase)
                                                                  checked={true}
                                                                  checkedIcon={<Memo />}
                                                                  classes={
                                                                    Object {
                                                                      "checked": "PodBrowser-checked PodBrowser-checked",
                                                                      "disabled": "PodBrowser-disabled PodBrowser-disabled",
                                                                      "input": "PodBrowser-input",
                                                                      "root": "PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary",
                                                                    }
                                                                  }
                                                                  color="secondary"
                                                                  icon={<Memo />}
                                                                  inputProps={
                                                                    Object {
                                                                      "data-indeterminate": false,
                                                                    }
                                                                  }
                                                                  name="control"
                                                                  onChange={[Function]}
                                                                  type="checkbox"
                                                                >
                                                                  <WithStyles(ForwardRef(IconButton))
                                                                    className="PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary PodBrowser-checked PodBrowser-checked"
                                                                    color="secondary"
                                                                    component="span"
                                                                    onBlur={[Function]}
                                                                    onFocus={[Function]}
                                                                    tabIndex={null}
                                                                  >
                                                                    <ForwardRef(IconButton)
                                                                      className="PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary PodBrowser-checked PodBrowser-checked"
                                                                      classes={
                                                                        Object {
                                                                          "colorInherit": "PodBrowser-colorInherit",
                                                                          "colorPrimary": "PodBrowser-colorPrimary",
                                                                          "colorSecondary": "PodBrowser-colorSecondary",
                                                                          "disabled": "PodBrowser-disabled",
                                                                          "edgeEnd": "PodBrowser-edgeEnd",
                                                                          "edgeStart": "PodBrowser-edgeStart",
                                                                          "label": "PodBrowser-label",
                                                                          "root": "PodBrowser-root",
                                                                          "sizeSmall": "PodBrowser-sizeSmall",
                                                                        }
                                                                      }
                                                                      color="secondary"
                                                                      component="span"
                                                                      onBlur={[Function]}
                                                                      onFocus={[Function]}
                                                                      tabIndex={null}
                                                                    >
                                                                      <WithStyles(ForwardRef(ButtonBase))
                                                                        centerRipple={true}
                                                                        className="PodBrowser-root PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary PodBrowser-checked PodBrowser-checked PodBrowser-colorSecondary"
                                                                        component="span"
                                                                        disabled={false}
                                                                        focusRipple={true}
                                                                        onBlur={[Function]}
                                                                        onFocus={[Function]}
                                                                        tabIndex={null}
                                                                      >
                                                                        <ForwardRef(ButtonBase)
                                                                          centerRipple={true}
                                                                          className="PodBrowser-root PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary PodBrowser-checked PodBrowser-checked PodBrowser-colorSecondary"
                                                                          classes={
                                                                            Object {
                                                                              "disabled": "PodBrowser-disabled",
                                                                              "focusVisible": "PodBrowser-focusVisible",
                                                                              "root": "PodBrowser-root",
                                                                            }
                                                                          }
                                                                          component="span"
                                                                          disabled={false}
                                                                          focusRipple={true}
                                                                          onBlur={[Function]}
                                                                          onFocus={[Function]}
                                                                          tabIndex={null}
                                                                        >
                                                                          <span
                                                                            aria-disabled={false}
                                                                            className="PodBrowser-root PodBrowser-root PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary PodBrowser-checked PodBrowser-checked PodBrowser-colorSecondary"
                                                                            onBlur={[Function]}
                                                                            onDragLeave={[Function]}
                                                                            onFocus={[Function]}
                                                                            onKeyDown={[Function]}
                                                                            onKeyUp={[Function]}
                                                                            onMouseDown={[Function]}
                                                                            onMouseLeave={[Function]}
                                                                            onMouseUp={[Function]}
                                                                            onTouchEnd={[Function]}
                                                                            onTouchMove={[Function]}
                                                                            onTouchStart={[Function]}
                                                                            tabIndex={null}
                                                                          >
                                                                            <span
                                                                              className="PodBrowser-label"
                                                                            >
                                                                              <input
                                                                                checked={true}
                                                                                className="PodBrowser-input"
                                                                                data-indeterminate={false}
                                                                                name="control"
                                                                                onChange={[Function]}
                                                                                type="checkbox"
                                                                              />
                                                                              <ForwardRef(CheckBoxIcon)>
                                                                                <WithStyles(ForwardRef(SvgIcon))>
                                                                                  <ForwardRef(SvgIcon)
                                                                                    classes={
                                                                                      Object {
                                                                                        "colorAction": "PodBrowser-colorAction",
                                                                                        "colorDisabled": "PodBrowser-colorDisabled",
                                                                                        "colorError": "PodBrowser-colorError",
                                                                                        "colorPrimary": "PodBrowser-colorPrimary",
                                                                                        "colorSecondary": "PodBrowser-colorSecondary",
                                                                                        "fontSizeInherit": "PodBrowser-fontSizeInherit",
                                                                                        "fontSizeLarge": "PodBrowser-fontSizeLarge",
                                                                                        "fontSizeSmall": "PodBrowser-fontSizeSmall",
                                                                                        "root": "PodBrowser-root",
                                                                                      }
                                                                                    }
                                                                                  >
                                                                                    <svg
                                                                                      aria-hidden={true}
                                                                                      className="PodBrowser-root"
                                                                                      focusable="false"
                                                                                      viewBox="0 0 24 24"
                                                                                    >
                                                                                      <path
                                                                                        d="M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"
                                                                                      />
                                                                                    </svg>
                                                                                  </ForwardRef(SvgIcon)>
                                                                                </WithStyles(ForwardRef(SvgIcon))>
                                                                              </ForwardRef(CheckBoxIcon)>
                                                                            </span>
                                                                            <WithStyles(memo)
                                                                              center={true}
                                                                            >
                                                                              <ForwardRef(TouchRipple)
                                                                                center={true}
                                                                                classes={
                                                                                  Object {
                                                                                    "child": "PodBrowser-child",
                                                                                    "childLeaving": "PodBrowser-childLeaving",
                                                                                    "childPulsate": "PodBrowser-childPulsate",
                                                                                    "ripple": "PodBrowser-ripple",
                                                                                    "ripplePulsate": "PodBrowser-ripplePulsate",
                                                                                    "rippleVisible": "PodBrowser-rippleVisible",
                                                                                    "root": "PodBrowser-root",
                                                                                  }
                                                                                }
                                                                              >
                                                                                <span
                                                                                  className="PodBrowser-root"
                                                                                >
                                                                                  <TransitionGroup
                                                                                    childFactory={[Function]}
                                                                                    component={null}
                                                                                    exit={true}
                                                                                  />
                                                                                </span>
                                                                              </ForwardRef(TouchRipple)>
                                                                            </WithStyles(memo)>
                                                                          </span>
                                                                        </ForwardRef(ButtonBase)>
                                                                      </WithStyles(ForwardRef(ButtonBase))>
                                                                    </ForwardRef(IconButton)>
                                                                  </WithStyles(ForwardRef(IconButton))>
                                                                </ForwardRef(SwitchBase)>
                                                              </WithStyles(ForwardRef(SwitchBase))>
                                                            </ForwardRef(Checkbox)>
                                                          </WithStyles(ForwardRef(Checkbox))>
                                                          <WithStyles(ForwardRef(Typography))
                                                            className="PodBrowser-label PodBrowser-label"
                                                            component="span"
                                                          >
                                                            <ForwardRef(Typography)
                                                              className="PodBrowser-label PodBrowser-label"
                                                              classes={
                                                                Object {
                                                                  "alignCenter": "PodBrowser-alignCenter",
                                                                  "alignJustify": "PodBrowser-alignJustify",
                                                                  "alignLeft": "PodBrowser-alignLeft",
                                                                  "alignRight": "PodBrowser-alignRight",
                                                                  "body1": "PodBrowser-body1",
                                                                  "body2": "PodBrowser-body2",
                                                                  "button": "PodBrowser-button",
                                                                  "caption": "PodBrowser-caption",
                                                                  "colorError": "PodBrowser-colorError",
                                                                  "colorInherit": "PodBrowser-colorInherit",
                                                                  "colorPrimary": "PodBrowser-colorPrimary",
                                                                  "colorSecondary": "PodBrowser-colorSecondary",
                                                                  "colorTextPrimary": "PodBrowser-colorTextPrimary",
                                                                  "colorTextSecondary": "PodBrowser-colorTextSecondary",
                                                                  "displayBlock": "PodBrowser-displayBlock",
                                                                  "displayInline": "PodBrowser-displayInline",
                                                                  "gutterBottom": "PodBrowser-gutterBottom",
                                                                  "h1": "PodBrowser-h1",
                                                                  "h2": "PodBrowser-h2",
                                                                  "h3": "PodBrowser-h3",
                                                                  "h4": "PodBrowser-h4",
                                                                  "h5": "PodBrowser-h5",
                                                                  "h6": "PodBrowser-h6",
                                                                  "noWrap": "PodBrowser-noWrap",
                                                                  "overline": "PodBrowser-overline",
                                                                  "paragraph": "PodBrowser-paragraph",
                                                                  "root": "PodBrowser-root",
                                                                  "srOnly": "PodBrowser-srOnly",
                                                                  "subtitle1": "PodBrowser-subtitle1",
                                                                  "subtitle2": "PodBrowser-subtitle2",
                                                                }
                                                              }
                                                              component="span"
                                                            >
                                                              <span
                                                                className="PodBrowser-root PodBrowser-label PodBrowser-label PodBrowser-body1"
                                                              >
                                                                Control
                                                              </span>
                                                            </ForwardRef(Typography)>
                                                          </WithStyles(ForwardRef(Typography))>
                                                        </label>
                                                      </ForwardRef(FormControlLabel)>
                                                    </WithStyles(ForwardRef(FormControlLabel))>
                                                  </li>
                                                </ForwardRef(ListItem)>
                                              </WithStyles(ForwardRef(ListItem))>
                                            </PermissionCheckbox>
                                          </ul>
                                        </ForwardRef(List)>
                                      </WithStyles(ForwardRef(List))>
                                      <WithStyles(ForwardRef(Button))
                                        onClick={[Function]}
                                        variant="contained"
                                      >
                                        <ForwardRef(Button)
                                          classes={
                                            Object {
                                              "colorInherit": "PodBrowser-colorInherit",
                                              "contained": "PodBrowser-contained",
                                              "containedPrimary": "PodBrowser-containedPrimary",
                                              "containedSecondary": "PodBrowser-containedSecondary",
                                              "containedSizeLarge": "PodBrowser-containedSizeLarge",
                                              "containedSizeSmall": "PodBrowser-containedSizeSmall",
                                              "disableElevation": "PodBrowser-disableElevation",
                                              "disabled": "PodBrowser-disabled",
                                              "endIcon": "PodBrowser-endIcon",
                                              "focusVisible": "PodBrowser-focusVisible",
                                              "fullWidth": "PodBrowser-fullWidth",
                                              "iconSizeLarge": "PodBrowser-iconSizeLarge",
                                              "iconSizeMedium": "PodBrowser-iconSizeMedium",
                                              "iconSizeSmall": "PodBrowser-iconSizeSmall",
                                              "label": "PodBrowser-label",
                                              "outlined": "PodBrowser-outlined",
                                              "outlinedPrimary": "PodBrowser-outlinedPrimary",
                                              "outlinedSecondary": "PodBrowser-outlinedSecondary",
                                              "outlinedSizeLarge": "PodBrowser-outlinedSizeLarge",
                                              "outlinedSizeSmall": "PodBrowser-outlinedSizeSmall",
                                              "root": "PodBrowser-root",
                                              "sizeLarge": "PodBrowser-sizeLarge",
                                              "sizeSmall": "PodBrowser-sizeSmall",
                                              "startIcon": "PodBrowser-startIcon",
                                              "text": "PodBrowser-text",
                                              "textPrimary": "PodBrowser-textPrimary",
                                              "textSecondary": "PodBrowser-textSecondary",
                                              "textSizeLarge": "PodBrowser-textSizeLarge",
                                              "textSizeSmall": "PodBrowser-textSizeSmall",
                                            }
                                          }
                                          onClick={[Function]}
                                          variant="contained"
                                        >
                                          <WithStyles(ForwardRef(ButtonBase))
                                            className="PodBrowser-root PodBrowser-contained"
                                            component="button"
                                            disabled={false}
                                            focusRipple={true}
                                            focusVisibleClassName="PodBrowser-focusVisible"
                                            onClick={[Function]}
                                            type="button"
                                          >
                                            <ForwardRef(ButtonBase)
                                              className="PodBrowser-root PodBrowser-contained"
                                              classes={
                                                Object {
                                                  "disabled": "PodBrowser-disabled",
                                                  "focusVisible": "PodBrowser-focusVisible",
                                                  "root": "PodBrowser-root",
                                                }
                                              }
                                              component="button"
                                              disabled={false}
                                              focusRipple={true}
                                              focusVisibleClassName="PodBrowser-focusVisible"
                                              onClick={[Function]}
                                              type="button"
                                            >
                                              <button
                                                className="PodBrowser-root PodBrowser-root PodBrowser-contained"
                                                disabled={false}
                                                onBlur={[Function]}
                                                onClick={[Function]}
                                                onDragLeave={[Function]}
                                                onFocus={[Function]}
                                                onKeyDown={[Function]}
                                                onKeyUp={[Function]}
                                                onMouseDown={[Function]}
                                                onMouseLeave={[Function]}
                                                onMouseUp={[Function]}
                                                onTouchEnd={[Function]}
                                                onTouchMove={[Function]}
                                                onTouchStart={[Function]}
                                                tabIndex={0}
                                                type="button"
                                              >
                                                <span
                                                  className="PodBrowser-label"
                                                >
                                                  Save
                                                </span>
                                                <WithStyles(memo)
                                                  center={false}
                                                >
                                                  <ForwardRef(TouchRipple)
                                                    center={false}
                                                    classes={
                                                      Object {
                                                        "child": "PodBrowser-child",
                                                        "childLeaving": "PodBrowser-childLeaving",
                                                        "childPulsate": "PodBrowser-childPulsate",
                                                        "ripple": "PodBrowser-ripple",
                                                        "ripplePulsate": "PodBrowser-ripplePulsate",
                                                        "rippleVisible": "PodBrowser-rippleVisible",
                                                        "root": "PodBrowser-root",
                                                      }
                                                    }
                                                  >
                                                    <span
                                                      className="PodBrowser-root"
                                                    >
                                                      <TransitionGroup
                                                        childFactory={[Function]}
                                                        component={null}
                                                        exit={true}
                                                      />
                                                    </span>
                                                  </ForwardRef(TouchRipple)>
                                                </WithStyles(memo)>
                                              </button>
                                            </ForwardRef(ButtonBase)>
                                          </WithStyles(ForwardRef(ButtonBase))>
                                        </ForwardRef(Button)>
                                      </WithStyles(ForwardRef(Button))>
                                    </section>
                                  </div>
                                </PermissionsForm>
                              </li>
                            </ForwardRef(ListItem)>
                          </WithStyles(ForwardRef(ListItem))>
                        </ul>
                      </ForwardRef(List)>
                    </WithStyles(ForwardRef(List))>
                  </AgentAccessList>
                </ul>
              </ForwardRef(List)>
            </WithStyles(ForwardRef(List))>
          </section>
        </ThirdPartyPermissions>
        <WithStyles(ForwardRef(Divider))>
          <ForwardRef(Divider)
            classes={
              Object {
                "absolute": "PodBrowser-absolute",
                "flexItem": "PodBrowser-flexItem",
                "inset": "PodBrowser-inset",
                "light": "PodBrowser-light",
                "middle": "PodBrowser-middle",
                "root": "PodBrowser-root",
                "vertical": "PodBrowser-vertical",
              }
            }
          >
            <hr
              className="PodBrowser-root"
            />
          </ForwardRef(Divider)>
        </WithStyles(ForwardRef(Divider))>
        <section
          className="PodBrowser-centeredSection"
        >
          <AgentSearchForm
            buttonText="Add"
            heading="Grant Permission"
            onSubmit={[Function]}
          >
            <h5
              className="PodBrowser-content-h5"
            >
              Grant Permission
            </h5>
            <WithStyles(ForwardRef(FormControl))
              className="PodBrowser-agentInput"
            >
              <ForwardRef(FormControl)
                className="PodBrowser-agentInput"
                classes={
                  Object {
                    "fullWidth": "PodBrowser-fullWidth",
                    "marginDense": "PodBrowser-marginDense",
                    "marginNormal": "PodBrowser-marginNormal",
                    "root": "PodBrowser-root",
                  }
                }
              >
                <div
                  className="PodBrowser-root PodBrowser-agentInput"
                >
                  <WithStyles(ForwardRef(InputLabel))
                    htmlFor={
                      Array [
                        "id1",
                      ]
                    }
                  >
                    <ForwardRef(InputLabel)
                      classes={
                        Object {
                          "animated": "PodBrowser-animated",
                          "asterisk": "PodBrowser-asterisk",
                          "disabled": "PodBrowser-disabled",
                          "error": "PodBrowser-error",
                          "filled": "PodBrowser-filled",
                          "focused": "PodBrowser-focused",
                          "formControl": "PodBrowser-formControl",
                          "marginDense": "PodBrowser-marginDense",
                          "outlined": "PodBrowser-outlined",
                          "required": "PodBrowser-required",
                          "root": "PodBrowser-root",
                          "shrink": "PodBrowser-shrink",
                        }
                      }
                      htmlFor={
                        Array [
                          "id1",
                        ]
                      }
                    >
                      <WithStyles(ForwardRef(FormLabel))
                        className="PodBrowser-root PodBrowser-formControl PodBrowser-animated PodBrowser-shrink"
                        classes={
                          Object {
                            "asterisk": "PodBrowser-asterisk",
                            "disabled": "PodBrowser-disabled",
                            "error": "PodBrowser-error",
                            "focused": "PodBrowser-focused",
                            "required": "PodBrowser-required",
                          }
                        }
                        data-shrink={true}
                        htmlFor={
                          Array [
                            "id1",
                          ]
                        }
                      >
                        <ForwardRef(FormLabel)
                          className="PodBrowser-root PodBrowser-formControl PodBrowser-animated PodBrowser-shrink"
                          classes={
                            Object {
                              "asterisk": "PodBrowser-asterisk PodBrowser-asterisk",
                              "colorSecondary": "PodBrowser-colorSecondary",
                              "disabled": "PodBrowser-disabled PodBrowser-disabled",
                              "error": "PodBrowser-error PodBrowser-error",
                              "filled": "PodBrowser-filled",
                              "focused": "PodBrowser-focused PodBrowser-focused",
                              "required": "PodBrowser-required PodBrowser-required",
                              "root": "PodBrowser-root",
                            }
                          }
                          data-shrink={true}
                          htmlFor={
                            Array [
                              "id1",
                            ]
                          }
                        >
                          <label
                            className="PodBrowser-root PodBrowser-root PodBrowser-formControl PodBrowser-animated PodBrowser-shrink"
                            data-shrink={true}
                            htmlFor={
                              Array [
                                "id1",
                              ]
                            }
                          >
                            Web ID
                          </label>
                        </ForwardRef(FormLabel)>
                      </WithStyles(ForwardRef(FormLabel))>
                    </ForwardRef(InputLabel)>
                  </WithStyles(ForwardRef(InputLabel))>
                  <WithStyles(ForwardRef(Input))
                    id={
                      Array [
                        "id1",
                      ]
                    }
                    onChange={[Function]}
                    startAdornment={
                      <WithStyles(ForwardRef(InputAdornment))
                        position="start"
                      >
                        <Memo(AccountCircleIcon) />
                      </WithStyles(ForwardRef(InputAdornment))>
                    }
                    value=""
                  >
                    <ForwardRef(Input)
                      classes={
                        Object {
                          "colorSecondary": "PodBrowser-colorSecondary",
                          "disabled": "PodBrowser-disabled",
                          "error": "PodBrowser-error",
                          "focused": "PodBrowser-focused",
                          "formControl": "PodBrowser-formControl",
                          "fullWidth": "PodBrowser-fullWidth",
                          "input": "PodBrowser-input",
                          "inputMarginDense": "PodBrowser-inputMarginDense",
                          "inputMultiline": "PodBrowser-inputMultiline",
                          "inputTypeSearch": "PodBrowser-inputTypeSearch",
                          "marginDense": "PodBrowser-marginDense",
                          "multiline": "PodBrowser-multiline",
                          "root": "PodBrowser-root",
                          "underline": "PodBrowser-underline",
                        }
                      }
                      id={
                        Array [
                          "id1",
                        ]
                      }
                      onChange={[Function]}
                      startAdornment={
                        <WithStyles(ForwardRef(InputAdornment))
                          position="start"
                        >
                          <Memo(AccountCircleIcon) />
                        </WithStyles(ForwardRef(InputAdornment))>
                      }
                      value=""
                    >
                      <WithStyles(ForwardRef(InputBase))
                        classes={
                          Object {
                            "colorSecondary": "PodBrowser-colorSecondary",
                            "disabled": "PodBrowser-disabled",
                            "error": "PodBrowser-error",
                            "focused": "PodBrowser-focused",
                            "formControl": "PodBrowser-formControl",
                            "fullWidth": "PodBrowser-fullWidth",
                            "input": "PodBrowser-input",
                            "inputMarginDense": "PodBrowser-inputMarginDense",
                            "inputMultiline": "PodBrowser-inputMultiline",
                            "inputTypeSearch": "PodBrowser-inputTypeSearch",
                            "marginDense": "PodBrowser-marginDense",
                            "multiline": "PodBrowser-multiline",
                            "root": "PodBrowser-root PodBrowser-underline",
                            "underline": null,
                          }
                        }
                        fullWidth={false}
                        id={
                          Array [
                            "id1",
                          ]
                        }
                        inputComponent="input"
                        multiline={false}
                        onChange={[Function]}
                        startAdornment={
                          <WithStyles(ForwardRef(InputAdornment))
                            position="start"
                          >
                            <Memo(AccountCircleIcon) />
                          </WithStyles(ForwardRef(InputAdornment))>
                        }
                        type="text"
                        value=""
                      >
                        <ForwardRef(InputBase)
                          classes={
                            Object {
                              "adornedEnd": "PodBrowser-adornedEnd",
                              "adornedStart": "PodBrowser-adornedStart",
                              "colorSecondary": "PodBrowser-colorSecondary PodBrowser-colorSecondary",
                              "disabled": "PodBrowser-disabled PodBrowser-disabled",
                              "error": "PodBrowser-error PodBrowser-error",
                              "focused": "PodBrowser-focused PodBrowser-focused",
                              "formControl": "PodBrowser-formControl PodBrowser-formControl",
                              "fullWidth": "PodBrowser-fullWidth PodBrowser-fullWidth",
                              "input": "PodBrowser-input PodBrowser-input",
                              "inputAdornedEnd": "PodBrowser-inputAdornedEnd",
                              "inputAdornedStart": "PodBrowser-inputAdornedStart",
                              "inputHiddenLabel": "PodBrowser-inputHiddenLabel",
                              "inputMarginDense": "PodBrowser-inputMarginDense PodBrowser-inputMarginDense",
                              "inputMultiline": "PodBrowser-inputMultiline PodBrowser-inputMultiline",
                              "inputTypeSearch": "PodBrowser-inputTypeSearch PodBrowser-inputTypeSearch",
                              "marginDense": "PodBrowser-marginDense PodBrowser-marginDense",
                              "multiline": "PodBrowser-multiline PodBrowser-multiline",
                              "root": "PodBrowser-root PodBrowser-root PodBrowser-underline",
                            }
                          }
                          fullWidth={false}
                          id={
                            Array [
                              "id1",
                            ]
                          }
                          inputComponent="input"
                          multiline={false}
                          onChange={[Function]}
                          startAdornment={
                            <WithStyles(ForwardRef(InputAdornment))
                              position="start"
                            >
                              <Memo(AccountCircleIcon) />
                            </WithStyles(ForwardRef(InputAdornment))>
                          }
                          type="text"
                          value=""
                        >
                          <div
                            className="PodBrowser-root PodBrowser-root PodBrowser-underline PodBrowser-formControl PodBrowser-formControl PodBrowser-adornedStart"
                            onClick={[Function]}
                          >
                            <WithStyles(ForwardRef(InputAdornment))
                              position="start"
                            >
                              <ForwardRef(InputAdornment)
                                classes={
                                  Object {
                                    "disablePointerEvents": "PodBrowser-disablePointerEvents",
                                    "filled": "PodBrowser-filled",
                                    "hiddenLabel": "PodBrowser-hiddenLabel",
                                    "marginDense": "PodBrowser-marginDense",
                                    "positionEnd": "PodBrowser-positionEnd",
                                    "positionStart": "PodBrowser-positionStart",
                                    "root": "PodBrowser-root",
                                  }
                                }
                                position="start"
                              >
                                <div
                                  className="PodBrowser-root PodBrowser-positionStart"
                                >
                                  <ForwardRef>
                                    <WithStyles(ForwardRef(SvgIcon))>
                                      <ForwardRef(SvgIcon)
                                        classes={
                                          Object {
                                            "colorAction": "PodBrowser-colorAction",
                                            "colorDisabled": "PodBrowser-colorDisabled",
                                            "colorError": "PodBrowser-colorError",
                                            "colorPrimary": "PodBrowser-colorPrimary",
                                            "colorSecondary": "PodBrowser-colorSecondary",
                                            "fontSizeInherit": "PodBrowser-fontSizeInherit",
                                            "fontSizeLarge": "PodBrowser-fontSizeLarge",
                                            "fontSizeSmall": "PodBrowser-fontSizeSmall",
                                            "root": "PodBrowser-root",
                                          }
                                        }
                                      >
                                        <svg
                                          aria-hidden={true}
                                          className="PodBrowser-root"
                                          focusable="false"
                                          viewBox="0 0 24 24"
                                        >
                                          <path
                                            d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 3c1.66 0 3 1.34 3 3s-1.34 3-3 3-3-1.34-3-3 1.34-3 3-3zm0 14.2c-2.5 0-4.71-1.28-6-3.22.03-1.99 4-3.08 6-3.08 1.99 0 5.97 1.09 6 3.08-1.29 1.94-3.5 3.22-6 3.22z"
                                          />
                                        </svg>
                                      </ForwardRef(SvgIcon)>
                                    </WithStyles(ForwardRef(SvgIcon))>
                                  </ForwardRef>
                                </div>
                              </ForwardRef(InputAdornment)>
                            </WithStyles(ForwardRef(InputAdornment))>
                            <input
                              aria-invalid={false}
                              className="PodBrowser-input PodBrowser-input PodBrowser-inputAdornedStart"
                              disabled={false}
                              id={
                                Array [
                                  "id1",
                                ]
                              }
                              onAnimationStart={[Function]}
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              required={false}
                              type="text"
                              value=""
                            />
                          </div>
                        </ForwardRef(InputBase)>
                      </WithStyles(ForwardRef(InputBase))>
                    </ForwardRef(Input)>
                  </WithStyles(ForwardRef(Input))>
                </div>
              </ForwardRef(FormControl)>
            </WithStyles(ForwardRef(FormControl))>
            <WithStyles(ForwardRef(Button))
              className="PodBrowser-agentAddButton"
              onClick={[Function]}
              variant="contained"
            >
              <ForwardRef(Button)
                className="PodBrowser-agentAddButton"
                classes={
                  Object {
                    "colorInherit": "PodBrowser-colorInherit",
                    "contained": "PodBrowser-contained",
                    "containedPrimary": "PodBrowser-containedPrimary",
                    "containedSecondary": "PodBrowser-containedSecondary",
                    "containedSizeLarge": "PodBrowser-containedSizeLarge",
                    "containedSizeSmall": "PodBrowser-containedSizeSmall",
                    "disableElevation": "PodBrowser-disableElevation",
                    "disabled": "PodBrowser-disabled",
                    "endIcon": "PodBrowser-endIcon",
                    "focusVisible": "PodBrowser-focusVisible",
                    "fullWidth": "PodBrowser-fullWidth",
                    "iconSizeLarge": "PodBrowser-iconSizeLarge",
                    "iconSizeMedium": "PodBrowser-iconSizeMedium",
                    "iconSizeSmall": "PodBrowser-iconSizeSmall",
                    "label": "PodBrowser-label",
                    "outlined": "PodBrowser-outlined",
                    "outlinedPrimary": "PodBrowser-outlinedPrimary",
                    "outlinedSecondary": "PodBrowser-outlinedSecondary",
                    "outlinedSizeLarge": "PodBrowser-outlinedSizeLarge",
                    "outlinedSizeSmall": "PodBrowser-outlinedSizeSmall",
                    "root": "PodBrowser-root",
                    "sizeLarge": "PodBrowser-sizeLarge",
                    "sizeSmall": "PodBrowser-sizeSmall",
                    "startIcon": "PodBrowser-startIcon",
                    "text": "PodBrowser-text",
                    "textPrimary": "PodBrowser-textPrimary",
                    "textSecondary": "PodBrowser-textSecondary",
                    "textSizeLarge": "PodBrowser-textSizeLarge",
                    "textSizeSmall": "PodBrowser-textSizeSmall",
                  }
                }
                onClick={[Function]}
                variant="contained"
              >
                <WithStyles(ForwardRef(ButtonBase))
                  className="PodBrowser-root PodBrowser-contained PodBrowser-agentAddButton"
                  component="button"
                  disabled={false}
                  focusRipple={true}
                  focusVisibleClassName="PodBrowser-focusVisible"
                  onClick={[Function]}
                  type="button"
                >
                  <ForwardRef(ButtonBase)
                    className="PodBrowser-root PodBrowser-contained PodBrowser-agentAddButton"
                    classes={
                      Object {
                        "disabled": "PodBrowser-disabled",
                        "focusVisible": "PodBrowser-focusVisible",
                        "root": "PodBrowser-root",
                      }
                    }
                    component="button"
                    disabled={false}
                    focusRipple={true}
                    focusVisibleClassName="PodBrowser-focusVisible"
                    onClick={[Function]}
                    type="button"
                  >
                    <button
                      className="PodBrowser-root PodBrowser-root PodBrowser-contained PodBrowser-agentAddButton"
                      disabled={false}
                      onBlur={[Function]}
                      onClick={[Function]}
                      onDragLeave={[Function]}
                      onFocus={[Function]}
                      onKeyDown={[Function]}
                      onKeyUp={[Function]}
                      onMouseDown={[Function]}
                      onMouseLeave={[Function]}
                      onMouseUp={[Function]}
                      onTouchEnd={[Function]}
                      onTouchMove={[Function]}
                      onTouchStart={[Function]}
                      tabIndex={0}
                      type="button"
                    >
                      <span
                        className="PodBrowser-label"
                      >
                        Add
                      </span>
                      <WithStyles(memo)
                        center={false}
                      >
                        <ForwardRef(TouchRipple)
                          center={false}
                          classes={
                            Object {
                              "child": "PodBrowser-child",
                              "childLeaving": "PodBrowser-childLeaving",
                              "childPulsate": "PodBrowser-childPulsate",
                              "ripple": "PodBrowser-ripple",
                              "ripplePulsate": "PodBrowser-ripplePulsate",
                              "rippleVisible": "PodBrowser-rippleVisible",
                              "root": "PodBrowser-root",
                            }
                          }
                        >
                          <span
                            className="PodBrowser-root"
                          >
                            <TransitionGroup
                              childFactory={[Function]}
                              component={null}
                              exit={true}
                            />
                          </span>
                        </ForwardRef(TouchRipple)>
                      </WithStyles(memo)>
                    </button>
                  </ForwardRef(ButtonBase)>
                </WithStyles(ForwardRef(ButtonBase))>
              </ForwardRef(Button)>
            </WithStyles(ForwardRef(Button))>
          </AgentSearchForm>
        </section>
        <section
          className="PodBrowser-centeredSection"
        >
          <AgentAccessList
            iri="iri"
            onSave={[Function]}
            onSubmit={[Function]}
            permissions={Array []}
            saveFn={[Function]}
            warn={false}
          />
        </section>
        <WithStyles(ForwardRef(Divider))>
          <ForwardRef(Divider)
            classes={
              Object {
                "absolute": "PodBrowser-absolute",
                "flexItem": "PodBrowser-flexItem",
                "inset": "PodBrowser-inset",
                "light": "PodBrowser-light",
                "middle": "PodBrowser-middle",
                "root": "PodBrowser-root",
                "vertical": "PodBrowser-vertical",
              }
            }
          >
            <hr
              className="PodBrowser-root"
            />
          </ForwardRef(Divider)>
        </WithStyles(ForwardRef(Divider))>
        <section
          className="PodBrowser-centeredSection"
        >
          <h5
            className="PodBrowser-content-h5"
          >
            Default Access
          </h5>
          <WithStyles(ForwardRef(List))>
            <ForwardRef(List)
              classes={
                Object {
                  "dense": "PodBrowser-dense",
                  "padding": "PodBrowser-padding",
                  "root": "PodBrowser-root",
                  "subheader": "PodBrowser-subheader",
                }
              }
            >
              <ul
                className="PodBrowser-root PodBrowser-padding"
              >
                <WithStyles(ForwardRef(ListItem))
                  className="PodBrowser-listItem"
                  key="0"
                >
                  <ForwardRef(ListItem)
                    className="PodBrowser-listItem"
                    classes={
                      Object {
                        "alignItemsFlexStart": "PodBrowser-alignItemsFlexStart",
                        "button": "PodBrowser-button",
                        "container": "PodBrowser-container",
                        "dense": "PodBrowser-dense",
                        "disabled": "PodBrowser-disabled",
                        "divider": "PodBrowser-divider",
                        "focusVisible": "PodBrowser-focusVisible",
                        "gutters": "PodBrowser-gutters",
                        "root": "PodBrowser-root",
                        "secondaryAction": "PodBrowser-secondaryAction",
                        "selected": "PodBrowser-selected",
                      }
                    }
                  >
                    <li
                      className="PodBrowser-root PodBrowser-listItem PodBrowser-gutters"
                      disabled={false}
                    >
                      <WithStyles(ForwardRef(ListItemIcon))
                        key=".0"
                      >
                        <ForwardRef(ListItemIcon)
                          classes={
                            Object {
                              "alignItemsFlexStart": "PodBrowser-alignItemsFlexStart",
                              "root": "PodBrowser-root",
                            }
                          }
                        >
                          <div
                            className="PodBrowser-root"
                          >
                            <ForwardRef>
                              <WithStyles(ForwardRef(SvgIcon))>
                                <ForwardRef(SvgIcon)
                                  classes={
                                    Object {
                                      "colorAction": "PodBrowser-colorAction",
                                      "colorDisabled": "PodBrowser-colorDisabled",
                                      "colorError": "PodBrowser-colorError",
                                      "colorPrimary": "PodBrowser-colorPrimary",
                                      "colorSecondary": "PodBrowser-colorSecondary",
                                      "fontSizeInherit": "PodBrowser-fontSizeInherit",
                                      "fontSizeLarge": "PodBrowser-fontSizeLarge",
                                      "fontSizeSmall": "PodBrowser-fontSizeSmall",
                                      "root": "PodBrowser-root",
                                    }
                                  }
                                >
                                  <svg
                                    aria-hidden={true}
                                    className="PodBrowser-root"
                                    focusable="false"
                                    viewBox="0 0 24 24"
                                  >
                                    <path
                                      d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"
                                    />
                                  </svg>
                                </ForwardRef(SvgIcon)>
                              </WithStyles(ForwardRef(SvgIcon))>
                            </ForwardRef>
                            People
                          </div>
                        </ForwardRef(ListItemIcon)>
                      </WithStyles(ForwardRef(ListItemIcon))>
                    </li>
                  </ForwardRef(ListItem)>
                </WithStyles(ForwardRef(ListItem))>
                <WithStyles(ForwardRef(Divider))>
                  <ForwardRef(Divider)
                    classes={
                      Object {
                        "absolute": "PodBrowser-absolute",
                        "flexItem": "PodBrowser-flexItem",
                        "inset": "PodBrowser-inset",
                        "light": "PodBrowser-light",
                        "middle": "PodBrowser-middle",
                        "root": "PodBrowser-root",
                        "vertical": "PodBrowser-vertical",
                      }
                    }
                  >
                    <hr
                      className="PodBrowser-root"
                    />
                  </ForwardRef(Divider)>
                </WithStyles(ForwardRef(Divider))>
                <AgentAccessList
                  iri="iri"
                  onSave={[Function]}
                  onSubmit={[Function]}
                  permissions={Array []}
                  saveFn={[Function]}
                  warn={false}
                />
              </ul>
            </ForwardRef(List)>
          </WithStyles(ForwardRef(List))>
          <DefaultPermissionForm
            iri="iri"
            onSubmit={[Function]}
            permission={
              Object {
                "acl": Object {
                  "append": true,
                  "control": true,
                  "read": true,
                  "write": true,
                },
                "alias": "Control",
                "profile": Object {
                  "webId": "webId",
                },
                "webId": "webId",
              }
            }
            webId="webId"
          />
          <WithStyles(ForwardRef(Divider))>
            <ForwardRef(Divider)
              classes={
                Object {
                  "absolute": "PodBrowser-absolute",
                  "flexItem": "PodBrowser-flexItem",
                  "inset": "PodBrowser-inset",
                  "light": "PodBrowser-light",
                  "middle": "PodBrowser-middle",
                  "root": "PodBrowser-root",
                  "vertical": "PodBrowser-vertical",
                }
              }
            >
              <hr
                className="PodBrowser-root"
              />
            </ForwardRef(Divider)>
          </WithStyles(ForwardRef(Divider))>
        </section>
      </ResourceSharing>
    </ThemeProvider>
  </StylesProvider>
</WithTheme>
`;

exports[`ThirdPartyPermissions it renders NoThirdPartyPermissions when the list is empty 1`] = `
<WithTheme
  theme={
    Object {
      "breakpoints": Object {
        "between": [Function],
        "down": [Function],
        "keys": Array [
          "xs",
          "sm",
          "md",
          "lg",
          "xl",
        ],
        "only": [Function],
        "up": [Function],
        "values": Object {
          "lg": 1280,
          "md": 960,
          "sm": 600,
          "xl": 1920,
          "xs": 0,
        },
        "width": [Function],
      },
      "direction": "ltr",
      "iconSet": Object {
        "config": Object {
          "cssFiles": Array [
            "css/all.css",
          ],
          "fonts": Array [
            Object {
              "fontFace": "
font-family: 'Font Awesome 5 Free';
font-style: normal;
font-weight: 900;
font-display: block;",
              "fontsPath": "./webfonts",
              "licensePath": "./LICENSE.txt",
              "source": "fa-solid-900.eot",
              "sources": Array [
                Object {
                  "format": "embedded-opentype",
                  "path": "fa-solid-900.eot",
                  "urlAddition": "?#iefix",
                },
                Object {
                  "format": "woff2",
                  "path": "fa-solid-900.woff2",
                },
                Object {
                  "format": "woff",
                  "path": "fa-solid-900.woff",
                },
                Object {
                  "format": "truetype",
                  "path": "fa-solid-900.ttf",
                },
                Object {
                  "format": "svg",
                  "path": "fa-solid-900.svg",
                  "urlAddition": "#fontawesome",
                },
              ],
            },
          ],
          "label": "Font Awesome Solid",
          "name": "fontawesome-solid",
          "npmModule": "@fortawesome/fontawesome-free",
          "type": 0,
        },
        "iconColor": [Function],
        "styles": [Function],
      },
      "icons": Object {
        "config": Object {
          "cssFiles": Array [
            "css/all.css",
          ],
          "fonts": Array [
            Object {
              "fontFace": "
font-family: 'Font Awesome 5 Free';
font-style: normal;
font-weight: 900;
font-display: block;",
              "fontsPath": "./webfonts",
              "licensePath": "./LICENSE.txt",
              "source": "fa-solid-900.eot",
              "sources": Array [
                Object {
                  "format": "embedded-opentype",
                  "path": "fa-solid-900.eot",
                  "urlAddition": "?#iefix",
                },
                Object {
                  "format": "woff2",
                  "path": "fa-solid-900.woff2",
                },
                Object {
                  "format": "woff",
                  "path": "fa-solid-900.woff",
                },
                Object {
                  "format": "truetype",
                  "path": "fa-solid-900.ttf",
                },
                Object {
                  "format": "svg",
                  "path": "fa-solid-900.svg",
                  "urlAddition": "#fontawesome",
                },
              ],
            },
          ],
          "label": "Font Awesome Solid",
          "name": "fontawesome-solid",
          "npmModule": "@fortawesome/fontawesome-free",
          "type": 0,
        },
        "iconColor": [Function],
        "styles": [Function],
      },
      "label": "SDK Default",
      "licenses": Array [
        "fonts/Raleway/OFL.txt",
      ],
      "localFonts": Object {
        "fonts/Raleway/Raleway-ExtraBold": [Function],
        "fonts/Raleway/Raleway-Medium": [Function],
      },
      "mixins": Object {
        "gutters": [Function],
        "toolbar": Object {
          "@media (min-width:0px) and (orientation: landscape)": Object {
            "minHeight": 48,
          },
          "@media (min-width:600px)": Object {
            "minHeight": 64,
          },
          "minHeight": 56,
        },
      },
      "name": "sdk-default",
      "overrides": Object {},
      "palette": Object {
        "action": Object {
          "activatedOpacity": 0.12,
          "active": "rgba(0, 0, 0, 0.54)",
          "disabled": "rgba(0, 0, 0, 0.26)",
          "disabledBackground": "rgba(0, 0, 0, 0.12)",
          "disabledOpacity": 0.38,
          "focus": "rgba(0, 0, 0, 0.12)",
          "focusOpacity": 0.12,
          "hover": "rgba(0, 0, 0, 0.04)",
          "hoverOpacity": 0.04,
          "selected": "rgba(0, 0, 0, 0.08)",
          "selectedOpacity": 0.08,
        },
        "adjustAlpha": [Function],
        "augmentColor": [Function],
        "background": Object {
          "default": "#FFFFFF",
          "paper": "#fff",
        },
        "common": Object {
          "black": "#000",
          "white": "#fff",
        },
        "contrastThreshold": 3,
        "divider": "rgba(0, 0, 0, 0.12)",
        "error": Object {
          "contrastText": "#fff",
          "dark": "#d32f2f",
          "light": "#e57373",
          "main": "#f44336",
        },
        "getContrastText": [Function],
        "grey": Object {
          "100": "#f5f5f5",
          "200": "#eeeeee",
          "300": "#e0e0e0",
          "400": "#bdbdbd",
          "50": "#fafafa",
          "500": "#9e9e9e",
          "600": "#757575",
          "700": "#616161",
          "800": "#424242",
          "900": "#212121",
          "A100": "#d5d5d5",
          "A200": "#aaaaaa",
          "A400": "#303030",
          "A700": "#616161",
        },
        "info": Object {
          "contrastText": "#fff",
          "dark": "#1976d2",
          "light": "#64b5f6",
          "main": "#2196f3",
        },
        "primary": Object {
          "contrastText": "#fff",
          "dark": "rgb(86, 53, 178)",
          "light": "rgb(150, 112, 255)",
          "main": "#7C4DFF",
        },
        "secondary": Object {
          "contrastText": "rgba(0, 0, 0, 0.87)",
          "dark": "#083575",
          "light": "#01C9EA",
          "main": "#18A9E6",
        },
        "success": Object {
          "contrastText": "rgba(0, 0, 0, 0.87)",
          "dark": "#388e3c",
          "light": "#81c784",
          "main": "#4caf50",
        },
        "text": Object {
          "disabled": "rgba(0, 0, 0, 0.38)",
          "hint": "rgba(0, 0, 0, 0.38)",
          "primary": "#4E4E4E",
          "secondary": "#4E4E4E",
        },
        "tonalOffset": 0.2,
        "type": "light",
        "warning": Object {
          "contrastText": "rgba(0, 0, 0, 0.87)",
          "dark": "#f57c00",
          "light": "#ffb74d",
          "main": "#ff9800",
        },
      },
      "props": Object {},
      "shadows": Array [
        "none",
        "0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12)",
        "0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12)",
        "0px 3px 3px -2px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 1px 8px 0px rgba(0,0,0,0.12)",
        "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
        "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
        "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
        "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
        "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
        "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
        "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
        "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
        "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
        "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
        "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
        "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
        "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
        "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
        "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
        "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
        "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
        "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
        "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
        "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
        "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
      ],
      "shape": Object {
        "borderRadius": 4,
      },
      "spacing": [Function],
      "stylesheets": Array [
        "https://fonts.googleapis.com/css?family=Raleway:500,800&display=swap",
      ],
      "transitions": Object {
        "create": [Function],
        "duration": Object {
          "complex": 375,
          "enteringScreen": 225,
          "leavingScreen": 195,
          "short": 250,
          "shorter": 200,
          "shortest": 150,
          "standard": 300,
        },
        "easing": Object {
          "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
          "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
          "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
          "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
        },
        "getAutoHeightDuration": [Function],
      },
      "typography": Object {
        "body": Object {
          "fontFamily": "\\"Raleway-Medium\\"",
          "fontSize": "0.9375rem",
          "fontWeight": 500,
          "letterSpacing": "0.01071em",
          "lineHeight": 1.43,
        },
        "body1": Object {
          "fontFamily": "\\"Raleway-ExtraBold\\"",
          "fontSize": "1rem",
          "fontWeight": 800,
          "letterSpacing": "0.00938em",
          "lineHeight": 1.5,
        },
        "body2": Object {
          "fontFamily": "\\"Raleway-Medium\\"",
          "fontSize": "0.9375rem",
          "fontWeight": 500,
          "letterSpacing": "0.01071em",
          "lineHeight": 1.43,
        },
        "button": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "0.875rem",
          "fontWeight": 500,
          "letterSpacing": "0.02857em",
          "lineHeight": 1.75,
          "textTransform": "uppercase",
        },
        "caption": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "0.75rem",
          "fontWeight": 400,
          "letterSpacing": "0.03333em",
          "lineHeight": 1.66,
        },
        "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
        "fontSize": 14,
        "fontWeightBold": 800,
        "fontWeightLight": 500,
        "fontWeightMedium": 500,
        "fontWeightRegular": 400,
        "h1": Object {
          "fontFamily": "\\"Raleway-ExtraBold\\"",
          "fontSize": "1.375rem",
          "fontWeight": 800,
          "letterSpacing": "-0.01562em",
          "lineHeight": 1.45,
        },
        "h2": Object {
          "fontFamily": "\\"Raleway-ExtraBold\\"",
          "fontSize": "1.125rem",
          "fontWeight": 800,
          "letterSpacing": "-0.00833em",
          "lineHeight": 1.27,
        },
        "h3": Object {
          "fontFamily": "\\"Raleway-ExtraBold\\"",
          "fontSize": "1.05rem",
          "fontWeight": 800,
          "letterSpacing": "0em",
          "lineHeight": 1.2,
        },
        "h4": Object {
          "fontFamily": "\\"Raleway-ExtraBold\\"",
          "fontSize": "1rem",
          "fontWeight": 800,
          "letterSpacing": "0.00735em",
          "lineHeight": 1.1,
        },
        "h5": Object {
          "fontFamily": "\\"Raleway-ExtraBold\\"",
          "fontSize": "1rem",
          "fontWeight": 800,
          "letterSpacing": "0em",
          "lineHeight": 1,
        },
        "h6": Object {
          "fontFamily": "\\"Raleway-ExtraBold\\"",
          "fontSize": "0.625rem",
          "fontWeight": 800,
          "letterSpacing": "0.0075em",
          "lineHeight": 1,
        },
        "heading": Object {
          "fontFamily": "\\"Raleway-ExtraBold\\"",
          "fontSize": "1rem",
          "fontWeight": 800,
          "letterSpacing": "0.00938em",
          "lineHeight": 1.5,
        },
        "htmlFontSize": 16,
        "overline": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "0.75rem",
          "fontWeight": 400,
          "letterSpacing": "0.08333em",
          "lineHeight": 2.66,
          "textTransform": "uppercase",
        },
        "pxToRem": [Function],
        "round": [Function],
        "subtitle1": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "1rem",
          "fontWeight": 400,
          "letterSpacing": "0.00938em",
          "lineHeight": 1.75,
        },
        "subtitle2": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "0.875rem",
          "fontWeight": 500,
          "letterSpacing": "0.00714em",
          "lineHeight": 1.57,
        },
      },
      "zIndex": Object {
        "appBar": 1100,
        "drawer": 1200,
        "mobileStepper": 1000,
        "modal": 1300,
        "snackbar": 1400,
        "speedDial": 1050,
        "tooltip": 1500,
      },
      Symbol(mui.nested): false,
    }
  }
>
  <StylesProvider
    generateClassName={[Function]}
  >
    <ThemeProvider
      theme={
        Object {
          "breakpoints": Object {
            "between": [Function],
            "down": [Function],
            "keys": Array [
              "xs",
              "sm",
              "md",
              "lg",
              "xl",
            ],
            "only": [Function],
            "up": [Function],
            "values": Object {
              "lg": 1280,
              "md": 960,
              "sm": 600,
              "xl": 1920,
              "xs": 0,
            },
            "width": [Function],
          },
          "direction": "ltr",
          "iconSet": Object {
            "config": Object {
              "cssFiles": Array [
                "css/all.css",
              ],
              "fonts": Array [
                Object {
                  "fontFace": "
font-family: 'Font Awesome 5 Free';
font-style: normal;
font-weight: 900;
font-display: block;",
                  "fontsPath": "./webfonts",
                  "licensePath": "./LICENSE.txt",
                  "source": "fa-solid-900.eot",
                  "sources": Array [
                    Object {
                      "format": "embedded-opentype",
                      "path": "fa-solid-900.eot",
                      "urlAddition": "?#iefix",
                    },
                    Object {
                      "format": "woff2",
                      "path": "fa-solid-900.woff2",
                    },
                    Object {
                      "format": "woff",
                      "path": "fa-solid-900.woff",
                    },
                    Object {
                      "format": "truetype",
                      "path": "fa-solid-900.ttf",
                    },
                    Object {
                      "format": "svg",
                      "path": "fa-solid-900.svg",
                      "urlAddition": "#fontawesome",
                    },
                  ],
                },
              ],
              "label": "Font Awesome Solid",
              "name": "fontawesome-solid",
              "npmModule": "@fortawesome/fontawesome-free",
              "type": 0,
            },
            "iconColor": [Function],
            "styles": [Function],
          },
          "icons": Object {
            "config": Object {
              "cssFiles": Array [
                "css/all.css",
              ],
              "fonts": Array [
                Object {
                  "fontFace": "
font-family: 'Font Awesome 5 Free';
font-style: normal;
font-weight: 900;
font-display: block;",
                  "fontsPath": "./webfonts",
                  "licensePath": "./LICENSE.txt",
                  "source": "fa-solid-900.eot",
                  "sources": Array [
                    Object {
                      "format": "embedded-opentype",
                      "path": "fa-solid-900.eot",
                      "urlAddition": "?#iefix",
                    },
                    Object {
                      "format": "woff2",
                      "path": "fa-solid-900.woff2",
                    },
                    Object {
                      "format": "woff",
                      "path": "fa-solid-900.woff",
                    },
                    Object {
                      "format": "truetype",
                      "path": "fa-solid-900.ttf",
                    },
                    Object {
                      "format": "svg",
                      "path": "fa-solid-900.svg",
                      "urlAddition": "#fontawesome",
                    },
                  ],
                },
              ],
              "label": "Font Awesome Solid",
              "name": "fontawesome-solid",
              "npmModule": "@fortawesome/fontawesome-free",
              "type": 0,
            },
            "iconColor": [Function],
            "styles": [Function],
          },
          "label": "SDK Default",
          "licenses": Array [
            "fonts/Raleway/OFL.txt",
          ],
          "localFonts": Object {
            "fonts/Raleway/Raleway-ExtraBold": [Function],
            "fonts/Raleway/Raleway-Medium": [Function],
          },
          "mixins": Object {
            "gutters": [Function],
            "toolbar": Object {
              "@media (min-width:0px) and (orientation: landscape)": Object {
                "minHeight": 48,
              },
              "@media (min-width:600px)": Object {
                "minHeight": 64,
              },
              "minHeight": 56,
            },
          },
          "name": "sdk-default",
          "overrides": Object {},
          "palette": Object {
            "action": Object {
              "activatedOpacity": 0.12,
              "active": "rgba(0, 0, 0, 0.54)",
              "disabled": "rgba(0, 0, 0, 0.26)",
              "disabledBackground": "rgba(0, 0, 0, 0.12)",
              "disabledOpacity": 0.38,
              "focus": "rgba(0, 0, 0, 0.12)",
              "focusOpacity": 0.12,
              "hover": "rgba(0, 0, 0, 0.04)",
              "hoverOpacity": 0.04,
              "selected": "rgba(0, 0, 0, 0.08)",
              "selectedOpacity": 0.08,
            },
            "adjustAlpha": [Function],
            "augmentColor": [Function],
            "background": Object {
              "default": "#FFFFFF",
              "paper": "#fff",
            },
            "common": Object {
              "black": "#000",
              "white": "#fff",
            },
            "contrastThreshold": 3,
            "divider": "rgba(0, 0, 0, 0.12)",
            "error": Object {
              "contrastText": "#fff",
              "dark": "#d32f2f",
              "light": "#e57373",
              "main": "#f44336",
            },
            "getContrastText": [Function],
            "grey": Object {
              "100": "#f5f5f5",
              "200": "#eeeeee",
              "300": "#e0e0e0",
              "400": "#bdbdbd",
              "50": "#fafafa",
              "500": "#9e9e9e",
              "600": "#757575",
              "700": "#616161",
              "800": "#424242",
              "900": "#212121",
              "A100": "#d5d5d5",
              "A200": "#aaaaaa",
              "A400": "#303030",
              "A700": "#616161",
            },
            "info": Object {
              "contrastText": "#fff",
              "dark": "#1976d2",
              "light": "#64b5f6",
              "main": "#2196f3",
            },
            "primary": Object {
              "contrastText": "#fff",
              "dark": "rgb(86, 53, 178)",
              "light": "rgb(150, 112, 255)",
              "main": "#7C4DFF",
            },
            "secondary": Object {
              "contrastText": "rgba(0, 0, 0, 0.87)",
              "dark": "#083575",
              "light": "#01C9EA",
              "main": "#18A9E6",
            },
            "success": Object {
              "contrastText": "rgba(0, 0, 0, 0.87)",
              "dark": "#388e3c",
              "light": "#81c784",
              "main": "#4caf50",
            },
            "text": Object {
              "disabled": "rgba(0, 0, 0, 0.38)",
              "hint": "rgba(0, 0, 0, 0.38)",
              "primary": "#4E4E4E",
              "secondary": "#4E4E4E",
            },
            "tonalOffset": 0.2,
            "type": "light",
            "warning": Object {
              "contrastText": "rgba(0, 0, 0, 0.87)",
              "dark": "#f57c00",
              "light": "#ffb74d",
              "main": "#ff9800",
            },
          },
          "props": Object {},
          "shadows": Array [
            "none",
            "0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12)",
            "0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12)",
            "0px 3px 3px -2px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 1px 8px 0px rgba(0,0,0,0.12)",
            "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
            "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
            "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
            "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
            "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
            "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
            "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
            "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
            "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
            "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
            "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
            "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
            "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
            "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
            "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
            "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
            "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
            "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
            "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
            "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
            "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
          ],
          "shape": Object {
            "borderRadius": 4,
          },
          "spacing": [Function],
          "stylesheets": Array [
            "https://fonts.googleapis.com/css?family=Raleway:500,800&display=swap",
          ],
          "transitions": Object {
            "create": [Function],
            "duration": Object {
              "complex": 375,
              "enteringScreen": 225,
              "leavingScreen": 195,
              "short": 250,
              "shorter": 200,
              "shortest": 150,
              "standard": 300,
            },
            "easing": Object {
              "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
              "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
              "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
              "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
            },
            "getAutoHeightDuration": [Function],
          },
          "typography": Object {
            "body": Object {
              "fontFamily": "\\"Raleway-Medium\\"",
              "fontSize": "0.9375rem",
              "fontWeight": 500,
              "letterSpacing": "0.01071em",
              "lineHeight": 1.43,
            },
            "body1": Object {
              "fontFamily": "\\"Raleway-ExtraBold\\"",
              "fontSize": "1rem",
              "fontWeight": 800,
              "letterSpacing": "0.00938em",
              "lineHeight": 1.5,
            },
            "body2": Object {
              "fontFamily": "\\"Raleway-Medium\\"",
              "fontSize": "0.9375rem",
              "fontWeight": 500,
              "letterSpacing": "0.01071em",
              "lineHeight": 1.43,
            },
            "button": Object {
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "0.875rem",
              "fontWeight": 500,
              "letterSpacing": "0.02857em",
              "lineHeight": 1.75,
              "textTransform": "uppercase",
            },
            "caption": Object {
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "0.75rem",
              "fontWeight": 400,
              "letterSpacing": "0.03333em",
              "lineHeight": 1.66,
            },
            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
            "fontSize": 14,
            "fontWeightBold": 800,
            "fontWeightLight": 500,
            "fontWeightMedium": 500,
            "fontWeightRegular": 400,
            "h1": Object {
              "fontFamily": "\\"Raleway-ExtraBold\\"",
              "fontSize": "1.375rem",
              "fontWeight": 800,
              "letterSpacing": "-0.01562em",
              "lineHeight": 1.45,
            },
            "h2": Object {
              "fontFamily": "\\"Raleway-ExtraBold\\"",
              "fontSize": "1.125rem",
              "fontWeight": 800,
              "letterSpacing": "-0.00833em",
              "lineHeight": 1.27,
            },
            "h3": Object {
              "fontFamily": "\\"Raleway-ExtraBold\\"",
              "fontSize": "1.05rem",
              "fontWeight": 800,
              "letterSpacing": "0em",
              "lineHeight": 1.2,
            },
            "h4": Object {
              "fontFamily": "\\"Raleway-ExtraBold\\"",
              "fontSize": "1rem",
              "fontWeight": 800,
              "letterSpacing": "0.00735em",
              "lineHeight": 1.1,
            },
            "h5": Object {
              "fontFamily": "\\"Raleway-ExtraBold\\"",
              "fontSize": "1rem",
              "fontWeight": 800,
              "letterSpacing": "0em",
              "lineHeight": 1,
            },
            "h6": Object {
              "fontFamily": "\\"Raleway-ExtraBold\\"",
              "fontSize": "0.625rem",
              "fontWeight": 800,
              "letterSpacing": "0.0075em",
              "lineHeight": 1,
            },
            "heading": Object {
              "fontFamily": "\\"Raleway-ExtraBold\\"",
              "fontSize": "1rem",
              "fontWeight": 800,
              "letterSpacing": "0.00938em",
              "lineHeight": 1.5,
            },
            "htmlFontSize": 16,
            "overline": Object {
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "0.75rem",
              "fontWeight": 400,
              "letterSpacing": "0.08333em",
              "lineHeight": 2.66,
              "textTransform": "uppercase",
            },
            "pxToRem": [Function],
            "round": [Function],
            "subtitle1": Object {
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "1rem",
              "fontWeight": 400,
              "letterSpacing": "0.00938em",
              "lineHeight": 1.75,
            },
            "subtitle2": Object {
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "0.875rem",
              "fontWeight": 500,
              "letterSpacing": "0.00714em",
              "lineHeight": 1.57,
            },
          },
          "zIndex": Object {
            "appBar": 1100,
            "drawer": 1200,
            "mobileStepper": 1000,
            "modal": 1300,
            "snackbar": 1400,
            "speedDial": 1050,
            "tooltip": 1500,
          },
          Symbol(mui.nested): false,
        }
      }
    >
      <ThirdPartyPermissions
        classes={
          Object {
            "centeredSection": "centeredSection",
            "listItem": "listItem",
            "thirdPartyPermissions": Array [],
          }
        }
        iri="iri"
        setThirdPartyPermissions={[MockFunction]}
        thirdPartyPermissions={null}
      />
    </ThemeProvider>
  </StylesProvider>
</WithTheme>
`;

exports[`ThirdPartyPermissions it renders a list of Permissions if there are permissions in the list 1`] = `
<WithTheme
  theme={
    Object {
      "breakpoints": Object {
        "between": [Function],
        "down": [Function],
        "keys": Array [
          "xs",
          "sm",
          "md",
          "lg",
          "xl",
        ],
        "only": [Function],
        "up": [Function],
        "values": Object {
          "lg": 1280,
          "md": 960,
          "sm": 600,
          "xl": 1920,
          "xs": 0,
        },
        "width": [Function],
      },
      "direction": "ltr",
      "iconSet": Object {
        "config": Object {
          "cssFiles": Array [
            "css/all.css",
          ],
          "fonts": Array [
            Object {
              "fontFace": "
font-family: 'Font Awesome 5 Free';
font-style: normal;
font-weight: 900;
font-display: block;",
              "fontsPath": "./webfonts",
              "licensePath": "./LICENSE.txt",
              "source": "fa-solid-900.eot",
              "sources": Array [
                Object {
                  "format": "embedded-opentype",
                  "path": "fa-solid-900.eot",
                  "urlAddition": "?#iefix",
                },
                Object {
                  "format": "woff2",
                  "path": "fa-solid-900.woff2",
                },
                Object {
                  "format": "woff",
                  "path": "fa-solid-900.woff",
                },
                Object {
                  "format": "truetype",
                  "path": "fa-solid-900.ttf",
                },
                Object {
                  "format": "svg",
                  "path": "fa-solid-900.svg",
                  "urlAddition": "#fontawesome",
                },
              ],
            },
          ],
          "label": "Font Awesome Solid",
          "name": "fontawesome-solid",
          "npmModule": "@fortawesome/fontawesome-free",
          "type": 0,
        },
        "iconColor": [Function],
        "styles": [Function],
      },
      "icons": Object {
        "config": Object {
          "cssFiles": Array [
            "css/all.css",
          ],
          "fonts": Array [
            Object {
              "fontFace": "
font-family: 'Font Awesome 5 Free';
font-style: normal;
font-weight: 900;
font-display: block;",
              "fontsPath": "./webfonts",
              "licensePath": "./LICENSE.txt",
              "source": "fa-solid-900.eot",
              "sources": Array [
                Object {
                  "format": "embedded-opentype",
                  "path": "fa-solid-900.eot",
                  "urlAddition": "?#iefix",
                },
                Object {
                  "format": "woff2",
                  "path": "fa-solid-900.woff2",
                },
                Object {
                  "format": "woff",
                  "path": "fa-solid-900.woff",
                },
                Object {
                  "format": "truetype",
                  "path": "fa-solid-900.ttf",
                },
                Object {
                  "format": "svg",
                  "path": "fa-solid-900.svg",
                  "urlAddition": "#fontawesome",
                },
              ],
            },
          ],
          "label": "Font Awesome Solid",
          "name": "fontawesome-solid",
          "npmModule": "@fortawesome/fontawesome-free",
          "type": 0,
        },
        "iconColor": [Function],
        "styles": [Function],
      },
      "label": "SDK Default",
      "licenses": Array [
        "fonts/Raleway/OFL.txt",
      ],
      "localFonts": Object {
        "fonts/Raleway/Raleway-ExtraBold": [Function],
        "fonts/Raleway/Raleway-Medium": [Function],
      },
      "mixins": Object {
        "gutters": [Function],
        "toolbar": Object {
          "@media (min-width:0px) and (orientation: landscape)": Object {
            "minHeight": 48,
          },
          "@media (min-width:600px)": Object {
            "minHeight": 64,
          },
          "minHeight": 56,
        },
      },
      "name": "sdk-default",
      "overrides": Object {},
      "palette": Object {
        "action": Object {
          "activatedOpacity": 0.12,
          "active": "rgba(0, 0, 0, 0.54)",
          "disabled": "rgba(0, 0, 0, 0.26)",
          "disabledBackground": "rgba(0, 0, 0, 0.12)",
          "disabledOpacity": 0.38,
          "focus": "rgba(0, 0, 0, 0.12)",
          "focusOpacity": 0.12,
          "hover": "rgba(0, 0, 0, 0.04)",
          "hoverOpacity": 0.04,
          "selected": "rgba(0, 0, 0, 0.08)",
          "selectedOpacity": 0.08,
        },
        "adjustAlpha": [Function],
        "augmentColor": [Function],
        "background": Object {
          "default": "#FFFFFF",
          "paper": "#fff",
        },
        "common": Object {
          "black": "#000",
          "white": "#fff",
        },
        "contrastThreshold": 3,
        "divider": "rgba(0, 0, 0, 0.12)",
        "error": Object {
          "contrastText": "#fff",
          "dark": "#d32f2f",
          "light": "#e57373",
          "main": "#f44336",
        },
        "getContrastText": [Function],
        "grey": Object {
          "100": "#f5f5f5",
          "200": "#eeeeee",
          "300": "#e0e0e0",
          "400": "#bdbdbd",
          "50": "#fafafa",
          "500": "#9e9e9e",
          "600": "#757575",
          "700": "#616161",
          "800": "#424242",
          "900": "#212121",
          "A100": "#d5d5d5",
          "A200": "#aaaaaa",
          "A400": "#303030",
          "A700": "#616161",
        },
        "info": Object {
          "contrastText": "#fff",
          "dark": "#1976d2",
          "light": "#64b5f6",
          "main": "#2196f3",
        },
        "primary": Object {
          "contrastText": "#fff",
          "dark": "rgb(86, 53, 178)",
          "light": "rgb(150, 112, 255)",
          "main": "#7C4DFF",
        },
        "secondary": Object {
          "contrastText": "rgba(0, 0, 0, 0.87)",
          "dark": "#083575",
          "light": "#01C9EA",
          "main": "#18A9E6",
        },
        "success": Object {
          "contrastText": "rgba(0, 0, 0, 0.87)",
          "dark": "#388e3c",
          "light": "#81c784",
          "main": "#4caf50",
        },
        "text": Object {
          "disabled": "rgba(0, 0, 0, 0.38)",
          "hint": "rgba(0, 0, 0, 0.38)",
          "primary": "#4E4E4E",
          "secondary": "#4E4E4E",
        },
        "tonalOffset": 0.2,
        "type": "light",
        "warning": Object {
          "contrastText": "rgba(0, 0, 0, 0.87)",
          "dark": "#f57c00",
          "light": "#ffb74d",
          "main": "#ff9800",
        },
      },
      "props": Object {},
      "shadows": Array [
        "none",
        "0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12)",
        "0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12)",
        "0px 3px 3px -2px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 1px 8px 0px rgba(0,0,0,0.12)",
        "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
        "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
        "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
        "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
        "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
        "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
        "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
        "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
        "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
        "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
        "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
        "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
        "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
        "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
        "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
        "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
        "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
        "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
        "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
        "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
        "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
      ],
      "shape": Object {
        "borderRadius": 4,
      },
      "spacing": [Function],
      "stylesheets": Array [
        "https://fonts.googleapis.com/css?family=Raleway:500,800&display=swap",
      ],
      "transitions": Object {
        "create": [Function],
        "duration": Object {
          "complex": 375,
          "enteringScreen": 225,
          "leavingScreen": 195,
          "short": 250,
          "shorter": 200,
          "shortest": 150,
          "standard": 300,
        },
        "easing": Object {
          "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
          "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
          "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
          "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
        },
        "getAutoHeightDuration": [Function],
      },
      "typography": Object {
        "body": Object {
          "fontFamily": "\\"Raleway-Medium\\"",
          "fontSize": "0.9375rem",
          "fontWeight": 500,
          "letterSpacing": "0.01071em",
          "lineHeight": 1.43,
        },
        "body1": Object {
          "fontFamily": "\\"Raleway-ExtraBold\\"",
          "fontSize": "1rem",
          "fontWeight": 800,
          "letterSpacing": "0.00938em",
          "lineHeight": 1.5,
        },
        "body2": Object {
          "fontFamily": "\\"Raleway-Medium\\"",
          "fontSize": "0.9375rem",
          "fontWeight": 500,
          "letterSpacing": "0.01071em",
          "lineHeight": 1.43,
        },
        "button": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "0.875rem",
          "fontWeight": 500,
          "letterSpacing": "0.02857em",
          "lineHeight": 1.75,
          "textTransform": "uppercase",
        },
        "caption": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "0.75rem",
          "fontWeight": 400,
          "letterSpacing": "0.03333em",
          "lineHeight": 1.66,
        },
        "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
        "fontSize": 14,
        "fontWeightBold": 800,
        "fontWeightLight": 500,
        "fontWeightMedium": 500,
        "fontWeightRegular": 400,
        "h1": Object {
          "fontFamily": "\\"Raleway-ExtraBold\\"",
          "fontSize": "1.375rem",
          "fontWeight": 800,
          "letterSpacing": "-0.01562em",
          "lineHeight": 1.45,
        },
        "h2": Object {
          "fontFamily": "\\"Raleway-ExtraBold\\"",
          "fontSize": "1.125rem",
          "fontWeight": 800,
          "letterSpacing": "-0.00833em",
          "lineHeight": 1.27,
        },
        "h3": Object {
          "fontFamily": "\\"Raleway-ExtraBold\\"",
          "fontSize": "1.05rem",
          "fontWeight": 800,
          "letterSpacing": "0em",
          "lineHeight": 1.2,
        },
        "h4": Object {
          "fontFamily": "\\"Raleway-ExtraBold\\"",
          "fontSize": "1rem",
          "fontWeight": 800,
          "letterSpacing": "0.00735em",
          "lineHeight": 1.1,
        },
        "h5": Object {
          "fontFamily": "\\"Raleway-ExtraBold\\"",
          "fontSize": "1rem",
          "fontWeight": 800,
          "letterSpacing": "0em",
          "lineHeight": 1,
        },
        "h6": Object {
          "fontFamily": "\\"Raleway-ExtraBold\\"",
          "fontSize": "0.625rem",
          "fontWeight": 800,
          "letterSpacing": "0.0075em",
          "lineHeight": 1,
        },
        "heading": Object {
          "fontFamily": "\\"Raleway-ExtraBold\\"",
          "fontSize": "1rem",
          "fontWeight": 800,
          "letterSpacing": "0.00938em",
          "lineHeight": 1.5,
        },
        "htmlFontSize": 16,
        "overline": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "0.75rem",
          "fontWeight": 400,
          "letterSpacing": "0.08333em",
          "lineHeight": 2.66,
          "textTransform": "uppercase",
        },
        "pxToRem": [Function],
        "round": [Function],
        "subtitle1": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "1rem",
          "fontWeight": 400,
          "letterSpacing": "0.00938em",
          "lineHeight": 1.75,
        },
        "subtitle2": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "0.875rem",
          "fontWeight": 500,
          "letterSpacing": "0.00714em",
          "lineHeight": 1.57,
        },
      },
      "zIndex": Object {
        "appBar": 1100,
        "drawer": 1200,
        "mobileStepper": 1000,
        "modal": 1300,
        "snackbar": 1400,
        "speedDial": 1050,
        "tooltip": 1500,
      },
      Symbol(mui.nested): false,
    }
  }
>
  <StylesProvider
    generateClassName={[Function]}
  >
    <ThemeProvider
      theme={
        Object {
          "breakpoints": Object {
            "between": [Function],
            "down": [Function],
            "keys": Array [
              "xs",
              "sm",
              "md",
              "lg",
              "xl",
            ],
            "only": [Function],
            "up": [Function],
            "values": Object {
              "lg": 1280,
              "md": 960,
              "sm": 600,
              "xl": 1920,
              "xs": 0,
            },
            "width": [Function],
          },
          "direction": "ltr",
          "iconSet": Object {
            "config": Object {
              "cssFiles": Array [
                "css/all.css",
              ],
              "fonts": Array [
                Object {
                  "fontFace": "
font-family: 'Font Awesome 5 Free';
font-style: normal;
font-weight: 900;
font-display: block;",
                  "fontsPath": "./webfonts",
                  "licensePath": "./LICENSE.txt",
                  "source": "fa-solid-900.eot",
                  "sources": Array [
                    Object {
                      "format": "embedded-opentype",
                      "path": "fa-solid-900.eot",
                      "urlAddition": "?#iefix",
                    },
                    Object {
                      "format": "woff2",
                      "path": "fa-solid-900.woff2",
                    },
                    Object {
                      "format": "woff",
                      "path": "fa-solid-900.woff",
                    },
                    Object {
                      "format": "truetype",
                      "path": "fa-solid-900.ttf",
                    },
                    Object {
                      "format": "svg",
                      "path": "fa-solid-900.svg",
                      "urlAddition": "#fontawesome",
                    },
                  ],
                },
              ],
              "label": "Font Awesome Solid",
              "name": "fontawesome-solid",
              "npmModule": "@fortawesome/fontawesome-free",
              "type": 0,
            },
            "iconColor": [Function],
            "styles": [Function],
          },
          "icons": Object {
            "config": Object {
              "cssFiles": Array [
                "css/all.css",
              ],
              "fonts": Array [
                Object {
                  "fontFace": "
font-family: 'Font Awesome 5 Free';
font-style: normal;
font-weight: 900;
font-display: block;",
                  "fontsPath": "./webfonts",
                  "licensePath": "./LICENSE.txt",
                  "source": "fa-solid-900.eot",
                  "sources": Array [
                    Object {
                      "format": "embedded-opentype",
                      "path": "fa-solid-900.eot",
                      "urlAddition": "?#iefix",
                    },
                    Object {
                      "format": "woff2",
                      "path": "fa-solid-900.woff2",
                    },
                    Object {
                      "format": "woff",
                      "path": "fa-solid-900.woff",
                    },
                    Object {
                      "format": "truetype",
                      "path": "fa-solid-900.ttf",
                    },
                    Object {
                      "format": "svg",
                      "path": "fa-solid-900.svg",
                      "urlAddition": "#fontawesome",
                    },
                  ],
                },
              ],
              "label": "Font Awesome Solid",
              "name": "fontawesome-solid",
              "npmModule": "@fortawesome/fontawesome-free",
              "type": 0,
            },
            "iconColor": [Function],
            "styles": [Function],
          },
          "label": "SDK Default",
          "licenses": Array [
            "fonts/Raleway/OFL.txt",
          ],
          "localFonts": Object {
            "fonts/Raleway/Raleway-ExtraBold": [Function],
            "fonts/Raleway/Raleway-Medium": [Function],
          },
          "mixins": Object {
            "gutters": [Function],
            "toolbar": Object {
              "@media (min-width:0px) and (orientation: landscape)": Object {
                "minHeight": 48,
              },
              "@media (min-width:600px)": Object {
                "minHeight": 64,
              },
              "minHeight": 56,
            },
          },
          "name": "sdk-default",
          "overrides": Object {},
          "palette": Object {
            "action": Object {
              "activatedOpacity": 0.12,
              "active": "rgba(0, 0, 0, 0.54)",
              "disabled": "rgba(0, 0, 0, 0.26)",
              "disabledBackground": "rgba(0, 0, 0, 0.12)",
              "disabledOpacity": 0.38,
              "focus": "rgba(0, 0, 0, 0.12)",
              "focusOpacity": 0.12,
              "hover": "rgba(0, 0, 0, 0.04)",
              "hoverOpacity": 0.04,
              "selected": "rgba(0, 0, 0, 0.08)",
              "selectedOpacity": 0.08,
            },
            "adjustAlpha": [Function],
            "augmentColor": [Function],
            "background": Object {
              "default": "#FFFFFF",
              "paper": "#fff",
            },
            "common": Object {
              "black": "#000",
              "white": "#fff",
            },
            "contrastThreshold": 3,
            "divider": "rgba(0, 0, 0, 0.12)",
            "error": Object {
              "contrastText": "#fff",
              "dark": "#d32f2f",
              "light": "#e57373",
              "main": "#f44336",
            },
            "getContrastText": [Function],
            "grey": Object {
              "100": "#f5f5f5",
              "200": "#eeeeee",
              "300": "#e0e0e0",
              "400": "#bdbdbd",
              "50": "#fafafa",
              "500": "#9e9e9e",
              "600": "#757575",
              "700": "#616161",
              "800": "#424242",
              "900": "#212121",
              "A100": "#d5d5d5",
              "A200": "#aaaaaa",
              "A400": "#303030",
              "A700": "#616161",
            },
            "info": Object {
              "contrastText": "#fff",
              "dark": "#1976d2",
              "light": "#64b5f6",
              "main": "#2196f3",
            },
            "primary": Object {
              "contrastText": "#fff",
              "dark": "rgb(86, 53, 178)",
              "light": "rgb(150, 112, 255)",
              "main": "#7C4DFF",
            },
            "secondary": Object {
              "contrastText": "rgba(0, 0, 0, 0.87)",
              "dark": "#083575",
              "light": "#01C9EA",
              "main": "#18A9E6",
            },
            "success": Object {
              "contrastText": "rgba(0, 0, 0, 0.87)",
              "dark": "#388e3c",
              "light": "#81c784",
              "main": "#4caf50",
            },
            "text": Object {
              "disabled": "rgba(0, 0, 0, 0.38)",
              "hint": "rgba(0, 0, 0, 0.38)",
              "primary": "#4E4E4E",
              "secondary": "#4E4E4E",
            },
            "tonalOffset": 0.2,
            "type": "light",
            "warning": Object {
              "contrastText": "rgba(0, 0, 0, 0.87)",
              "dark": "#f57c00",
              "light": "#ffb74d",
              "main": "#ff9800",
            },
          },
          "props": Object {},
          "shadows": Array [
            "none",
            "0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12)",
            "0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12)",
            "0px 3px 3px -2px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 1px 8px 0px rgba(0,0,0,0.12)",
            "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
            "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
            "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
            "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
            "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
            "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
            "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
            "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
            "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
            "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
            "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
            "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
            "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
            "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
            "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
            "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
            "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
            "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
            "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
            "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
            "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
          ],
          "shape": Object {
            "borderRadius": 4,
          },
          "spacing": [Function],
          "stylesheets": Array [
            "https://fonts.googleapis.com/css?family=Raleway:500,800&display=swap",
          ],
          "transitions": Object {
            "create": [Function],
            "duration": Object {
              "complex": 375,
              "enteringScreen": 225,
              "leavingScreen": 195,
              "short": 250,
              "shorter": 200,
              "shortest": 150,
              "standard": 300,
            },
            "easing": Object {
              "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
              "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
              "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
              "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
            },
            "getAutoHeightDuration": [Function],
          },
          "typography": Object {
            "body": Object {
              "fontFamily": "\\"Raleway-Medium\\"",
              "fontSize": "0.9375rem",
              "fontWeight": 500,
              "letterSpacing": "0.01071em",
              "lineHeight": 1.43,
            },
            "body1": Object {
              "fontFamily": "\\"Raleway-ExtraBold\\"",
              "fontSize": "1rem",
              "fontWeight": 800,
              "letterSpacing": "0.00938em",
              "lineHeight": 1.5,
            },
            "body2": Object {
              "fontFamily": "\\"Raleway-Medium\\"",
              "fontSize": "0.9375rem",
              "fontWeight": 500,
              "letterSpacing": "0.01071em",
              "lineHeight": 1.43,
            },
            "button": Object {
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "0.875rem",
              "fontWeight": 500,
              "letterSpacing": "0.02857em",
              "lineHeight": 1.75,
              "textTransform": "uppercase",
            },
            "caption": Object {
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "0.75rem",
              "fontWeight": 400,
              "letterSpacing": "0.03333em",
              "lineHeight": 1.66,
            },
            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
            "fontSize": 14,
            "fontWeightBold": 800,
            "fontWeightLight": 500,
            "fontWeightMedium": 500,
            "fontWeightRegular": 400,
            "h1": Object {
              "fontFamily": "\\"Raleway-ExtraBold\\"",
              "fontSize": "1.375rem",
              "fontWeight": 800,
              "letterSpacing": "-0.01562em",
              "lineHeight": 1.45,
            },
            "h2": Object {
              "fontFamily": "\\"Raleway-ExtraBold\\"",
              "fontSize": "1.125rem",
              "fontWeight": 800,
              "letterSpacing": "-0.00833em",
              "lineHeight": 1.27,
            },
            "h3": Object {
              "fontFamily": "\\"Raleway-ExtraBold\\"",
              "fontSize": "1.05rem",
              "fontWeight": 800,
              "letterSpacing": "0em",
              "lineHeight": 1.2,
            },
            "h4": Object {
              "fontFamily": "\\"Raleway-ExtraBold\\"",
              "fontSize": "1rem",
              "fontWeight": 800,
              "letterSpacing": "0.00735em",
              "lineHeight": 1.1,
            },
            "h5": Object {
              "fontFamily": "\\"Raleway-ExtraBold\\"",
              "fontSize": "1rem",
              "fontWeight": 800,
              "letterSpacing": "0em",
              "lineHeight": 1,
            },
            "h6": Object {
              "fontFamily": "\\"Raleway-ExtraBold\\"",
              "fontSize": "0.625rem",
              "fontWeight": 800,
              "letterSpacing": "0.0075em",
              "lineHeight": 1,
            },
            "heading": Object {
              "fontFamily": "\\"Raleway-ExtraBold\\"",
              "fontSize": "1rem",
              "fontWeight": 800,
              "letterSpacing": "0.00938em",
              "lineHeight": 1.5,
            },
            "htmlFontSize": 16,
            "overline": Object {
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "0.75rem",
              "fontWeight": 400,
              "letterSpacing": "0.08333em",
              "lineHeight": 2.66,
              "textTransform": "uppercase",
            },
            "pxToRem": [Function],
            "round": [Function],
            "subtitle1": Object {
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "1rem",
              "fontWeight": 400,
              "letterSpacing": "0.00938em",
              "lineHeight": 1.75,
            },
            "subtitle2": Object {
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "0.875rem",
              "fontWeight": 500,
              "letterSpacing": "0.00714em",
              "lineHeight": 1.57,
            },
          },
          "zIndex": Object {
            "appBar": 1100,
            "drawer": 1200,
            "mobileStepper": 1000,
            "modal": 1300,
            "snackbar": 1400,
            "speedDial": 1050,
            "tooltip": 1500,
          },
          Symbol(mui.nested): false,
        }
      }
    >
      <ThirdPartyPermissions
        classes={
          Object {
            "centeredSection": "centeredSection",
            "listItem": "listItem",
            "thirdPartyPermissions": Array [
              Object {
                "acl": Object {
                  "append": true,
                  "control": true,
                  "read": true,
                  "write": true,
                },
                "alias": "Full Control",
                "profile": Object {
                  "avatar": "avatar",
                  "name": "name",
                  "webId": "webId",
                },
              },
            ],
          }
        }
        iri="iri"
        setThirdPartyPermissions={[MockFunction]}
        thirdPartyPermissions={null}
      />
    </ThemeProvider>
  </StylesProvider>
</WithTheme>
`;
