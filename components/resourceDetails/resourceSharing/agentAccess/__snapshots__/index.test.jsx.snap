// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AgentAccess renders 1`] = `
<Component
  theme={
    Object {
      "breakpoints": Object {
        "between": [Function],
        "down": [Function],
        "keys": Array [
          "xs",
          "sm",
          "md",
          "lg",
          "xl",
        ],
        "only": [Function],
        "up": [Function],
        "values": Object {
          "lg": 1280,
          "md": 960,
          "sm": 600,
          "xl": 1920,
          "xs": 0,
        },
        "width": [Function],
      },
      "direction": "ltr",
      "iconSet": Object {
        "config": Object {
          "cssFiles": Array [
            "css/all.css",
          ],
          "fonts": Array [
            Object {
              "fontFace": "
font-family: 'Font Awesome 5 Free';
font-style: normal;
font-weight: 900;
font-display: block;",
              "fontsPath": "./webfonts",
              "licensePath": "./LICENSE.txt",
              "source": "fa-solid-900.eot",
              "sources": Array [
                Object {
                  "format": "embedded-opentype",
                  "path": "fa-solid-900.eot",
                  "urlAddition": "?#iefix",
                },
                Object {
                  "format": "woff2",
                  "path": "fa-solid-900.woff2",
                },
                Object {
                  "format": "woff",
                  "path": "fa-solid-900.woff",
                },
                Object {
                  "format": "truetype",
                  "path": "fa-solid-900.ttf",
                },
                Object {
                  "format": "svg",
                  "path": "fa-solid-900.svg",
                  "urlAddition": "#fontawesome",
                },
              ],
            },
          ],
          "label": "Font Awesome Solid",
          "name": "fontawesome-solid",
          "npmModule": "@fortawesome/fontawesome-free",
          "type": 0,
        },
        "iconColor": [Function],
        "styles": [Function],
      },
      "icons": Object {
        "config": Object {
          "cssFiles": Array [
            "css/all.css",
          ],
          "fonts": Array [
            Object {
              "fontFace": "
font-family: 'Font Awesome 5 Free';
font-style: normal;
font-weight: 900;
font-display: block;",
              "fontsPath": "./webfonts",
              "licensePath": "./LICENSE.txt",
              "source": "fa-solid-900.eot",
              "sources": Array [
                Object {
                  "format": "embedded-opentype",
                  "path": "fa-solid-900.eot",
                  "urlAddition": "?#iefix",
                },
                Object {
                  "format": "woff2",
                  "path": "fa-solid-900.woff2",
                },
                Object {
                  "format": "woff",
                  "path": "fa-solid-900.woff",
                },
                Object {
                  "format": "truetype",
                  "path": "fa-solid-900.ttf",
                },
                Object {
                  "format": "svg",
                  "path": "fa-solid-900.svg",
                  "urlAddition": "#fontawesome",
                },
              ],
            },
          ],
          "label": "Font Awesome Solid",
          "name": "fontawesome-solid",
          "npmModule": "@fortawesome/fontawesome-free",
          "type": 0,
        },
        "iconColor": [Function],
        "styles": [Function],
      },
      "label": "SDK Default",
      "licenses": Array [
        "fonts/Raleway/OFL.txt",
      ],
      "localFonts": Object {
        "fonts/Raleway/Raleway-ExtraBold": [Function],
        "fonts/Raleway/Raleway-Medium": [Function],
      },
      "mixins": Object {
        "gutters": [Function],
        "toolbar": Object {
          "@media (min-width:0px) and (orientation: landscape)": Object {
            "minHeight": 48,
          },
          "@media (min-width:600px)": Object {
            "minHeight": 64,
          },
          "minHeight": 56,
        },
      },
      "name": "sdk-default",
      "overrides": Object {},
      "palette": Object {
        "action": Object {
          "activatedOpacity": 0.12,
          "active": "rgba(0, 0, 0, 0.54)",
          "disabled": "rgba(0, 0, 0, 0.26)",
          "disabledBackground": "rgba(0, 0, 0, 0.12)",
          "disabledOpacity": 0.38,
          "focus": "rgba(0, 0, 0, 0.12)",
          "focusOpacity": 0.12,
          "hover": "rgba(0, 0, 0, 0.04)",
          "hoverOpacity": 0.04,
          "selected": "rgba(0, 0, 0, 0.08)",
          "selectedOpacity": 0.08,
        },
        "adjustAlpha": [Function],
        "augmentColor": [Function],
        "background": Object {
          "default": "#FFFFFF",
          "paper": "#fff",
        },
        "common": Object {
          "black": "#000",
          "white": "#fff",
        },
        "contrastThreshold": 3,
        "divider": "rgba(0, 0, 0, 0.12)",
        "error": Object {
          "contrastText": "#fff",
          "dark": "#d32f2f",
          "light": "#e57373",
          "main": "#f44336",
        },
        "getContrastText": [Function],
        "grey": Object {
          "100": "#f5f5f5",
          "200": "#eeeeee",
          "300": "#e0e0e0",
          "400": "#bdbdbd",
          "50": "#fafafa",
          "500": "#9e9e9e",
          "600": "#757575",
          "700": "#616161",
          "800": "#424242",
          "900": "#212121",
          "A100": "#d5d5d5",
          "A200": "#aaaaaa",
          "A400": "#303030",
          "A700": "#616161",
        },
        "info": Object {
          "contrastText": "#fff",
          "dark": "#1976d2",
          "light": "#64b5f6",
          "main": "#2196f3",
        },
        "primary": Object {
          "contrastText": "#fff",
          "dark": "rgb(86, 53, 178)",
          "light": "rgb(150, 112, 255)",
          "main": "#7C4DFF",
        },
        "secondary": Object {
          "contrastText": "rgba(0, 0, 0, 0.87)",
          "dark": "#083575",
          "light": "#01C9EA",
          "main": "#18A9E6",
        },
        "success": Object {
          "contrastText": "rgba(0, 0, 0, 0.87)",
          "dark": "#388e3c",
          "light": "#81c784",
          "main": "#4caf50",
        },
        "text": Object {
          "disabled": "rgba(0, 0, 0, 0.38)",
          "hint": "rgba(0, 0, 0, 0.38)",
          "primary": "#4E4E4E",
          "secondary": "#4E4E4E",
        },
        "tonalOffset": 0.2,
        "type": "light",
        "warning": Object {
          "contrastText": "rgba(0, 0, 0, 0.87)",
          "dark": "#f57c00",
          "light": "#ffb74d",
          "main": "#ff9800",
        },
      },
      "props": Object {},
      "shadows": Array [
        "none",
        "0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12)",
        "0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12)",
        "0px 3px 3px -2px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 1px 8px 0px rgba(0,0,0,0.12)",
        "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
        "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
        "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
        "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
        "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
        "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
        "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
        "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
        "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
        "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
        "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
        "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
        "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
        "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
        "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
        "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
        "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
        "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
        "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
        "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
        "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
      ],
      "shape": Object {
        "borderRadius": 4,
      },
      "spacing": [Function],
      "stylesheets": Array [
        "https://fonts.googleapis.com/css?family=Raleway:500,800&display=swap",
      ],
      "transitions": Object {
        "create": [Function],
        "duration": Object {
          "complex": 375,
          "enteringScreen": 225,
          "leavingScreen": 195,
          "short": 250,
          "shorter": 200,
          "shortest": 150,
          "standard": 300,
        },
        "easing": Object {
          "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
          "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
          "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
          "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
        },
        "getAutoHeightDuration": [Function],
      },
      "typography": Object {
        "body": Object {
          "fontFamily": "\\"Raleway-Medium\\"",
          "fontSize": "0.9375rem",
          "fontWeight": 500,
          "letterSpacing": "0.01071em",
          "lineHeight": 1.43,
        },
        "body1": Object {
          "fontFamily": "\\"Raleway-ExtraBold\\"",
          "fontSize": "1rem",
          "fontWeight": 800,
          "letterSpacing": "0.00938em",
          "lineHeight": 1.5,
        },
        "body2": Object {
          "fontFamily": "\\"Raleway-Medium\\"",
          "fontSize": "0.9375rem",
          "fontWeight": 500,
          "letterSpacing": "0.01071em",
          "lineHeight": 1.43,
        },
        "button": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "0.875rem",
          "fontWeight": 500,
          "letterSpacing": "0.02857em",
          "lineHeight": 1.75,
          "textTransform": "uppercase",
        },
        "caption": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "0.75rem",
          "fontWeight": 400,
          "letterSpacing": "0.03333em",
          "lineHeight": 1.66,
        },
        "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
        "fontSize": 14,
        "fontWeightBold": 800,
        "fontWeightLight": 500,
        "fontWeightMedium": 500,
        "fontWeightRegular": 400,
        "h1": Object {
          "fontFamily": "\\"Raleway-ExtraBold\\"",
          "fontSize": "1.375rem",
          "fontWeight": 800,
          "letterSpacing": "-0.01562em",
          "lineHeight": 1.45,
        },
        "h2": Object {
          "fontFamily": "\\"Raleway-ExtraBold\\"",
          "fontSize": "1.125rem",
          "fontWeight": 800,
          "letterSpacing": "-0.00833em",
          "lineHeight": 1.27,
        },
        "h3": Object {
          "fontFamily": "\\"Raleway-ExtraBold\\"",
          "fontSize": "1.05rem",
          "fontWeight": 800,
          "letterSpacing": "0em",
          "lineHeight": 1.2,
        },
        "h4": Object {
          "fontFamily": "\\"Raleway-ExtraBold\\"",
          "fontSize": "1rem",
          "fontWeight": 800,
          "letterSpacing": "0.00735em",
          "lineHeight": 1.1,
        },
        "h5": Object {
          "fontFamily": "\\"Raleway-ExtraBold\\"",
          "fontSize": "1rem",
          "fontWeight": 800,
          "letterSpacing": "0em",
          "lineHeight": 1,
        },
        "h6": Object {
          "fontFamily": "\\"Raleway-ExtraBold\\"",
          "fontSize": "0.625rem",
          "fontWeight": 800,
          "letterSpacing": "0.0075em",
          "lineHeight": 1,
        },
        "heading": Object {
          "fontFamily": "\\"Raleway-ExtraBold\\"",
          "fontSize": "1rem",
          "fontWeight": 800,
          "letterSpacing": "0.00938em",
          "lineHeight": 1.5,
        },
        "htmlFontSize": 16,
        "overline": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "0.75rem",
          "fontWeight": 400,
          "letterSpacing": "0.08333em",
          "lineHeight": 2.66,
          "textTransform": "uppercase",
        },
        "pxToRem": [Function],
        "round": [Function],
        "subtitle1": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "1rem",
          "fontWeight": 400,
          "letterSpacing": "0.00938em",
          "lineHeight": 1.75,
        },
        "subtitle2": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "0.875rem",
          "fontWeight": 500,
          "letterSpacing": "0.00714em",
          "lineHeight": 1.57,
        },
      },
      "zIndex": Object {
        "appBar": 1100,
        "drawer": 1200,
        "mobileStepper": 1000,
        "modal": 1300,
        "snackbar": 1400,
        "speedDial": 1050,
        "tooltip": 1500,
      },
      Symbol(mui.nested): false,
    }
  }
>
  <StylesProvider
    generateClassName={[Function]}
  >
    <ThemeProvider
      theme={
        Object {
          "breakpoints": Object {
            "between": [Function],
            "down": [Function],
            "keys": Array [
              "xs",
              "sm",
              "md",
              "lg",
              "xl",
            ],
            "only": [Function],
            "up": [Function],
            "values": Object {
              "lg": 1280,
              "md": 960,
              "sm": 600,
              "xl": 1920,
              "xs": 0,
            },
            "width": [Function],
          },
          "direction": "ltr",
          "iconSet": Object {
            "config": Object {
              "cssFiles": Array [
                "css/all.css",
              ],
              "fonts": Array [
                Object {
                  "fontFace": "
font-family: 'Font Awesome 5 Free';
font-style: normal;
font-weight: 900;
font-display: block;",
                  "fontsPath": "./webfonts",
                  "licensePath": "./LICENSE.txt",
                  "source": "fa-solid-900.eot",
                  "sources": Array [
                    Object {
                      "format": "embedded-opentype",
                      "path": "fa-solid-900.eot",
                      "urlAddition": "?#iefix",
                    },
                    Object {
                      "format": "woff2",
                      "path": "fa-solid-900.woff2",
                    },
                    Object {
                      "format": "woff",
                      "path": "fa-solid-900.woff",
                    },
                    Object {
                      "format": "truetype",
                      "path": "fa-solid-900.ttf",
                    },
                    Object {
                      "format": "svg",
                      "path": "fa-solid-900.svg",
                      "urlAddition": "#fontawesome",
                    },
                  ],
                },
              ],
              "label": "Font Awesome Solid",
              "name": "fontawesome-solid",
              "npmModule": "@fortawesome/fontawesome-free",
              "type": 0,
            },
            "iconColor": [Function],
            "styles": [Function],
          },
          "icons": Object {
            "config": Object {
              "cssFiles": Array [
                "css/all.css",
              ],
              "fonts": Array [
                Object {
                  "fontFace": "
font-family: 'Font Awesome 5 Free';
font-style: normal;
font-weight: 900;
font-display: block;",
                  "fontsPath": "./webfonts",
                  "licensePath": "./LICENSE.txt",
                  "source": "fa-solid-900.eot",
                  "sources": Array [
                    Object {
                      "format": "embedded-opentype",
                      "path": "fa-solid-900.eot",
                      "urlAddition": "?#iefix",
                    },
                    Object {
                      "format": "woff2",
                      "path": "fa-solid-900.woff2",
                    },
                    Object {
                      "format": "woff",
                      "path": "fa-solid-900.woff",
                    },
                    Object {
                      "format": "truetype",
                      "path": "fa-solid-900.ttf",
                    },
                    Object {
                      "format": "svg",
                      "path": "fa-solid-900.svg",
                      "urlAddition": "#fontawesome",
                    },
                  ],
                },
              ],
              "label": "Font Awesome Solid",
              "name": "fontawesome-solid",
              "npmModule": "@fortawesome/fontawesome-free",
              "type": 0,
            },
            "iconColor": [Function],
            "styles": [Function],
          },
          "label": "SDK Default",
          "licenses": Array [
            "fonts/Raleway/OFL.txt",
          ],
          "localFonts": Object {
            "fonts/Raleway/Raleway-ExtraBold": [Function],
            "fonts/Raleway/Raleway-Medium": [Function],
          },
          "mixins": Object {
            "gutters": [Function],
            "toolbar": Object {
              "@media (min-width:0px) and (orientation: landscape)": Object {
                "minHeight": 48,
              },
              "@media (min-width:600px)": Object {
                "minHeight": 64,
              },
              "minHeight": 56,
            },
          },
          "name": "sdk-default",
          "overrides": Object {},
          "palette": Object {
            "action": Object {
              "activatedOpacity": 0.12,
              "active": "rgba(0, 0, 0, 0.54)",
              "disabled": "rgba(0, 0, 0, 0.26)",
              "disabledBackground": "rgba(0, 0, 0, 0.12)",
              "disabledOpacity": 0.38,
              "focus": "rgba(0, 0, 0, 0.12)",
              "focusOpacity": 0.12,
              "hover": "rgba(0, 0, 0, 0.04)",
              "hoverOpacity": 0.04,
              "selected": "rgba(0, 0, 0, 0.08)",
              "selectedOpacity": 0.08,
            },
            "adjustAlpha": [Function],
            "augmentColor": [Function],
            "background": Object {
              "default": "#FFFFFF",
              "paper": "#fff",
            },
            "common": Object {
              "black": "#000",
              "white": "#fff",
            },
            "contrastThreshold": 3,
            "divider": "rgba(0, 0, 0, 0.12)",
            "error": Object {
              "contrastText": "#fff",
              "dark": "#d32f2f",
              "light": "#e57373",
              "main": "#f44336",
            },
            "getContrastText": [Function],
            "grey": Object {
              "100": "#f5f5f5",
              "200": "#eeeeee",
              "300": "#e0e0e0",
              "400": "#bdbdbd",
              "50": "#fafafa",
              "500": "#9e9e9e",
              "600": "#757575",
              "700": "#616161",
              "800": "#424242",
              "900": "#212121",
              "A100": "#d5d5d5",
              "A200": "#aaaaaa",
              "A400": "#303030",
              "A700": "#616161",
            },
            "info": Object {
              "contrastText": "#fff",
              "dark": "#1976d2",
              "light": "#64b5f6",
              "main": "#2196f3",
            },
            "primary": Object {
              "contrastText": "#fff",
              "dark": "rgb(86, 53, 178)",
              "light": "rgb(150, 112, 255)",
              "main": "#7C4DFF",
            },
            "secondary": Object {
              "contrastText": "rgba(0, 0, 0, 0.87)",
              "dark": "#083575",
              "light": "#01C9EA",
              "main": "#18A9E6",
            },
            "success": Object {
              "contrastText": "rgba(0, 0, 0, 0.87)",
              "dark": "#388e3c",
              "light": "#81c784",
              "main": "#4caf50",
            },
            "text": Object {
              "disabled": "rgba(0, 0, 0, 0.38)",
              "hint": "rgba(0, 0, 0, 0.38)",
              "primary": "#4E4E4E",
              "secondary": "#4E4E4E",
            },
            "tonalOffset": 0.2,
            "type": "light",
            "warning": Object {
              "contrastText": "rgba(0, 0, 0, 0.87)",
              "dark": "#f57c00",
              "light": "#ffb74d",
              "main": "#ff9800",
            },
          },
          "props": Object {},
          "shadows": Array [
            "none",
            "0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12)",
            "0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12)",
            "0px 3px 3px -2px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 1px 8px 0px rgba(0,0,0,0.12)",
            "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
            "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
            "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
            "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
            "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
            "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
            "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
            "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
            "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
            "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
            "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
            "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
            "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
            "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
            "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
            "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
            "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
            "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
            "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
            "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
            "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
          ],
          "shape": Object {
            "borderRadius": 4,
          },
          "spacing": [Function],
          "stylesheets": Array [
            "https://fonts.googleapis.com/css?family=Raleway:500,800&display=swap",
          ],
          "transitions": Object {
            "create": [Function],
            "duration": Object {
              "complex": 375,
              "enteringScreen": 225,
              "leavingScreen": 195,
              "short": 250,
              "shorter": 200,
              "shortest": 150,
              "standard": 300,
            },
            "easing": Object {
              "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
              "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
              "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
              "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
            },
            "getAutoHeightDuration": [Function],
          },
          "typography": Object {
            "body": Object {
              "fontFamily": "\\"Raleway-Medium\\"",
              "fontSize": "0.9375rem",
              "fontWeight": 500,
              "letterSpacing": "0.01071em",
              "lineHeight": 1.43,
            },
            "body1": Object {
              "fontFamily": "\\"Raleway-ExtraBold\\"",
              "fontSize": "1rem",
              "fontWeight": 800,
              "letterSpacing": "0.00938em",
              "lineHeight": 1.5,
            },
            "body2": Object {
              "fontFamily": "\\"Raleway-Medium\\"",
              "fontSize": "0.9375rem",
              "fontWeight": 500,
              "letterSpacing": "0.01071em",
              "lineHeight": 1.43,
            },
            "button": Object {
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "0.875rem",
              "fontWeight": 500,
              "letterSpacing": "0.02857em",
              "lineHeight": 1.75,
              "textTransform": "uppercase",
            },
            "caption": Object {
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "0.75rem",
              "fontWeight": 400,
              "letterSpacing": "0.03333em",
              "lineHeight": 1.66,
            },
            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
            "fontSize": 14,
            "fontWeightBold": 800,
            "fontWeightLight": 500,
            "fontWeightMedium": 500,
            "fontWeightRegular": 400,
            "h1": Object {
              "fontFamily": "\\"Raleway-ExtraBold\\"",
              "fontSize": "1.375rem",
              "fontWeight": 800,
              "letterSpacing": "-0.01562em",
              "lineHeight": 1.45,
            },
            "h2": Object {
              "fontFamily": "\\"Raleway-ExtraBold\\"",
              "fontSize": "1.125rem",
              "fontWeight": 800,
              "letterSpacing": "-0.00833em",
              "lineHeight": 1.27,
            },
            "h3": Object {
              "fontFamily": "\\"Raleway-ExtraBold\\"",
              "fontSize": "1.05rem",
              "fontWeight": 800,
              "letterSpacing": "0em",
              "lineHeight": 1.2,
            },
            "h4": Object {
              "fontFamily": "\\"Raleway-ExtraBold\\"",
              "fontSize": "1rem",
              "fontWeight": 800,
              "letterSpacing": "0.00735em",
              "lineHeight": 1.1,
            },
            "h5": Object {
              "fontFamily": "\\"Raleway-ExtraBold\\"",
              "fontSize": "1rem",
              "fontWeight": 800,
              "letterSpacing": "0em",
              "lineHeight": 1,
            },
            "h6": Object {
              "fontFamily": "\\"Raleway-ExtraBold\\"",
              "fontSize": "0.625rem",
              "fontWeight": 800,
              "letterSpacing": "0.0075em",
              "lineHeight": 1,
            },
            "heading": Object {
              "fontFamily": "\\"Raleway-ExtraBold\\"",
              "fontSize": "1rem",
              "fontWeight": 800,
              "letterSpacing": "0.00938em",
              "lineHeight": 1.5,
            },
            "htmlFontSize": 16,
            "overline": Object {
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "0.75rem",
              "fontWeight": 400,
              "letterSpacing": "0.08333em",
              "lineHeight": 2.66,
              "textTransform": "uppercase",
            },
            "pxToRem": [Function],
            "round": [Function],
            "subtitle1": Object {
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "1rem",
              "fontWeight": 400,
              "letterSpacing": "0.00938em",
              "lineHeight": 1.75,
            },
            "subtitle2": Object {
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "0.875rem",
              "fontWeight": 500,
              "letterSpacing": "0.00714em",
              "lineHeight": 1.57,
            },
          },
          "zIndex": Object {
            "appBar": 1100,
            "drawer": 1200,
            "mobileStepper": 1000,
            "modal": 1300,
            "snackbar": 1400,
            "speedDial": 1050,
            "tooltip": 1500,
          },
          Symbol(mui.nested): false,
        }
      }
    >
      <m
        dataset={
          DatasetCore {
            "internal_resourceInfo": Object {
              "contentType": "text/turtle",
              "isRawData": false,
              "linkedResources": Object {},
              "sourceIri": "http://example.com/dataset",
            },
            "quads": Set {},
          }
        }
      >
        <AgentAccess
          onLoading={[Function]}
          permission={
            Object {
              "acl": undefined,
              "profile": Object {
                "avatar": "http://example.com/avatar.jpg",
                "name": "name",
              },
            }
          }
        >
          <WithStyles(ForwardRef(Avatar))
            alt="name"
            className="PodBrowser-avatar"
            src="http://example.com/avatar.jpg"
          >
            <ForwardRef(Avatar)
              alt="name"
              className="PodBrowser-avatar"
              classes={
                Object {
                  "circle": "PodBrowser-circle",
                  "colorDefault": "PodBrowser-colorDefault",
                  "fallback": "PodBrowser-fallback",
                  "img": "PodBrowser-img",
                  "root": "PodBrowser-root",
                  "rounded": "PodBrowser-rounded",
                  "square": "PodBrowser-square",
                }
              }
              src="http://example.com/avatar.jpg"
            >
              <div
                className="PodBrowser-root PodBrowser-circle PodBrowser-avatar"
              >
                <img
                  alt="name"
                  className="PodBrowser-img"
                  src="http://example.com/avatar.jpg"
                />
              </div>
            </ForwardRef(Avatar)>
          </WithStyles(ForwardRef(Avatar))>
          <WithStyles(ForwardRef(Typography))
            className="PodBrowser-detailText"
            data-testid="agent-web-id"
          >
            <ForwardRef(Typography)
              className="PodBrowser-detailText"
              classes={
                Object {
                  "alignCenter": "PodBrowser-alignCenter",
                  "alignJustify": "PodBrowser-alignJustify",
                  "alignLeft": "PodBrowser-alignLeft",
                  "alignRight": "PodBrowser-alignRight",
                  "body1": "PodBrowser-body1",
                  "body2": "PodBrowser-body2",
                  "button": "PodBrowser-button",
                  "caption": "PodBrowser-caption",
                  "colorError": "PodBrowser-colorError",
                  "colorInherit": "PodBrowser-colorInherit",
                  "colorPrimary": "PodBrowser-colorPrimary",
                  "colorSecondary": "PodBrowser-colorSecondary",
                  "colorTextPrimary": "PodBrowser-colorTextPrimary",
                  "colorTextSecondary": "PodBrowser-colorTextSecondary",
                  "displayBlock": "PodBrowser-displayBlock",
                  "displayInline": "PodBrowser-displayInline",
                  "gutterBottom": "PodBrowser-gutterBottom",
                  "h1": "PodBrowser-h1",
                  "h2": "PodBrowser-h2",
                  "h3": "PodBrowser-h3",
                  "h4": "PodBrowser-h4",
                  "h5": "PodBrowser-h5",
                  "h6": "PodBrowser-h6",
                  "noWrap": "PodBrowser-noWrap",
                  "overline": "PodBrowser-overline",
                  "paragraph": "PodBrowser-paragraph",
                  "root": "PodBrowser-root",
                  "srOnly": "PodBrowser-srOnly",
                  "subtitle1": "PodBrowser-subtitle1",
                  "subtitle2": "PodBrowser-subtitle2",
                }
              }
              data-testid="agent-web-id"
            >
              <p
                className="PodBrowser-root PodBrowser-detailText PodBrowser-body1"
                data-testid="agent-web-id"
              >
                name
              </p>
            </ForwardRef(Typography)>
          </WithStyles(ForwardRef(Typography))>
          <Form
            onSubmit={[Function]}
          >
            <form
              className="PodBrowser-form"
              onSubmit={[Function]}
            >
              <PermissionsForm
                acl={
                  Object {
                    "append": false,
                    "control": false,
                    "read": false,
                    "write": false,
                  }
                }
                disabled={null}
                onChange={[Function]}
                webId={null}
              >
                <div
                  className="PodBrowser-container"
                >
                  <WithStyles(ForwardRef(Button))
                    className="PodBrowser-summary"
                    data-testid="permissions-dropdown-button"
                    endIcon={<Memo(KeyboardArrowDownIcon) />}
                    onClick={[Function]}
                  >
                    <ForwardRef(Button)
                      className="PodBrowser-summary"
                      classes={
                        Object {
                          "colorInherit": "PodBrowser-colorInherit",
                          "contained": "PodBrowser-contained",
                          "containedPrimary": "PodBrowser-containedPrimary",
                          "containedSecondary": "PodBrowser-containedSecondary",
                          "containedSizeLarge": "PodBrowser-containedSizeLarge",
                          "containedSizeSmall": "PodBrowser-containedSizeSmall",
                          "disableElevation": "PodBrowser-disableElevation",
                          "disabled": "PodBrowser-disabled",
                          "endIcon": "PodBrowser-endIcon",
                          "focusVisible": "PodBrowser-focusVisible",
                          "fullWidth": "PodBrowser-fullWidth",
                          "iconSizeLarge": "PodBrowser-iconSizeLarge",
                          "iconSizeMedium": "PodBrowser-iconSizeMedium",
                          "iconSizeSmall": "PodBrowser-iconSizeSmall",
                          "label": "PodBrowser-label",
                          "outlined": "PodBrowser-outlined",
                          "outlinedPrimary": "PodBrowser-outlinedPrimary",
                          "outlinedSecondary": "PodBrowser-outlinedSecondary",
                          "outlinedSizeLarge": "PodBrowser-outlinedSizeLarge",
                          "outlinedSizeSmall": "PodBrowser-outlinedSizeSmall",
                          "root": "PodBrowser-root",
                          "sizeLarge": "PodBrowser-sizeLarge",
                          "sizeSmall": "PodBrowser-sizeSmall",
                          "startIcon": "PodBrowser-startIcon",
                          "text": "PodBrowser-text",
                          "textPrimary": "PodBrowser-textPrimary",
                          "textSecondary": "PodBrowser-textSecondary",
                          "textSizeLarge": "PodBrowser-textSizeLarge",
                          "textSizeSmall": "PodBrowser-textSizeSmall",
                        }
                      }
                      data-testid="permissions-dropdown-button"
                      endIcon={<Memo(KeyboardArrowDownIcon) />}
                      onClick={[Function]}
                    >
                      <WithStyles(ForwardRef(ButtonBase))
                        className="PodBrowser-root PodBrowser-text PodBrowser-summary"
                        component="button"
                        data-testid="permissions-dropdown-button"
                        disabled={false}
                        focusRipple={true}
                        focusVisibleClassName="PodBrowser-focusVisible"
                        onClick={[Function]}
                        type="button"
                      >
                        <ForwardRef(ButtonBase)
                          className="PodBrowser-root PodBrowser-text PodBrowser-summary"
                          classes={
                            Object {
                              "disabled": "PodBrowser-disabled",
                              "focusVisible": "PodBrowser-focusVisible",
                              "root": "PodBrowser-root",
                            }
                          }
                          component="button"
                          data-testid="permissions-dropdown-button"
                          disabled={false}
                          focusRipple={true}
                          focusVisibleClassName="PodBrowser-focusVisible"
                          onClick={[Function]}
                          type="button"
                        >
                          <button
                            className="PodBrowser-root PodBrowser-root PodBrowser-text PodBrowser-summary"
                            data-testid="permissions-dropdown-button"
                            disabled={false}
                            onBlur={[Function]}
                            onClick={[Function]}
                            onDragLeave={[Function]}
                            onFocus={[Function]}
                            onKeyDown={[Function]}
                            onKeyUp={[Function]}
                            onMouseDown={[Function]}
                            onMouseLeave={[Function]}
                            onMouseUp={[Function]}
                            onTouchEnd={[Function]}
                            onTouchMove={[Function]}
                            onTouchStart={[Function]}
                            tabIndex={0}
                            type="button"
                          >
                            <span
                              className="PodBrowser-label"
                            >
                              <span />
                              <span
                                className="PodBrowser-endIcon PodBrowser-iconSizeMedium"
                              >
                                <KeyboardArrowDownIcon>
                                  <WithStyles(ForwardRef(SvgIcon))>
                                    <ForwardRef(SvgIcon)
                                      classes={
                                        Object {
                                          "colorAction": "PodBrowser-colorAction",
                                          "colorDisabled": "PodBrowser-colorDisabled",
                                          "colorError": "PodBrowser-colorError",
                                          "colorPrimary": "PodBrowser-colorPrimary",
                                          "colorSecondary": "PodBrowser-colorSecondary",
                                          "fontSizeInherit": "PodBrowser-fontSizeInherit",
                                          "fontSizeLarge": "PodBrowser-fontSizeLarge",
                                          "fontSizeSmall": "PodBrowser-fontSizeSmall",
                                          "root": "PodBrowser-root",
                                        }
                                      }
                                    >
                                      <svg
                                        aria-hidden={true}
                                        className="PodBrowser-root"
                                        focusable="false"
                                        viewBox="0 0 24 24"
                                      >
                                        <path
                                          d="M7.41 8.59L12 13.17l4.59-4.58L18 10l-6 6-6-6 1.41-1.41z"
                                        />
                                      </svg>
                                    </ForwardRef(SvgIcon)>
                                  </WithStyles(ForwardRef(SvgIcon))>
                                </KeyboardArrowDownIcon>
                              </span>
                            </span>
                            <WithStyles(memo)
                              center={false}
                            >
                              <ForwardRef(TouchRipple)
                                center={false}
                                classes={
                                  Object {
                                    "child": "PodBrowser-child",
                                    "childLeaving": "PodBrowser-childLeaving",
                                    "childPulsate": "PodBrowser-childPulsate",
                                    "ripple": "PodBrowser-ripple",
                                    "ripplePulsate": "PodBrowser-ripplePulsate",
                                    "rippleVisible": "PodBrowser-rippleVisible",
                                    "root": "PodBrowser-root",
                                  }
                                }
                              >
                                <span
                                  className="PodBrowser-root"
                                >
                                  <TransitionGroup
                                    childFactory={[Function]}
                                    component={null}
                                    exit={true}
                                  />
                                </span>
                              </ForwardRef(TouchRipple)>
                            </WithStyles(memo)>
                          </button>
                        </ForwardRef(ButtonBase)>
                      </WithStyles(ForwardRef(ButtonBase))>
                    </ForwardRef(Button)>
                  </WithStyles(ForwardRef(Button))>
                  <section
                    className="PodBrowser-selectionClosed"
                  >
                    <WithStyles(ForwardRef(List))>
                      <ForwardRef(List)
                        classes={
                          Object {
                            "dense": "PodBrowser-dense",
                            "padding": "PodBrowser-padding",
                            "root": "PodBrowser-root",
                            "subheader": "PodBrowser-subheader",
                          }
                        }
                      >
                        <ul
                          className="PodBrowser-root PodBrowser-padding"
                        >
                          <PermissionCheckbox
                            classes={
                              Object {
                                "checkbox": "PodBrowser-checkbox",
                                "container": "PodBrowser-container",
                                "label": "PodBrowser-label",
                                "listItem": "PodBrowser-listItem",
                                "selectionClosed": "PodBrowser-selectionClosed",
                                "selectionOpen": "PodBrowser-selectionOpen",
                                "summary": "PodBrowser-summary",
                              }
                            }
                            disabled={false}
                            label="View"
                            onChange={[Function]}
                            value={false}
                          >
                            <WithStyles(ForwardRef(ListItem))
                              className="PodBrowser-listItem"
                            >
                              <ForwardRef(ListItem)
                                className="PodBrowser-listItem"
                                classes={
                                  Object {
                                    "alignItemsFlexStart": "PodBrowser-alignItemsFlexStart",
                                    "button": "PodBrowser-button",
                                    "container": "PodBrowser-container",
                                    "dense": "PodBrowser-dense",
                                    "disabled": "PodBrowser-disabled",
                                    "divider": "PodBrowser-divider",
                                    "focusVisible": "PodBrowser-focusVisible",
                                    "gutters": "PodBrowser-gutters",
                                    "root": "PodBrowser-root",
                                    "secondaryAction": "PodBrowser-secondaryAction",
                                    "selected": "PodBrowser-selected",
                                  }
                                }
                              >
                                <li
                                  className="PodBrowser-root PodBrowser-listItem PodBrowser-gutters"
                                  disabled={false}
                                >
                                  <WithStyles(ForwardRef(FormControlLabel))
                                    classes={
                                      Object {
                                        "label": "PodBrowser-label",
                                      }
                                    }
                                    control={
                                      <WithStyles(ForwardRef(Checkbox))
                                        checked={false}
                                        classes={
                                          Object {
                                            "root": "PodBrowser-checkbox",
                                          }
                                        }
                                        disabled={false}
                                        name="view"
                                        onChange={[Function]}
                                      />
                                    }
                                    key=".0"
                                    label="View"
                                  >
                                    <ForwardRef(FormControlLabel)
                                      classes={
                                        Object {
                                          "disabled": "PodBrowser-disabled",
                                          "label": "PodBrowser-label PodBrowser-label",
                                          "labelPlacementBottom": "PodBrowser-labelPlacementBottom",
                                          "labelPlacementStart": "PodBrowser-labelPlacementStart",
                                          "labelPlacementTop": "PodBrowser-labelPlacementTop",
                                          "root": "PodBrowser-root",
                                        }
                                      }
                                      control={
                                        <WithStyles(ForwardRef(Checkbox))
                                          checked={false}
                                          classes={
                                            Object {
                                              "root": "PodBrowser-checkbox",
                                            }
                                          }
                                          disabled={false}
                                          name="view"
                                          onChange={[Function]}
                                        />
                                      }
                                      label="View"
                                    >
                                      <label
                                        className="PodBrowser-root"
                                      >
                                        <WithStyles(ForwardRef(Checkbox))
                                          checked={false}
                                          classes={
                                            Object {
                                              "root": "PodBrowser-checkbox",
                                            }
                                          }
                                          disabled={false}
                                          name="view"
                                          onChange={[Function]}
                                        >
                                          <ForwardRef(Checkbox)
                                            checked={false}
                                            classes={
                                              Object {
                                                "checked": "PodBrowser-checked",
                                                "colorPrimary": "PodBrowser-colorPrimary",
                                                "colorSecondary": "PodBrowser-colorSecondary",
                                                "disabled": "PodBrowser-disabled",
                                                "indeterminate": "PodBrowser-indeterminate",
                                                "root": "PodBrowser-root PodBrowser-checkbox",
                                              }
                                            }
                                            disabled={false}
                                            name="view"
                                            onChange={[Function]}
                                          >
                                            <WithStyles(ForwardRef(SwitchBase))
                                              checked={false}
                                              checkedIcon={<Memo />}
                                              classes={
                                                Object {
                                                  "checked": "PodBrowser-checked",
                                                  "disabled": "PodBrowser-disabled",
                                                  "root": "PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary",
                                                }
                                              }
                                              color="secondary"
                                              disabled={false}
                                              icon={<Memo />}
                                              inputProps={
                                                Object {
                                                  "data-indeterminate": false,
                                                }
                                              }
                                              name="view"
                                              onChange={[Function]}
                                              type="checkbox"
                                            >
                                              <ForwardRef(SwitchBase)
                                                checked={false}
                                                checkedIcon={<Memo />}
                                                classes={
                                                  Object {
                                                    "checked": "PodBrowser-checked PodBrowser-checked",
                                                    "disabled": "PodBrowser-disabled PodBrowser-disabled",
                                                    "input": "PodBrowser-input",
                                                    "root": "PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary",
                                                  }
                                                }
                                                color="secondary"
                                                disabled={false}
                                                icon={<Memo />}
                                                inputProps={
                                                  Object {
                                                    "data-indeterminate": false,
                                                  }
                                                }
                                                name="view"
                                                onChange={[Function]}
                                                type="checkbox"
                                              >
                                                <WithStyles(ForwardRef(IconButton))
                                                  className="PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary"
                                                  color="secondary"
                                                  component="span"
                                                  disabled={false}
                                                  onBlur={[Function]}
                                                  onFocus={[Function]}
                                                  tabIndex={null}
                                                >
                                                  <ForwardRef(IconButton)
                                                    className="PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary"
                                                    classes={
                                                      Object {
                                                        "colorInherit": "PodBrowser-colorInherit",
                                                        "colorPrimary": "PodBrowser-colorPrimary",
                                                        "colorSecondary": "PodBrowser-colorSecondary",
                                                        "disabled": "PodBrowser-disabled",
                                                        "edgeEnd": "PodBrowser-edgeEnd",
                                                        "edgeStart": "PodBrowser-edgeStart",
                                                        "label": "PodBrowser-label",
                                                        "root": "PodBrowser-root",
                                                        "sizeSmall": "PodBrowser-sizeSmall",
                                                      }
                                                    }
                                                    color="secondary"
                                                    component="span"
                                                    disabled={false}
                                                    onBlur={[Function]}
                                                    onFocus={[Function]}
                                                    tabIndex={null}
                                                  >
                                                    <WithStyles(ForwardRef(ButtonBase))
                                                      centerRipple={true}
                                                      className="PodBrowser-root PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary PodBrowser-colorSecondary"
                                                      component="span"
                                                      disabled={false}
                                                      focusRipple={true}
                                                      onBlur={[Function]}
                                                      onFocus={[Function]}
                                                      tabIndex={null}
                                                    >
                                                      <ForwardRef(ButtonBase)
                                                        centerRipple={true}
                                                        className="PodBrowser-root PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary PodBrowser-colorSecondary"
                                                        classes={
                                                          Object {
                                                            "disabled": "PodBrowser-disabled",
                                                            "focusVisible": "PodBrowser-focusVisible",
                                                            "root": "PodBrowser-root",
                                                          }
                                                        }
                                                        component="span"
                                                        disabled={false}
                                                        focusRipple={true}
                                                        onBlur={[Function]}
                                                        onFocus={[Function]}
                                                        tabIndex={null}
                                                      >
                                                        <span
                                                          aria-disabled={false}
                                                          className="PodBrowser-root PodBrowser-root PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary PodBrowser-colorSecondary"
                                                          onBlur={[Function]}
                                                          onDragLeave={[Function]}
                                                          onFocus={[Function]}
                                                          onKeyDown={[Function]}
                                                          onKeyUp={[Function]}
                                                          onMouseDown={[Function]}
                                                          onMouseLeave={[Function]}
                                                          onMouseUp={[Function]}
                                                          onTouchEnd={[Function]}
                                                          onTouchMove={[Function]}
                                                          onTouchStart={[Function]}
                                                          tabIndex={null}
                                                        >
                                                          <span
                                                            className="PodBrowser-label"
                                                          >
                                                            <input
                                                              checked={false}
                                                              className="PodBrowser-input"
                                                              data-indeterminate={false}
                                                              disabled={false}
                                                              name="view"
                                                              onChange={[Function]}
                                                              type="checkbox"
                                                            />
                                                            <ForwardRef(CheckBoxOutlineBlankIcon)>
                                                              <WithStyles(ForwardRef(SvgIcon))>
                                                                <ForwardRef(SvgIcon)
                                                                  classes={
                                                                    Object {
                                                                      "colorAction": "PodBrowser-colorAction",
                                                                      "colorDisabled": "PodBrowser-colorDisabled",
                                                                      "colorError": "PodBrowser-colorError",
                                                                      "colorPrimary": "PodBrowser-colorPrimary",
                                                                      "colorSecondary": "PodBrowser-colorSecondary",
                                                                      "fontSizeInherit": "PodBrowser-fontSizeInherit",
                                                                      "fontSizeLarge": "PodBrowser-fontSizeLarge",
                                                                      "fontSizeSmall": "PodBrowser-fontSizeSmall",
                                                                      "root": "PodBrowser-root",
                                                                    }
                                                                  }
                                                                >
                                                                  <svg
                                                                    aria-hidden={true}
                                                                    className="PodBrowser-root"
                                                                    focusable="false"
                                                                    viewBox="0 0 24 24"
                                                                  >
                                                                    <path
                                                                      d="M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z"
                                                                    />
                                                                  </svg>
                                                                </ForwardRef(SvgIcon)>
                                                              </WithStyles(ForwardRef(SvgIcon))>
                                                            </ForwardRef(CheckBoxOutlineBlankIcon)>
                                                          </span>
                                                          <WithStyles(memo)
                                                            center={true}
                                                          >
                                                            <ForwardRef(TouchRipple)
                                                              center={true}
                                                              classes={
                                                                Object {
                                                                  "child": "PodBrowser-child",
                                                                  "childLeaving": "PodBrowser-childLeaving",
                                                                  "childPulsate": "PodBrowser-childPulsate",
                                                                  "ripple": "PodBrowser-ripple",
                                                                  "ripplePulsate": "PodBrowser-ripplePulsate",
                                                                  "rippleVisible": "PodBrowser-rippleVisible",
                                                                  "root": "PodBrowser-root",
                                                                }
                                                              }
                                                            >
                                                              <span
                                                                className="PodBrowser-root"
                                                              >
                                                                <TransitionGroup
                                                                  childFactory={[Function]}
                                                                  component={null}
                                                                  exit={true}
                                                                />
                                                              </span>
                                                            </ForwardRef(TouchRipple)>
                                                          </WithStyles(memo)>
                                                        </span>
                                                      </ForwardRef(ButtonBase)>
                                                    </WithStyles(ForwardRef(ButtonBase))>
                                                  </ForwardRef(IconButton)>
                                                </WithStyles(ForwardRef(IconButton))>
                                              </ForwardRef(SwitchBase)>
                                            </WithStyles(ForwardRef(SwitchBase))>
                                          </ForwardRef(Checkbox)>
                                        </WithStyles(ForwardRef(Checkbox))>
                                        <WithStyles(ForwardRef(Typography))
                                          className="PodBrowser-label PodBrowser-label"
                                          component="span"
                                        >
                                          <ForwardRef(Typography)
                                            className="PodBrowser-label PodBrowser-label"
                                            classes={
                                              Object {
                                                "alignCenter": "PodBrowser-alignCenter",
                                                "alignJustify": "PodBrowser-alignJustify",
                                                "alignLeft": "PodBrowser-alignLeft",
                                                "alignRight": "PodBrowser-alignRight",
                                                "body1": "PodBrowser-body1",
                                                "body2": "PodBrowser-body2",
                                                "button": "PodBrowser-button",
                                                "caption": "PodBrowser-caption",
                                                "colorError": "PodBrowser-colorError",
                                                "colorInherit": "PodBrowser-colorInherit",
                                                "colorPrimary": "PodBrowser-colorPrimary",
                                                "colorSecondary": "PodBrowser-colorSecondary",
                                                "colorTextPrimary": "PodBrowser-colorTextPrimary",
                                                "colorTextSecondary": "PodBrowser-colorTextSecondary",
                                                "displayBlock": "PodBrowser-displayBlock",
                                                "displayInline": "PodBrowser-displayInline",
                                                "gutterBottom": "PodBrowser-gutterBottom",
                                                "h1": "PodBrowser-h1",
                                                "h2": "PodBrowser-h2",
                                                "h3": "PodBrowser-h3",
                                                "h4": "PodBrowser-h4",
                                                "h5": "PodBrowser-h5",
                                                "h6": "PodBrowser-h6",
                                                "noWrap": "PodBrowser-noWrap",
                                                "overline": "PodBrowser-overline",
                                                "paragraph": "PodBrowser-paragraph",
                                                "root": "PodBrowser-root",
                                                "srOnly": "PodBrowser-srOnly",
                                                "subtitle1": "PodBrowser-subtitle1",
                                                "subtitle2": "PodBrowser-subtitle2",
                                              }
                                            }
                                            component="span"
                                          >
                                            <span
                                              className="PodBrowser-root PodBrowser-label PodBrowser-label PodBrowser-body1"
                                            >
                                              View
                                            </span>
                                          </ForwardRef(Typography)>
                                        </WithStyles(ForwardRef(Typography))>
                                      </label>
                                    </ForwardRef(FormControlLabel)>
                                  </WithStyles(ForwardRef(FormControlLabel))>
                                </li>
                              </ForwardRef(ListItem)>
                            </WithStyles(ForwardRef(ListItem))>
                          </PermissionCheckbox>
                          <PermissionCheckbox
                            classes={
                              Object {
                                "checkbox": "PodBrowser-checkbox",
                                "container": "PodBrowser-container",
                                "label": "PodBrowser-label",
                                "listItem": "PodBrowser-listItem",
                                "selectionClosed": "PodBrowser-selectionClosed",
                                "selectionOpen": "PodBrowser-selectionOpen",
                                "summary": "PodBrowser-summary",
                              }
                            }
                            disabled={false}
                            label="Edit"
                            onChange={[Function]}
                            value={false}
                          >
                            <WithStyles(ForwardRef(ListItem))
                              className="PodBrowser-listItem"
                            >
                              <ForwardRef(ListItem)
                                className="PodBrowser-listItem"
                                classes={
                                  Object {
                                    "alignItemsFlexStart": "PodBrowser-alignItemsFlexStart",
                                    "button": "PodBrowser-button",
                                    "container": "PodBrowser-container",
                                    "dense": "PodBrowser-dense",
                                    "disabled": "PodBrowser-disabled",
                                    "divider": "PodBrowser-divider",
                                    "focusVisible": "PodBrowser-focusVisible",
                                    "gutters": "PodBrowser-gutters",
                                    "root": "PodBrowser-root",
                                    "secondaryAction": "PodBrowser-secondaryAction",
                                    "selected": "PodBrowser-selected",
                                  }
                                }
                              >
                                <li
                                  className="PodBrowser-root PodBrowser-listItem PodBrowser-gutters"
                                  disabled={false}
                                >
                                  <WithStyles(ForwardRef(FormControlLabel))
                                    classes={
                                      Object {
                                        "label": "PodBrowser-label",
                                      }
                                    }
                                    control={
                                      <WithStyles(ForwardRef(Checkbox))
                                        checked={false}
                                        classes={
                                          Object {
                                            "root": "PodBrowser-checkbox",
                                          }
                                        }
                                        disabled={false}
                                        name="edit"
                                        onChange={[Function]}
                                      />
                                    }
                                    key=".0"
                                    label="Edit"
                                  >
                                    <ForwardRef(FormControlLabel)
                                      classes={
                                        Object {
                                          "disabled": "PodBrowser-disabled",
                                          "label": "PodBrowser-label PodBrowser-label",
                                          "labelPlacementBottom": "PodBrowser-labelPlacementBottom",
                                          "labelPlacementStart": "PodBrowser-labelPlacementStart",
                                          "labelPlacementTop": "PodBrowser-labelPlacementTop",
                                          "root": "PodBrowser-root",
                                        }
                                      }
                                      control={
                                        <WithStyles(ForwardRef(Checkbox))
                                          checked={false}
                                          classes={
                                            Object {
                                              "root": "PodBrowser-checkbox",
                                            }
                                          }
                                          disabled={false}
                                          name="edit"
                                          onChange={[Function]}
                                        />
                                      }
                                      label="Edit"
                                    >
                                      <label
                                        className="PodBrowser-root"
                                      >
                                        <WithStyles(ForwardRef(Checkbox))
                                          checked={false}
                                          classes={
                                            Object {
                                              "root": "PodBrowser-checkbox",
                                            }
                                          }
                                          disabled={false}
                                          name="edit"
                                          onChange={[Function]}
                                        >
                                          <ForwardRef(Checkbox)
                                            checked={false}
                                            classes={
                                              Object {
                                                "checked": "PodBrowser-checked",
                                                "colorPrimary": "PodBrowser-colorPrimary",
                                                "colorSecondary": "PodBrowser-colorSecondary",
                                                "disabled": "PodBrowser-disabled",
                                                "indeterminate": "PodBrowser-indeterminate",
                                                "root": "PodBrowser-root PodBrowser-checkbox",
                                              }
                                            }
                                            disabled={false}
                                            name="edit"
                                            onChange={[Function]}
                                          >
                                            <WithStyles(ForwardRef(SwitchBase))
                                              checked={false}
                                              checkedIcon={<Memo />}
                                              classes={
                                                Object {
                                                  "checked": "PodBrowser-checked",
                                                  "disabled": "PodBrowser-disabled",
                                                  "root": "PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary",
                                                }
                                              }
                                              color="secondary"
                                              disabled={false}
                                              icon={<Memo />}
                                              inputProps={
                                                Object {
                                                  "data-indeterminate": false,
                                                }
                                              }
                                              name="edit"
                                              onChange={[Function]}
                                              type="checkbox"
                                            >
                                              <ForwardRef(SwitchBase)
                                                checked={false}
                                                checkedIcon={<Memo />}
                                                classes={
                                                  Object {
                                                    "checked": "PodBrowser-checked PodBrowser-checked",
                                                    "disabled": "PodBrowser-disabled PodBrowser-disabled",
                                                    "input": "PodBrowser-input",
                                                    "root": "PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary",
                                                  }
                                                }
                                                color="secondary"
                                                disabled={false}
                                                icon={<Memo />}
                                                inputProps={
                                                  Object {
                                                    "data-indeterminate": false,
                                                  }
                                                }
                                                name="edit"
                                                onChange={[Function]}
                                                type="checkbox"
                                              >
                                                <WithStyles(ForwardRef(IconButton))
                                                  className="PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary"
                                                  color="secondary"
                                                  component="span"
                                                  disabled={false}
                                                  onBlur={[Function]}
                                                  onFocus={[Function]}
                                                  tabIndex={null}
                                                >
                                                  <ForwardRef(IconButton)
                                                    className="PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary"
                                                    classes={
                                                      Object {
                                                        "colorInherit": "PodBrowser-colorInherit",
                                                        "colorPrimary": "PodBrowser-colorPrimary",
                                                        "colorSecondary": "PodBrowser-colorSecondary",
                                                        "disabled": "PodBrowser-disabled",
                                                        "edgeEnd": "PodBrowser-edgeEnd",
                                                        "edgeStart": "PodBrowser-edgeStart",
                                                        "label": "PodBrowser-label",
                                                        "root": "PodBrowser-root",
                                                        "sizeSmall": "PodBrowser-sizeSmall",
                                                      }
                                                    }
                                                    color="secondary"
                                                    component="span"
                                                    disabled={false}
                                                    onBlur={[Function]}
                                                    onFocus={[Function]}
                                                    tabIndex={null}
                                                  >
                                                    <WithStyles(ForwardRef(ButtonBase))
                                                      centerRipple={true}
                                                      className="PodBrowser-root PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary PodBrowser-colorSecondary"
                                                      component="span"
                                                      disabled={false}
                                                      focusRipple={true}
                                                      onBlur={[Function]}
                                                      onFocus={[Function]}
                                                      tabIndex={null}
                                                    >
                                                      <ForwardRef(ButtonBase)
                                                        centerRipple={true}
                                                        className="PodBrowser-root PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary PodBrowser-colorSecondary"
                                                        classes={
                                                          Object {
                                                            "disabled": "PodBrowser-disabled",
                                                            "focusVisible": "PodBrowser-focusVisible",
                                                            "root": "PodBrowser-root",
                                                          }
                                                        }
                                                        component="span"
                                                        disabled={false}
                                                        focusRipple={true}
                                                        onBlur={[Function]}
                                                        onFocus={[Function]}
                                                        tabIndex={null}
                                                      >
                                                        <span
                                                          aria-disabled={false}
                                                          className="PodBrowser-root PodBrowser-root PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary PodBrowser-colorSecondary"
                                                          onBlur={[Function]}
                                                          onDragLeave={[Function]}
                                                          onFocus={[Function]}
                                                          onKeyDown={[Function]}
                                                          onKeyUp={[Function]}
                                                          onMouseDown={[Function]}
                                                          onMouseLeave={[Function]}
                                                          onMouseUp={[Function]}
                                                          onTouchEnd={[Function]}
                                                          onTouchMove={[Function]}
                                                          onTouchStart={[Function]}
                                                          tabIndex={null}
                                                        >
                                                          <span
                                                            className="PodBrowser-label"
                                                          >
                                                            <input
                                                              checked={false}
                                                              className="PodBrowser-input"
                                                              data-indeterminate={false}
                                                              disabled={false}
                                                              name="edit"
                                                              onChange={[Function]}
                                                              type="checkbox"
                                                            />
                                                            <ForwardRef(CheckBoxOutlineBlankIcon)>
                                                              <WithStyles(ForwardRef(SvgIcon))>
                                                                <ForwardRef(SvgIcon)
                                                                  classes={
                                                                    Object {
                                                                      "colorAction": "PodBrowser-colorAction",
                                                                      "colorDisabled": "PodBrowser-colorDisabled",
                                                                      "colorError": "PodBrowser-colorError",
                                                                      "colorPrimary": "PodBrowser-colorPrimary",
                                                                      "colorSecondary": "PodBrowser-colorSecondary",
                                                                      "fontSizeInherit": "PodBrowser-fontSizeInherit",
                                                                      "fontSizeLarge": "PodBrowser-fontSizeLarge",
                                                                      "fontSizeSmall": "PodBrowser-fontSizeSmall",
                                                                      "root": "PodBrowser-root",
                                                                    }
                                                                  }
                                                                >
                                                                  <svg
                                                                    aria-hidden={true}
                                                                    className="PodBrowser-root"
                                                                    focusable="false"
                                                                    viewBox="0 0 24 24"
                                                                  >
                                                                    <path
                                                                      d="M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z"
                                                                    />
                                                                  </svg>
                                                                </ForwardRef(SvgIcon)>
                                                              </WithStyles(ForwardRef(SvgIcon))>
                                                            </ForwardRef(CheckBoxOutlineBlankIcon)>
                                                          </span>
                                                          <WithStyles(memo)
                                                            center={true}
                                                          >
                                                            <ForwardRef(TouchRipple)
                                                              center={true}
                                                              classes={
                                                                Object {
                                                                  "child": "PodBrowser-child",
                                                                  "childLeaving": "PodBrowser-childLeaving",
                                                                  "childPulsate": "PodBrowser-childPulsate",
                                                                  "ripple": "PodBrowser-ripple",
                                                                  "ripplePulsate": "PodBrowser-ripplePulsate",
                                                                  "rippleVisible": "PodBrowser-rippleVisible",
                                                                  "root": "PodBrowser-root",
                                                                }
                                                              }
                                                            >
                                                              <span
                                                                className="PodBrowser-root"
                                                              >
                                                                <TransitionGroup
                                                                  childFactory={[Function]}
                                                                  component={null}
                                                                  exit={true}
                                                                />
                                                              </span>
                                                            </ForwardRef(TouchRipple)>
                                                          </WithStyles(memo)>
                                                        </span>
                                                      </ForwardRef(ButtonBase)>
                                                    </WithStyles(ForwardRef(ButtonBase))>
                                                  </ForwardRef(IconButton)>
                                                </WithStyles(ForwardRef(IconButton))>
                                              </ForwardRef(SwitchBase)>
                                            </WithStyles(ForwardRef(SwitchBase))>
                                          </ForwardRef(Checkbox)>
                                        </WithStyles(ForwardRef(Checkbox))>
                                        <WithStyles(ForwardRef(Typography))
                                          className="PodBrowser-label PodBrowser-label"
                                          component="span"
                                        >
                                          <ForwardRef(Typography)
                                            className="PodBrowser-label PodBrowser-label"
                                            classes={
                                              Object {
                                                "alignCenter": "PodBrowser-alignCenter",
                                                "alignJustify": "PodBrowser-alignJustify",
                                                "alignLeft": "PodBrowser-alignLeft",
                                                "alignRight": "PodBrowser-alignRight",
                                                "body1": "PodBrowser-body1",
                                                "body2": "PodBrowser-body2",
                                                "button": "PodBrowser-button",
                                                "caption": "PodBrowser-caption",
                                                "colorError": "PodBrowser-colorError",
                                                "colorInherit": "PodBrowser-colorInherit",
                                                "colorPrimary": "PodBrowser-colorPrimary",
                                                "colorSecondary": "PodBrowser-colorSecondary",
                                                "colorTextPrimary": "PodBrowser-colorTextPrimary",
                                                "colorTextSecondary": "PodBrowser-colorTextSecondary",
                                                "displayBlock": "PodBrowser-displayBlock",
                                                "displayInline": "PodBrowser-displayInline",
                                                "gutterBottom": "PodBrowser-gutterBottom",
                                                "h1": "PodBrowser-h1",
                                                "h2": "PodBrowser-h2",
                                                "h3": "PodBrowser-h3",
                                                "h4": "PodBrowser-h4",
                                                "h5": "PodBrowser-h5",
                                                "h6": "PodBrowser-h6",
                                                "noWrap": "PodBrowser-noWrap",
                                                "overline": "PodBrowser-overline",
                                                "paragraph": "PodBrowser-paragraph",
                                                "root": "PodBrowser-root",
                                                "srOnly": "PodBrowser-srOnly",
                                                "subtitle1": "PodBrowser-subtitle1",
                                                "subtitle2": "PodBrowser-subtitle2",
                                              }
                                            }
                                            component="span"
                                          >
                                            <span
                                              className="PodBrowser-root PodBrowser-label PodBrowser-label PodBrowser-body1"
                                            >
                                              Edit
                                            </span>
                                          </ForwardRef(Typography)>
                                        </WithStyles(ForwardRef(Typography))>
                                      </label>
                                    </ForwardRef(FormControlLabel)>
                                  </WithStyles(ForwardRef(FormControlLabel))>
                                </li>
                              </ForwardRef(ListItem)>
                            </WithStyles(ForwardRef(ListItem))>
                          </PermissionCheckbox>
                          <PermissionCheckbox
                            classes={
                              Object {
                                "checkbox": "PodBrowser-checkbox",
                                "container": "PodBrowser-container",
                                "label": "PodBrowser-label",
                                "listItem": "PodBrowser-listItem",
                                "selectionClosed": "PodBrowser-selectionClosed",
                                "selectionOpen": "PodBrowser-selectionOpen",
                                "summary": "PodBrowser-summary",
                              }
                            }
                            disabled={false}
                            label="Append"
                            onChange={[Function]}
                            value={false}
                          >
                            <WithStyles(ForwardRef(ListItem))
                              className="PodBrowser-listItem"
                            >
                              <ForwardRef(ListItem)
                                className="PodBrowser-listItem"
                                classes={
                                  Object {
                                    "alignItemsFlexStart": "PodBrowser-alignItemsFlexStart",
                                    "button": "PodBrowser-button",
                                    "container": "PodBrowser-container",
                                    "dense": "PodBrowser-dense",
                                    "disabled": "PodBrowser-disabled",
                                    "divider": "PodBrowser-divider",
                                    "focusVisible": "PodBrowser-focusVisible",
                                    "gutters": "PodBrowser-gutters",
                                    "root": "PodBrowser-root",
                                    "secondaryAction": "PodBrowser-secondaryAction",
                                    "selected": "PodBrowser-selected",
                                  }
                                }
                              >
                                <li
                                  className="PodBrowser-root PodBrowser-listItem PodBrowser-gutters"
                                  disabled={false}
                                >
                                  <WithStyles(ForwardRef(FormControlLabel))
                                    classes={
                                      Object {
                                        "label": "PodBrowser-label",
                                      }
                                    }
                                    control={
                                      <WithStyles(ForwardRef(Checkbox))
                                        checked={false}
                                        classes={
                                          Object {
                                            "root": "PodBrowser-checkbox",
                                          }
                                        }
                                        disabled={false}
                                        name="append"
                                        onChange={[Function]}
                                      />
                                    }
                                    key=".0"
                                    label="Append"
                                  >
                                    <ForwardRef(FormControlLabel)
                                      classes={
                                        Object {
                                          "disabled": "PodBrowser-disabled",
                                          "label": "PodBrowser-label PodBrowser-label",
                                          "labelPlacementBottom": "PodBrowser-labelPlacementBottom",
                                          "labelPlacementStart": "PodBrowser-labelPlacementStart",
                                          "labelPlacementTop": "PodBrowser-labelPlacementTop",
                                          "root": "PodBrowser-root",
                                        }
                                      }
                                      control={
                                        <WithStyles(ForwardRef(Checkbox))
                                          checked={false}
                                          classes={
                                            Object {
                                              "root": "PodBrowser-checkbox",
                                            }
                                          }
                                          disabled={false}
                                          name="append"
                                          onChange={[Function]}
                                        />
                                      }
                                      label="Append"
                                    >
                                      <label
                                        className="PodBrowser-root"
                                      >
                                        <WithStyles(ForwardRef(Checkbox))
                                          checked={false}
                                          classes={
                                            Object {
                                              "root": "PodBrowser-checkbox",
                                            }
                                          }
                                          disabled={false}
                                          name="append"
                                          onChange={[Function]}
                                        >
                                          <ForwardRef(Checkbox)
                                            checked={false}
                                            classes={
                                              Object {
                                                "checked": "PodBrowser-checked",
                                                "colorPrimary": "PodBrowser-colorPrimary",
                                                "colorSecondary": "PodBrowser-colorSecondary",
                                                "disabled": "PodBrowser-disabled",
                                                "indeterminate": "PodBrowser-indeterminate",
                                                "root": "PodBrowser-root PodBrowser-checkbox",
                                              }
                                            }
                                            disabled={false}
                                            name="append"
                                            onChange={[Function]}
                                          >
                                            <WithStyles(ForwardRef(SwitchBase))
                                              checked={false}
                                              checkedIcon={<Memo />}
                                              classes={
                                                Object {
                                                  "checked": "PodBrowser-checked",
                                                  "disabled": "PodBrowser-disabled",
                                                  "root": "PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary",
                                                }
                                              }
                                              color="secondary"
                                              disabled={false}
                                              icon={<Memo />}
                                              inputProps={
                                                Object {
                                                  "data-indeterminate": false,
                                                }
                                              }
                                              name="append"
                                              onChange={[Function]}
                                              type="checkbox"
                                            >
                                              <ForwardRef(SwitchBase)
                                                checked={false}
                                                checkedIcon={<Memo />}
                                                classes={
                                                  Object {
                                                    "checked": "PodBrowser-checked PodBrowser-checked",
                                                    "disabled": "PodBrowser-disabled PodBrowser-disabled",
                                                    "input": "PodBrowser-input",
                                                    "root": "PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary",
                                                  }
                                                }
                                                color="secondary"
                                                disabled={false}
                                                icon={<Memo />}
                                                inputProps={
                                                  Object {
                                                    "data-indeterminate": false,
                                                  }
                                                }
                                                name="append"
                                                onChange={[Function]}
                                                type="checkbox"
                                              >
                                                <WithStyles(ForwardRef(IconButton))
                                                  className="PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary"
                                                  color="secondary"
                                                  component="span"
                                                  disabled={false}
                                                  onBlur={[Function]}
                                                  onFocus={[Function]}
                                                  tabIndex={null}
                                                >
                                                  <ForwardRef(IconButton)
                                                    className="PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary"
                                                    classes={
                                                      Object {
                                                        "colorInherit": "PodBrowser-colorInherit",
                                                        "colorPrimary": "PodBrowser-colorPrimary",
                                                        "colorSecondary": "PodBrowser-colorSecondary",
                                                        "disabled": "PodBrowser-disabled",
                                                        "edgeEnd": "PodBrowser-edgeEnd",
                                                        "edgeStart": "PodBrowser-edgeStart",
                                                        "label": "PodBrowser-label",
                                                        "root": "PodBrowser-root",
                                                        "sizeSmall": "PodBrowser-sizeSmall",
                                                      }
                                                    }
                                                    color="secondary"
                                                    component="span"
                                                    disabled={false}
                                                    onBlur={[Function]}
                                                    onFocus={[Function]}
                                                    tabIndex={null}
                                                  >
                                                    <WithStyles(ForwardRef(ButtonBase))
                                                      centerRipple={true}
                                                      className="PodBrowser-root PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary PodBrowser-colorSecondary"
                                                      component="span"
                                                      disabled={false}
                                                      focusRipple={true}
                                                      onBlur={[Function]}
                                                      onFocus={[Function]}
                                                      tabIndex={null}
                                                    >
                                                      <ForwardRef(ButtonBase)
                                                        centerRipple={true}
                                                        className="PodBrowser-root PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary PodBrowser-colorSecondary"
                                                        classes={
                                                          Object {
                                                            "disabled": "PodBrowser-disabled",
                                                            "focusVisible": "PodBrowser-focusVisible",
                                                            "root": "PodBrowser-root",
                                                          }
                                                        }
                                                        component="span"
                                                        disabled={false}
                                                        focusRipple={true}
                                                        onBlur={[Function]}
                                                        onFocus={[Function]}
                                                        tabIndex={null}
                                                      >
                                                        <span
                                                          aria-disabled={false}
                                                          className="PodBrowser-root PodBrowser-root PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary PodBrowser-colorSecondary"
                                                          onBlur={[Function]}
                                                          onDragLeave={[Function]}
                                                          onFocus={[Function]}
                                                          onKeyDown={[Function]}
                                                          onKeyUp={[Function]}
                                                          onMouseDown={[Function]}
                                                          onMouseLeave={[Function]}
                                                          onMouseUp={[Function]}
                                                          onTouchEnd={[Function]}
                                                          onTouchMove={[Function]}
                                                          onTouchStart={[Function]}
                                                          tabIndex={null}
                                                        >
                                                          <span
                                                            className="PodBrowser-label"
                                                          >
                                                            <input
                                                              checked={false}
                                                              className="PodBrowser-input"
                                                              data-indeterminate={false}
                                                              disabled={false}
                                                              name="append"
                                                              onChange={[Function]}
                                                              type="checkbox"
                                                            />
                                                            <ForwardRef(CheckBoxOutlineBlankIcon)>
                                                              <WithStyles(ForwardRef(SvgIcon))>
                                                                <ForwardRef(SvgIcon)
                                                                  classes={
                                                                    Object {
                                                                      "colorAction": "PodBrowser-colorAction",
                                                                      "colorDisabled": "PodBrowser-colorDisabled",
                                                                      "colorError": "PodBrowser-colorError",
                                                                      "colorPrimary": "PodBrowser-colorPrimary",
                                                                      "colorSecondary": "PodBrowser-colorSecondary",
                                                                      "fontSizeInherit": "PodBrowser-fontSizeInherit",
                                                                      "fontSizeLarge": "PodBrowser-fontSizeLarge",
                                                                      "fontSizeSmall": "PodBrowser-fontSizeSmall",
                                                                      "root": "PodBrowser-root",
                                                                    }
                                                                  }
                                                                >
                                                                  <svg
                                                                    aria-hidden={true}
                                                                    className="PodBrowser-root"
                                                                    focusable="false"
                                                                    viewBox="0 0 24 24"
                                                                  >
                                                                    <path
                                                                      d="M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z"
                                                                    />
                                                                  </svg>
                                                                </ForwardRef(SvgIcon)>
                                                              </WithStyles(ForwardRef(SvgIcon))>
                                                            </ForwardRef(CheckBoxOutlineBlankIcon)>
                                                          </span>
                                                          <WithStyles(memo)
                                                            center={true}
                                                          >
                                                            <ForwardRef(TouchRipple)
                                                              center={true}
                                                              classes={
                                                                Object {
                                                                  "child": "PodBrowser-child",
                                                                  "childLeaving": "PodBrowser-childLeaving",
                                                                  "childPulsate": "PodBrowser-childPulsate",
                                                                  "ripple": "PodBrowser-ripple",
                                                                  "ripplePulsate": "PodBrowser-ripplePulsate",
                                                                  "rippleVisible": "PodBrowser-rippleVisible",
                                                                  "root": "PodBrowser-root",
                                                                }
                                                              }
                                                            >
                                                              <span
                                                                className="PodBrowser-root"
                                                              >
                                                                <TransitionGroup
                                                                  childFactory={[Function]}
                                                                  component={null}
                                                                  exit={true}
                                                                />
                                                              </span>
                                                            </ForwardRef(TouchRipple)>
                                                          </WithStyles(memo)>
                                                        </span>
                                                      </ForwardRef(ButtonBase)>
                                                    </WithStyles(ForwardRef(ButtonBase))>
                                                  </ForwardRef(IconButton)>
                                                </WithStyles(ForwardRef(IconButton))>
                                              </ForwardRef(SwitchBase)>
                                            </WithStyles(ForwardRef(SwitchBase))>
                                          </ForwardRef(Checkbox)>
                                        </WithStyles(ForwardRef(Checkbox))>
                                        <WithStyles(ForwardRef(Typography))
                                          className="PodBrowser-label PodBrowser-label"
                                          component="span"
                                        >
                                          <ForwardRef(Typography)
                                            className="PodBrowser-label PodBrowser-label"
                                            classes={
                                              Object {
                                                "alignCenter": "PodBrowser-alignCenter",
                                                "alignJustify": "PodBrowser-alignJustify",
                                                "alignLeft": "PodBrowser-alignLeft",
                                                "alignRight": "PodBrowser-alignRight",
                                                "body1": "PodBrowser-body1",
                                                "body2": "PodBrowser-body2",
                                                "button": "PodBrowser-button",
                                                "caption": "PodBrowser-caption",
                                                "colorError": "PodBrowser-colorError",
                                                "colorInherit": "PodBrowser-colorInherit",
                                                "colorPrimary": "PodBrowser-colorPrimary",
                                                "colorSecondary": "PodBrowser-colorSecondary",
                                                "colorTextPrimary": "PodBrowser-colorTextPrimary",
                                                "colorTextSecondary": "PodBrowser-colorTextSecondary",
                                                "displayBlock": "PodBrowser-displayBlock",
                                                "displayInline": "PodBrowser-displayInline",
                                                "gutterBottom": "PodBrowser-gutterBottom",
                                                "h1": "PodBrowser-h1",
                                                "h2": "PodBrowser-h2",
                                                "h3": "PodBrowser-h3",
                                                "h4": "PodBrowser-h4",
                                                "h5": "PodBrowser-h5",
                                                "h6": "PodBrowser-h6",
                                                "noWrap": "PodBrowser-noWrap",
                                                "overline": "PodBrowser-overline",
                                                "paragraph": "PodBrowser-paragraph",
                                                "root": "PodBrowser-root",
                                                "srOnly": "PodBrowser-srOnly",
                                                "subtitle1": "PodBrowser-subtitle1",
                                                "subtitle2": "PodBrowser-subtitle2",
                                              }
                                            }
                                            component="span"
                                          >
                                            <span
                                              className="PodBrowser-root PodBrowser-label PodBrowser-label PodBrowser-body1"
                                            >
                                              Append
                                            </span>
                                          </ForwardRef(Typography)>
                                        </WithStyles(ForwardRef(Typography))>
                                      </label>
                                    </ForwardRef(FormControlLabel)>
                                  </WithStyles(ForwardRef(FormControlLabel))>
                                </li>
                              </ForwardRef(ListItem)>
                            </WithStyles(ForwardRef(ListItem))>
                          </PermissionCheckbox>
                          <PermissionCheckbox
                            classes={
                              Object {
                                "checkbox": "PodBrowser-checkbox",
                                "container": "PodBrowser-container",
                                "label": "PodBrowser-label",
                                "listItem": "PodBrowser-listItem",
                                "selectionClosed": "PodBrowser-selectionClosed",
                                "selectionOpen": "PodBrowser-selectionOpen",
                                "summary": "PodBrowser-summary",
                              }
                            }
                            disabled={false}
                            label="Control"
                            onChange={[Function]}
                            value={false}
                          >
                            <WithStyles(ForwardRef(ListItem))
                              className="PodBrowser-listItem"
                            >
                              <ForwardRef(ListItem)
                                className="PodBrowser-listItem"
                                classes={
                                  Object {
                                    "alignItemsFlexStart": "PodBrowser-alignItemsFlexStart",
                                    "button": "PodBrowser-button",
                                    "container": "PodBrowser-container",
                                    "dense": "PodBrowser-dense",
                                    "disabled": "PodBrowser-disabled",
                                    "divider": "PodBrowser-divider",
                                    "focusVisible": "PodBrowser-focusVisible",
                                    "gutters": "PodBrowser-gutters",
                                    "root": "PodBrowser-root",
                                    "secondaryAction": "PodBrowser-secondaryAction",
                                    "selected": "PodBrowser-selected",
                                  }
                                }
                              >
                                <li
                                  className="PodBrowser-root PodBrowser-listItem PodBrowser-gutters"
                                  disabled={false}
                                >
                                  <WithStyles(ForwardRef(FormControlLabel))
                                    classes={
                                      Object {
                                        "label": "PodBrowser-label",
                                      }
                                    }
                                    control={
                                      <WithStyles(ForwardRef(Checkbox))
                                        checked={false}
                                        classes={
                                          Object {
                                            "root": "PodBrowser-checkbox",
                                          }
                                        }
                                        disabled={false}
                                        name="control"
                                        onChange={[Function]}
                                      />
                                    }
                                    key=".0"
                                    label="Control"
                                  >
                                    <ForwardRef(FormControlLabel)
                                      classes={
                                        Object {
                                          "disabled": "PodBrowser-disabled",
                                          "label": "PodBrowser-label PodBrowser-label",
                                          "labelPlacementBottom": "PodBrowser-labelPlacementBottom",
                                          "labelPlacementStart": "PodBrowser-labelPlacementStart",
                                          "labelPlacementTop": "PodBrowser-labelPlacementTop",
                                          "root": "PodBrowser-root",
                                        }
                                      }
                                      control={
                                        <WithStyles(ForwardRef(Checkbox))
                                          checked={false}
                                          classes={
                                            Object {
                                              "root": "PodBrowser-checkbox",
                                            }
                                          }
                                          disabled={false}
                                          name="control"
                                          onChange={[Function]}
                                        />
                                      }
                                      label="Control"
                                    >
                                      <label
                                        className="PodBrowser-root"
                                      >
                                        <WithStyles(ForwardRef(Checkbox))
                                          checked={false}
                                          classes={
                                            Object {
                                              "root": "PodBrowser-checkbox",
                                            }
                                          }
                                          disabled={false}
                                          name="control"
                                          onChange={[Function]}
                                        >
                                          <ForwardRef(Checkbox)
                                            checked={false}
                                            classes={
                                              Object {
                                                "checked": "PodBrowser-checked",
                                                "colorPrimary": "PodBrowser-colorPrimary",
                                                "colorSecondary": "PodBrowser-colorSecondary",
                                                "disabled": "PodBrowser-disabled",
                                                "indeterminate": "PodBrowser-indeterminate",
                                                "root": "PodBrowser-root PodBrowser-checkbox",
                                              }
                                            }
                                            disabled={false}
                                            name="control"
                                            onChange={[Function]}
                                          >
                                            <WithStyles(ForwardRef(SwitchBase))
                                              checked={false}
                                              checkedIcon={<Memo />}
                                              classes={
                                                Object {
                                                  "checked": "PodBrowser-checked",
                                                  "disabled": "PodBrowser-disabled",
                                                  "root": "PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary",
                                                }
                                              }
                                              color="secondary"
                                              disabled={false}
                                              icon={<Memo />}
                                              inputProps={
                                                Object {
                                                  "data-indeterminate": false,
                                                }
                                              }
                                              name="control"
                                              onChange={[Function]}
                                              type="checkbox"
                                            >
                                              <ForwardRef(SwitchBase)
                                                checked={false}
                                                checkedIcon={<Memo />}
                                                classes={
                                                  Object {
                                                    "checked": "PodBrowser-checked PodBrowser-checked",
                                                    "disabled": "PodBrowser-disabled PodBrowser-disabled",
                                                    "input": "PodBrowser-input",
                                                    "root": "PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary",
                                                  }
                                                }
                                                color="secondary"
                                                disabled={false}
                                                icon={<Memo />}
                                                inputProps={
                                                  Object {
                                                    "data-indeterminate": false,
                                                  }
                                                }
                                                name="control"
                                                onChange={[Function]}
                                                type="checkbox"
                                              >
                                                <WithStyles(ForwardRef(IconButton))
                                                  className="PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary"
                                                  color="secondary"
                                                  component="span"
                                                  disabled={false}
                                                  onBlur={[Function]}
                                                  onFocus={[Function]}
                                                  tabIndex={null}
                                                >
                                                  <ForwardRef(IconButton)
                                                    className="PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary"
                                                    classes={
                                                      Object {
                                                        "colorInherit": "PodBrowser-colorInherit",
                                                        "colorPrimary": "PodBrowser-colorPrimary",
                                                        "colorSecondary": "PodBrowser-colorSecondary",
                                                        "disabled": "PodBrowser-disabled",
                                                        "edgeEnd": "PodBrowser-edgeEnd",
                                                        "edgeStart": "PodBrowser-edgeStart",
                                                        "label": "PodBrowser-label",
                                                        "root": "PodBrowser-root",
                                                        "sizeSmall": "PodBrowser-sizeSmall",
                                                      }
                                                    }
                                                    color="secondary"
                                                    component="span"
                                                    disabled={false}
                                                    onBlur={[Function]}
                                                    onFocus={[Function]}
                                                    tabIndex={null}
                                                  >
                                                    <WithStyles(ForwardRef(ButtonBase))
                                                      centerRipple={true}
                                                      className="PodBrowser-root PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary PodBrowser-colorSecondary"
                                                      component="span"
                                                      disabled={false}
                                                      focusRipple={true}
                                                      onBlur={[Function]}
                                                      onFocus={[Function]}
                                                      tabIndex={null}
                                                    >
                                                      <ForwardRef(ButtonBase)
                                                        centerRipple={true}
                                                        className="PodBrowser-root PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary PodBrowser-colorSecondary"
                                                        classes={
                                                          Object {
                                                            "disabled": "PodBrowser-disabled",
                                                            "focusVisible": "PodBrowser-focusVisible",
                                                            "root": "PodBrowser-root",
                                                          }
                                                        }
                                                        component="span"
                                                        disabled={false}
                                                        focusRipple={true}
                                                        onBlur={[Function]}
                                                        onFocus={[Function]}
                                                        tabIndex={null}
                                                      >
                                                        <span
                                                          aria-disabled={false}
                                                          className="PodBrowser-root PodBrowser-root PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary PodBrowser-colorSecondary"
                                                          onBlur={[Function]}
                                                          onDragLeave={[Function]}
                                                          onFocus={[Function]}
                                                          onKeyDown={[Function]}
                                                          onKeyUp={[Function]}
                                                          onMouseDown={[Function]}
                                                          onMouseLeave={[Function]}
                                                          onMouseUp={[Function]}
                                                          onTouchEnd={[Function]}
                                                          onTouchMove={[Function]}
                                                          onTouchStart={[Function]}
                                                          tabIndex={null}
                                                        >
                                                          <span
                                                            className="PodBrowser-label"
                                                          >
                                                            <input
                                                              checked={false}
                                                              className="PodBrowser-input"
                                                              data-indeterminate={false}
                                                              disabled={false}
                                                              name="control"
                                                              onChange={[Function]}
                                                              type="checkbox"
                                                            />
                                                            <ForwardRef(CheckBoxOutlineBlankIcon)>
                                                              <WithStyles(ForwardRef(SvgIcon))>
                                                                <ForwardRef(SvgIcon)
                                                                  classes={
                                                                    Object {
                                                                      "colorAction": "PodBrowser-colorAction",
                                                                      "colorDisabled": "PodBrowser-colorDisabled",
                                                                      "colorError": "PodBrowser-colorError",
                                                                      "colorPrimary": "PodBrowser-colorPrimary",
                                                                      "colorSecondary": "PodBrowser-colorSecondary",
                                                                      "fontSizeInherit": "PodBrowser-fontSizeInherit",
                                                                      "fontSizeLarge": "PodBrowser-fontSizeLarge",
                                                                      "fontSizeSmall": "PodBrowser-fontSizeSmall",
                                                                      "root": "PodBrowser-root",
                                                                    }
                                                                  }
                                                                >
                                                                  <svg
                                                                    aria-hidden={true}
                                                                    className="PodBrowser-root"
                                                                    focusable="false"
                                                                    viewBox="0 0 24 24"
                                                                  >
                                                                    <path
                                                                      d="M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z"
                                                                    />
                                                                  </svg>
                                                                </ForwardRef(SvgIcon)>
                                                              </WithStyles(ForwardRef(SvgIcon))>
                                                            </ForwardRef(CheckBoxOutlineBlankIcon)>
                                                          </span>
                                                          <WithStyles(memo)
                                                            center={true}
                                                          >
                                                            <ForwardRef(TouchRipple)
                                                              center={true}
                                                              classes={
                                                                Object {
                                                                  "child": "PodBrowser-child",
                                                                  "childLeaving": "PodBrowser-childLeaving",
                                                                  "childPulsate": "PodBrowser-childPulsate",
                                                                  "ripple": "PodBrowser-ripple",
                                                                  "ripplePulsate": "PodBrowser-ripplePulsate",
                                                                  "rippleVisible": "PodBrowser-rippleVisible",
                                                                  "root": "PodBrowser-root",
                                                                }
                                                              }
                                                            >
                                                              <span
                                                                className="PodBrowser-root"
                                                              >
                                                                <TransitionGroup
                                                                  childFactory={[Function]}
                                                                  component={null}
                                                                  exit={true}
                                                                />
                                                              </span>
                                                            </ForwardRef(TouchRipple)>
                                                          </WithStyles(memo)>
                                                        </span>
                                                      </ForwardRef(ButtonBase)>
                                                    </WithStyles(ForwardRef(ButtonBase))>
                                                  </ForwardRef(IconButton)>
                                                </WithStyles(ForwardRef(IconButton))>
                                              </ForwardRef(SwitchBase)>
                                            </WithStyles(ForwardRef(SwitchBase))>
                                          </ForwardRef(Checkbox)>
                                        </WithStyles(ForwardRef(Checkbox))>
                                        <WithStyles(ForwardRef(Typography))
                                          className="PodBrowser-label PodBrowser-label"
                                          component="span"
                                        >
                                          <ForwardRef(Typography)
                                            className="PodBrowser-label PodBrowser-label"
                                            classes={
                                              Object {
                                                "alignCenter": "PodBrowser-alignCenter",
                                                "alignJustify": "PodBrowser-alignJustify",
                                                "alignLeft": "PodBrowser-alignLeft",
                                                "alignRight": "PodBrowser-alignRight",
                                                "body1": "PodBrowser-body1",
                                                "body2": "PodBrowser-body2",
                                                "button": "PodBrowser-button",
                                                "caption": "PodBrowser-caption",
                                                "colorError": "PodBrowser-colorError",
                                                "colorInherit": "PodBrowser-colorInherit",
                                                "colorPrimary": "PodBrowser-colorPrimary",
                                                "colorSecondary": "PodBrowser-colorSecondary",
                                                "colorTextPrimary": "PodBrowser-colorTextPrimary",
                                                "colorTextSecondary": "PodBrowser-colorTextSecondary",
                                                "displayBlock": "PodBrowser-displayBlock",
                                                "displayInline": "PodBrowser-displayInline",
                                                "gutterBottom": "PodBrowser-gutterBottom",
                                                "h1": "PodBrowser-h1",
                                                "h2": "PodBrowser-h2",
                                                "h3": "PodBrowser-h3",
                                                "h4": "PodBrowser-h4",
                                                "h5": "PodBrowser-h5",
                                                "h6": "PodBrowser-h6",
                                                "noWrap": "PodBrowser-noWrap",
                                                "overline": "PodBrowser-overline",
                                                "paragraph": "PodBrowser-paragraph",
                                                "root": "PodBrowser-root",
                                                "srOnly": "PodBrowser-srOnly",
                                                "subtitle1": "PodBrowser-subtitle1",
                                                "subtitle2": "PodBrowser-subtitle2",
                                              }
                                            }
                                            component="span"
                                          >
                                            <span
                                              className="PodBrowser-root PodBrowser-label PodBrowser-label PodBrowser-body1"
                                            >
                                              Control
                                            </span>
                                          </ForwardRef(Typography)>
                                        </WithStyles(ForwardRef(Typography))>
                                      </label>
                                    </ForwardRef(FormControlLabel)>
                                  </WithStyles(ForwardRef(FormControlLabel))>
                                </li>
                              </ForwardRef(ListItem)>
                            </WithStyles(ForwardRef(ListItem))>
                          </PermissionCheckbox>
                        </ul>
                      </ForwardRef(List)>
                    </WithStyles(ForwardRef(List))>
                    <ForwardRef
                      onClick={[Function]}
                      type="submit"
                    >
                      <button
                        className="PodBrowser-button"
                        onClick={[Function]}
                        type="submit"
                      >
                        Save
                      </button>
                    </ForwardRef>
                  </section>
                </div>
              </PermissionsForm>
            </form>
          </Form>
        </AgentAccess>
      </m>
    </ThemeProvider>
  </StylesProvider>
</Component>
`;

exports[`AgentAccess user tries to change access for themselves checkboxes are disabled 1`] = `
<Component
  theme={
    Object {
      "breakpoints": Object {
        "between": [Function],
        "down": [Function],
        "keys": Array [
          "xs",
          "sm",
          "md",
          "lg",
          "xl",
        ],
        "only": [Function],
        "up": [Function],
        "values": Object {
          "lg": 1280,
          "md": 960,
          "sm": 600,
          "xl": 1920,
          "xs": 0,
        },
        "width": [Function],
      },
      "direction": "ltr",
      "iconSet": Object {
        "config": Object {
          "cssFiles": Array [
            "css/all.css",
          ],
          "fonts": Array [
            Object {
              "fontFace": "
font-family: 'Font Awesome 5 Free';
font-style: normal;
font-weight: 900;
font-display: block;",
              "fontsPath": "./webfonts",
              "licensePath": "./LICENSE.txt",
              "source": "fa-solid-900.eot",
              "sources": Array [
                Object {
                  "format": "embedded-opentype",
                  "path": "fa-solid-900.eot",
                  "urlAddition": "?#iefix",
                },
                Object {
                  "format": "woff2",
                  "path": "fa-solid-900.woff2",
                },
                Object {
                  "format": "woff",
                  "path": "fa-solid-900.woff",
                },
                Object {
                  "format": "truetype",
                  "path": "fa-solid-900.ttf",
                },
                Object {
                  "format": "svg",
                  "path": "fa-solid-900.svg",
                  "urlAddition": "#fontawesome",
                },
              ],
            },
          ],
          "label": "Font Awesome Solid",
          "name": "fontawesome-solid",
          "npmModule": "@fortawesome/fontawesome-free",
          "type": 0,
        },
        "iconColor": [Function],
        "styles": [Function],
      },
      "icons": Object {
        "config": Object {
          "cssFiles": Array [
            "css/all.css",
          ],
          "fonts": Array [
            Object {
              "fontFace": "
font-family: 'Font Awesome 5 Free';
font-style: normal;
font-weight: 900;
font-display: block;",
              "fontsPath": "./webfonts",
              "licensePath": "./LICENSE.txt",
              "source": "fa-solid-900.eot",
              "sources": Array [
                Object {
                  "format": "embedded-opentype",
                  "path": "fa-solid-900.eot",
                  "urlAddition": "?#iefix",
                },
                Object {
                  "format": "woff2",
                  "path": "fa-solid-900.woff2",
                },
                Object {
                  "format": "woff",
                  "path": "fa-solid-900.woff",
                },
                Object {
                  "format": "truetype",
                  "path": "fa-solid-900.ttf",
                },
                Object {
                  "format": "svg",
                  "path": "fa-solid-900.svg",
                  "urlAddition": "#fontawesome",
                },
              ],
            },
          ],
          "label": "Font Awesome Solid",
          "name": "fontawesome-solid",
          "npmModule": "@fortawesome/fontawesome-free",
          "type": 0,
        },
        "iconColor": [Function],
        "styles": [Function],
      },
      "label": "SDK Default",
      "licenses": Array [
        "fonts/Raleway/OFL.txt",
      ],
      "localFonts": Object {
        "fonts/Raleway/Raleway-ExtraBold": [Function],
        "fonts/Raleway/Raleway-Medium": [Function],
      },
      "mixins": Object {
        "gutters": [Function],
        "toolbar": Object {
          "@media (min-width:0px) and (orientation: landscape)": Object {
            "minHeight": 48,
          },
          "@media (min-width:600px)": Object {
            "minHeight": 64,
          },
          "minHeight": 56,
        },
      },
      "name": "sdk-default",
      "overrides": Object {},
      "palette": Object {
        "action": Object {
          "activatedOpacity": 0.12,
          "active": "rgba(0, 0, 0, 0.54)",
          "disabled": "rgba(0, 0, 0, 0.26)",
          "disabledBackground": "rgba(0, 0, 0, 0.12)",
          "disabledOpacity": 0.38,
          "focus": "rgba(0, 0, 0, 0.12)",
          "focusOpacity": 0.12,
          "hover": "rgba(0, 0, 0, 0.04)",
          "hoverOpacity": 0.04,
          "selected": "rgba(0, 0, 0, 0.08)",
          "selectedOpacity": 0.08,
        },
        "adjustAlpha": [Function],
        "augmentColor": [Function],
        "background": Object {
          "default": "#FFFFFF",
          "paper": "#fff",
        },
        "common": Object {
          "black": "#000",
          "white": "#fff",
        },
        "contrastThreshold": 3,
        "divider": "rgba(0, 0, 0, 0.12)",
        "error": Object {
          "contrastText": "#fff",
          "dark": "#d32f2f",
          "light": "#e57373",
          "main": "#f44336",
        },
        "getContrastText": [Function],
        "grey": Object {
          "100": "#f5f5f5",
          "200": "#eeeeee",
          "300": "#e0e0e0",
          "400": "#bdbdbd",
          "50": "#fafafa",
          "500": "#9e9e9e",
          "600": "#757575",
          "700": "#616161",
          "800": "#424242",
          "900": "#212121",
          "A100": "#d5d5d5",
          "A200": "#aaaaaa",
          "A400": "#303030",
          "A700": "#616161",
        },
        "info": Object {
          "contrastText": "#fff",
          "dark": "#1976d2",
          "light": "#64b5f6",
          "main": "#2196f3",
        },
        "primary": Object {
          "contrastText": "#fff",
          "dark": "rgb(86, 53, 178)",
          "light": "rgb(150, 112, 255)",
          "main": "#7C4DFF",
        },
        "secondary": Object {
          "contrastText": "rgba(0, 0, 0, 0.87)",
          "dark": "#083575",
          "light": "#01C9EA",
          "main": "#18A9E6",
        },
        "success": Object {
          "contrastText": "rgba(0, 0, 0, 0.87)",
          "dark": "#388e3c",
          "light": "#81c784",
          "main": "#4caf50",
        },
        "text": Object {
          "disabled": "rgba(0, 0, 0, 0.38)",
          "hint": "rgba(0, 0, 0, 0.38)",
          "primary": "#4E4E4E",
          "secondary": "#4E4E4E",
        },
        "tonalOffset": 0.2,
        "type": "light",
        "warning": Object {
          "contrastText": "rgba(0, 0, 0, 0.87)",
          "dark": "#f57c00",
          "light": "#ffb74d",
          "main": "#ff9800",
        },
      },
      "props": Object {},
      "shadows": Array [
        "none",
        "0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12)",
        "0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12)",
        "0px 3px 3px -2px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 1px 8px 0px rgba(0,0,0,0.12)",
        "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
        "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
        "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
        "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
        "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
        "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
        "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
        "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
        "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
        "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
        "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
        "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
        "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
        "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
        "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
        "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
        "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
        "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
        "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
        "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
        "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
      ],
      "shape": Object {
        "borderRadius": 4,
      },
      "spacing": [Function],
      "stylesheets": Array [
        "https://fonts.googleapis.com/css?family=Raleway:500,800&display=swap",
      ],
      "transitions": Object {
        "create": [Function],
        "duration": Object {
          "complex": 375,
          "enteringScreen": 225,
          "leavingScreen": 195,
          "short": 250,
          "shorter": 200,
          "shortest": 150,
          "standard": 300,
        },
        "easing": Object {
          "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
          "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
          "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
          "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
        },
        "getAutoHeightDuration": [Function],
      },
      "typography": Object {
        "body": Object {
          "fontFamily": "\\"Raleway-Medium\\"",
          "fontSize": "0.9375rem",
          "fontWeight": 500,
          "letterSpacing": "0.01071em",
          "lineHeight": 1.43,
        },
        "body1": Object {
          "fontFamily": "\\"Raleway-ExtraBold\\"",
          "fontSize": "1rem",
          "fontWeight": 800,
          "letterSpacing": "0.00938em",
          "lineHeight": 1.5,
        },
        "body2": Object {
          "fontFamily": "\\"Raleway-Medium\\"",
          "fontSize": "0.9375rem",
          "fontWeight": 500,
          "letterSpacing": "0.01071em",
          "lineHeight": 1.43,
        },
        "button": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "0.875rem",
          "fontWeight": 500,
          "letterSpacing": "0.02857em",
          "lineHeight": 1.75,
          "textTransform": "uppercase",
        },
        "caption": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "0.75rem",
          "fontWeight": 400,
          "letterSpacing": "0.03333em",
          "lineHeight": 1.66,
        },
        "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
        "fontSize": 14,
        "fontWeightBold": 800,
        "fontWeightLight": 500,
        "fontWeightMedium": 500,
        "fontWeightRegular": 400,
        "h1": Object {
          "fontFamily": "\\"Raleway-ExtraBold\\"",
          "fontSize": "1.375rem",
          "fontWeight": 800,
          "letterSpacing": "-0.01562em",
          "lineHeight": 1.45,
        },
        "h2": Object {
          "fontFamily": "\\"Raleway-ExtraBold\\"",
          "fontSize": "1.125rem",
          "fontWeight": 800,
          "letterSpacing": "-0.00833em",
          "lineHeight": 1.27,
        },
        "h3": Object {
          "fontFamily": "\\"Raleway-ExtraBold\\"",
          "fontSize": "1.05rem",
          "fontWeight": 800,
          "letterSpacing": "0em",
          "lineHeight": 1.2,
        },
        "h4": Object {
          "fontFamily": "\\"Raleway-ExtraBold\\"",
          "fontSize": "1rem",
          "fontWeight": 800,
          "letterSpacing": "0.00735em",
          "lineHeight": 1.1,
        },
        "h5": Object {
          "fontFamily": "\\"Raleway-ExtraBold\\"",
          "fontSize": "1rem",
          "fontWeight": 800,
          "letterSpacing": "0em",
          "lineHeight": 1,
        },
        "h6": Object {
          "fontFamily": "\\"Raleway-ExtraBold\\"",
          "fontSize": "0.625rem",
          "fontWeight": 800,
          "letterSpacing": "0.0075em",
          "lineHeight": 1,
        },
        "heading": Object {
          "fontFamily": "\\"Raleway-ExtraBold\\"",
          "fontSize": "1rem",
          "fontWeight": 800,
          "letterSpacing": "0.00938em",
          "lineHeight": 1.5,
        },
        "htmlFontSize": 16,
        "overline": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "0.75rem",
          "fontWeight": 400,
          "letterSpacing": "0.08333em",
          "lineHeight": 2.66,
          "textTransform": "uppercase",
        },
        "pxToRem": [Function],
        "round": [Function],
        "subtitle1": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "1rem",
          "fontWeight": 400,
          "letterSpacing": "0.00938em",
          "lineHeight": 1.75,
        },
        "subtitle2": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "0.875rem",
          "fontWeight": 500,
          "letterSpacing": "0.00714em",
          "lineHeight": 1.57,
        },
      },
      "zIndex": Object {
        "appBar": 1100,
        "drawer": 1200,
        "mobileStepper": 1000,
        "modal": 1300,
        "snackbar": 1400,
        "speedDial": 1050,
        "tooltip": 1500,
      },
      Symbol(mui.nested): false,
    }
  }
>
  <StylesProvider
    generateClassName={[Function]}
  >
    <ThemeProvider
      theme={
        Object {
          "breakpoints": Object {
            "between": [Function],
            "down": [Function],
            "keys": Array [
              "xs",
              "sm",
              "md",
              "lg",
              "xl",
            ],
            "only": [Function],
            "up": [Function],
            "values": Object {
              "lg": 1280,
              "md": 960,
              "sm": 600,
              "xl": 1920,
              "xs": 0,
            },
            "width": [Function],
          },
          "direction": "ltr",
          "iconSet": Object {
            "config": Object {
              "cssFiles": Array [
                "css/all.css",
              ],
              "fonts": Array [
                Object {
                  "fontFace": "
font-family: 'Font Awesome 5 Free';
font-style: normal;
font-weight: 900;
font-display: block;",
                  "fontsPath": "./webfonts",
                  "licensePath": "./LICENSE.txt",
                  "source": "fa-solid-900.eot",
                  "sources": Array [
                    Object {
                      "format": "embedded-opentype",
                      "path": "fa-solid-900.eot",
                      "urlAddition": "?#iefix",
                    },
                    Object {
                      "format": "woff2",
                      "path": "fa-solid-900.woff2",
                    },
                    Object {
                      "format": "woff",
                      "path": "fa-solid-900.woff",
                    },
                    Object {
                      "format": "truetype",
                      "path": "fa-solid-900.ttf",
                    },
                    Object {
                      "format": "svg",
                      "path": "fa-solid-900.svg",
                      "urlAddition": "#fontawesome",
                    },
                  ],
                },
              ],
              "label": "Font Awesome Solid",
              "name": "fontawesome-solid",
              "npmModule": "@fortawesome/fontawesome-free",
              "type": 0,
            },
            "iconColor": [Function],
            "styles": [Function],
          },
          "icons": Object {
            "config": Object {
              "cssFiles": Array [
                "css/all.css",
              ],
              "fonts": Array [
                Object {
                  "fontFace": "
font-family: 'Font Awesome 5 Free';
font-style: normal;
font-weight: 900;
font-display: block;",
                  "fontsPath": "./webfonts",
                  "licensePath": "./LICENSE.txt",
                  "source": "fa-solid-900.eot",
                  "sources": Array [
                    Object {
                      "format": "embedded-opentype",
                      "path": "fa-solid-900.eot",
                      "urlAddition": "?#iefix",
                    },
                    Object {
                      "format": "woff2",
                      "path": "fa-solid-900.woff2",
                    },
                    Object {
                      "format": "woff",
                      "path": "fa-solid-900.woff",
                    },
                    Object {
                      "format": "truetype",
                      "path": "fa-solid-900.ttf",
                    },
                    Object {
                      "format": "svg",
                      "path": "fa-solid-900.svg",
                      "urlAddition": "#fontawesome",
                    },
                  ],
                },
              ],
              "label": "Font Awesome Solid",
              "name": "fontawesome-solid",
              "npmModule": "@fortawesome/fontawesome-free",
              "type": 0,
            },
            "iconColor": [Function],
            "styles": [Function],
          },
          "label": "SDK Default",
          "licenses": Array [
            "fonts/Raleway/OFL.txt",
          ],
          "localFonts": Object {
            "fonts/Raleway/Raleway-ExtraBold": [Function],
            "fonts/Raleway/Raleway-Medium": [Function],
          },
          "mixins": Object {
            "gutters": [Function],
            "toolbar": Object {
              "@media (min-width:0px) and (orientation: landscape)": Object {
                "minHeight": 48,
              },
              "@media (min-width:600px)": Object {
                "minHeight": 64,
              },
              "minHeight": 56,
            },
          },
          "name": "sdk-default",
          "overrides": Object {},
          "palette": Object {
            "action": Object {
              "activatedOpacity": 0.12,
              "active": "rgba(0, 0, 0, 0.54)",
              "disabled": "rgba(0, 0, 0, 0.26)",
              "disabledBackground": "rgba(0, 0, 0, 0.12)",
              "disabledOpacity": 0.38,
              "focus": "rgba(0, 0, 0, 0.12)",
              "focusOpacity": 0.12,
              "hover": "rgba(0, 0, 0, 0.04)",
              "hoverOpacity": 0.04,
              "selected": "rgba(0, 0, 0, 0.08)",
              "selectedOpacity": 0.08,
            },
            "adjustAlpha": [Function],
            "augmentColor": [Function],
            "background": Object {
              "default": "#FFFFFF",
              "paper": "#fff",
            },
            "common": Object {
              "black": "#000",
              "white": "#fff",
            },
            "contrastThreshold": 3,
            "divider": "rgba(0, 0, 0, 0.12)",
            "error": Object {
              "contrastText": "#fff",
              "dark": "#d32f2f",
              "light": "#e57373",
              "main": "#f44336",
            },
            "getContrastText": [Function],
            "grey": Object {
              "100": "#f5f5f5",
              "200": "#eeeeee",
              "300": "#e0e0e0",
              "400": "#bdbdbd",
              "50": "#fafafa",
              "500": "#9e9e9e",
              "600": "#757575",
              "700": "#616161",
              "800": "#424242",
              "900": "#212121",
              "A100": "#d5d5d5",
              "A200": "#aaaaaa",
              "A400": "#303030",
              "A700": "#616161",
            },
            "info": Object {
              "contrastText": "#fff",
              "dark": "#1976d2",
              "light": "#64b5f6",
              "main": "#2196f3",
            },
            "primary": Object {
              "contrastText": "#fff",
              "dark": "rgb(86, 53, 178)",
              "light": "rgb(150, 112, 255)",
              "main": "#7C4DFF",
            },
            "secondary": Object {
              "contrastText": "rgba(0, 0, 0, 0.87)",
              "dark": "#083575",
              "light": "#01C9EA",
              "main": "#18A9E6",
            },
            "success": Object {
              "contrastText": "rgba(0, 0, 0, 0.87)",
              "dark": "#388e3c",
              "light": "#81c784",
              "main": "#4caf50",
            },
            "text": Object {
              "disabled": "rgba(0, 0, 0, 0.38)",
              "hint": "rgba(0, 0, 0, 0.38)",
              "primary": "#4E4E4E",
              "secondary": "#4E4E4E",
            },
            "tonalOffset": 0.2,
            "type": "light",
            "warning": Object {
              "contrastText": "rgba(0, 0, 0, 0.87)",
              "dark": "#f57c00",
              "light": "#ffb74d",
              "main": "#ff9800",
            },
          },
          "props": Object {},
          "shadows": Array [
            "none",
            "0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12)",
            "0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12)",
            "0px 3px 3px -2px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 1px 8px 0px rgba(0,0,0,0.12)",
            "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
            "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
            "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
            "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
            "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
            "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
            "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
            "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
            "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
            "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
            "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
            "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
            "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
            "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
            "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
            "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
            "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
            "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
            "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
            "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
            "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
          ],
          "shape": Object {
            "borderRadius": 4,
          },
          "spacing": [Function],
          "stylesheets": Array [
            "https://fonts.googleapis.com/css?family=Raleway:500,800&display=swap",
          ],
          "transitions": Object {
            "create": [Function],
            "duration": Object {
              "complex": 375,
              "enteringScreen": 225,
              "leavingScreen": 195,
              "short": 250,
              "shorter": 200,
              "shortest": 150,
              "standard": 300,
            },
            "easing": Object {
              "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
              "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
              "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
              "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
            },
            "getAutoHeightDuration": [Function],
          },
          "typography": Object {
            "body": Object {
              "fontFamily": "\\"Raleway-Medium\\"",
              "fontSize": "0.9375rem",
              "fontWeight": 500,
              "letterSpacing": "0.01071em",
              "lineHeight": 1.43,
            },
            "body1": Object {
              "fontFamily": "\\"Raleway-ExtraBold\\"",
              "fontSize": "1rem",
              "fontWeight": 800,
              "letterSpacing": "0.00938em",
              "lineHeight": 1.5,
            },
            "body2": Object {
              "fontFamily": "\\"Raleway-Medium\\"",
              "fontSize": "0.9375rem",
              "fontWeight": 500,
              "letterSpacing": "0.01071em",
              "lineHeight": 1.43,
            },
            "button": Object {
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "0.875rem",
              "fontWeight": 500,
              "letterSpacing": "0.02857em",
              "lineHeight": 1.75,
              "textTransform": "uppercase",
            },
            "caption": Object {
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "0.75rem",
              "fontWeight": 400,
              "letterSpacing": "0.03333em",
              "lineHeight": 1.66,
            },
            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
            "fontSize": 14,
            "fontWeightBold": 800,
            "fontWeightLight": 500,
            "fontWeightMedium": 500,
            "fontWeightRegular": 400,
            "h1": Object {
              "fontFamily": "\\"Raleway-ExtraBold\\"",
              "fontSize": "1.375rem",
              "fontWeight": 800,
              "letterSpacing": "-0.01562em",
              "lineHeight": 1.45,
            },
            "h2": Object {
              "fontFamily": "\\"Raleway-ExtraBold\\"",
              "fontSize": "1.125rem",
              "fontWeight": 800,
              "letterSpacing": "-0.00833em",
              "lineHeight": 1.27,
            },
            "h3": Object {
              "fontFamily": "\\"Raleway-ExtraBold\\"",
              "fontSize": "1.05rem",
              "fontWeight": 800,
              "letterSpacing": "0em",
              "lineHeight": 1.2,
            },
            "h4": Object {
              "fontFamily": "\\"Raleway-ExtraBold\\"",
              "fontSize": "1rem",
              "fontWeight": 800,
              "letterSpacing": "0.00735em",
              "lineHeight": 1.1,
            },
            "h5": Object {
              "fontFamily": "\\"Raleway-ExtraBold\\"",
              "fontSize": "1rem",
              "fontWeight": 800,
              "letterSpacing": "0em",
              "lineHeight": 1,
            },
            "h6": Object {
              "fontFamily": "\\"Raleway-ExtraBold\\"",
              "fontSize": "0.625rem",
              "fontWeight": 800,
              "letterSpacing": "0.0075em",
              "lineHeight": 1,
            },
            "heading": Object {
              "fontFamily": "\\"Raleway-ExtraBold\\"",
              "fontSize": "1rem",
              "fontWeight": 800,
              "letterSpacing": "0.00938em",
              "lineHeight": 1.5,
            },
            "htmlFontSize": 16,
            "overline": Object {
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "0.75rem",
              "fontWeight": 400,
              "letterSpacing": "0.08333em",
              "lineHeight": 2.66,
              "textTransform": "uppercase",
            },
            "pxToRem": [Function],
            "round": [Function],
            "subtitle1": Object {
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "1rem",
              "fontWeight": 400,
              "letterSpacing": "0.00938em",
              "lineHeight": 1.75,
            },
            "subtitle2": Object {
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": "0.875rem",
              "fontWeight": 500,
              "letterSpacing": "0.00714em",
              "lineHeight": 1.57,
            },
          },
          "zIndex": Object {
            "appBar": 1100,
            "drawer": 1200,
            "mobileStepper": 1000,
            "modal": 1300,
            "snackbar": 1400,
            "speedDial": 1050,
            "tooltip": 1500,
          },
          Symbol(mui.nested): false,
        }
      }
    >
      <MockedSessionContextProvider>
        <g
          session={
            Object {
              "fetch": [MockFunction],
              "handleIncomingRedirect": [MockFunction] {
                "calls": Array [
                  Array [
                    "http://localhost/",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": Promise {},
                  },
                ],
              },
              "info": Object {
                "isLoggedIn": true,
                "sessionId": "some-session-id",
                "webId": "http://example.com/webId#me",
              },
              "on": [MockFunction] {
                "calls": Array [
                  Array [
                    "logout",
                    [Function],
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": undefined,
                  },
                ],
              },
            }
          }
          sessionId="test-session"
          sessionRequestInProgress={false}
        >
          <m
            dataset={
              DatasetCore {
                "internal_resourceInfo": Object {
                  "contentType": "text/turtle",
                  "isRawData": false,
                  "linkedResources": Object {},
                  "sourceIri": "http://example.com/dataset",
                },
                "quads": Set {},
              }
            }
          >
            <AgentAccess
              onLoading={[Function]}
              permission={
                Object {
                  "acl": undefined,
                  "profile": Object {
                    "avatar": "http://example.com/avatar.jpg",
                    "name": "name",
                  },
                }
              }
              webId="http://example.com/webId#me"
            >
              <WithStyles(ForwardRef(Avatar))
                alt="name"
                className="PodBrowser-avatar"
                src="http://example.com/avatar.jpg"
              >
                <ForwardRef(Avatar)
                  alt="name"
                  className="PodBrowser-avatar"
                  classes={
                    Object {
                      "circle": "PodBrowser-circle",
                      "colorDefault": "PodBrowser-colorDefault",
                      "fallback": "PodBrowser-fallback",
                      "img": "PodBrowser-img",
                      "root": "PodBrowser-root",
                      "rounded": "PodBrowser-rounded",
                      "square": "PodBrowser-square",
                    }
                  }
                  src="http://example.com/avatar.jpg"
                >
                  <div
                    className="PodBrowser-root PodBrowser-circle PodBrowser-avatar"
                  >
                    <img
                      alt="name"
                      className="PodBrowser-img"
                      src="http://example.com/avatar.jpg"
                    />
                  </div>
                </ForwardRef(Avatar)>
              </WithStyles(ForwardRef(Avatar))>
              <WithStyles(ForwardRef(Typography))
                className="PodBrowser-detailText"
                data-testid="agent-web-id"
              >
                <ForwardRef(Typography)
                  className="PodBrowser-detailText"
                  classes={
                    Object {
                      "alignCenter": "PodBrowser-alignCenter",
                      "alignJustify": "PodBrowser-alignJustify",
                      "alignLeft": "PodBrowser-alignLeft",
                      "alignRight": "PodBrowser-alignRight",
                      "body1": "PodBrowser-body1",
                      "body2": "PodBrowser-body2",
                      "button": "PodBrowser-button",
                      "caption": "PodBrowser-caption",
                      "colorError": "PodBrowser-colorError",
                      "colorInherit": "PodBrowser-colorInherit",
                      "colorPrimary": "PodBrowser-colorPrimary",
                      "colorSecondary": "PodBrowser-colorSecondary",
                      "colorTextPrimary": "PodBrowser-colorTextPrimary",
                      "colorTextSecondary": "PodBrowser-colorTextSecondary",
                      "displayBlock": "PodBrowser-displayBlock",
                      "displayInline": "PodBrowser-displayInline",
                      "gutterBottom": "PodBrowser-gutterBottom",
                      "h1": "PodBrowser-h1",
                      "h2": "PodBrowser-h2",
                      "h3": "PodBrowser-h3",
                      "h4": "PodBrowser-h4",
                      "h5": "PodBrowser-h5",
                      "h6": "PodBrowser-h6",
                      "noWrap": "PodBrowser-noWrap",
                      "overline": "PodBrowser-overline",
                      "paragraph": "PodBrowser-paragraph",
                      "root": "PodBrowser-root",
                      "srOnly": "PodBrowser-srOnly",
                      "subtitle1": "PodBrowser-subtitle1",
                      "subtitle2": "PodBrowser-subtitle2",
                    }
                  }
                  data-testid="agent-web-id"
                >
                  <p
                    className="PodBrowser-root PodBrowser-detailText PodBrowser-body1"
                    data-testid="agent-web-id"
                  >
                    name
                  </p>
                </ForwardRef(Typography)>
              </WithStyles(ForwardRef(Typography))>
              <Form
                onSubmit={[Function]}
              >
                <form
                  className="PodBrowser-form"
                  onSubmit={[Function]}
                >
                  <PermissionsForm
                    acl={
                      Object {
                        "append": false,
                        "control": false,
                        "read": false,
                        "write": false,
                      }
                    }
                    disabled={null}
                    onChange={[Function]}
                    webId={null}
                  >
                    <div
                      className="PodBrowser-container"
                    >
                      <WithStyles(ForwardRef(Button))
                        className="PodBrowser-summary"
                        data-testid="permissions-dropdown-button"
                        endIcon={<Memo(KeyboardArrowDownIcon) />}
                        onClick={[Function]}
                      >
                        <ForwardRef(Button)
                          className="PodBrowser-summary"
                          classes={
                            Object {
                              "colorInherit": "PodBrowser-colorInherit",
                              "contained": "PodBrowser-contained",
                              "containedPrimary": "PodBrowser-containedPrimary",
                              "containedSecondary": "PodBrowser-containedSecondary",
                              "containedSizeLarge": "PodBrowser-containedSizeLarge",
                              "containedSizeSmall": "PodBrowser-containedSizeSmall",
                              "disableElevation": "PodBrowser-disableElevation",
                              "disabled": "PodBrowser-disabled",
                              "endIcon": "PodBrowser-endIcon",
                              "focusVisible": "PodBrowser-focusVisible",
                              "fullWidth": "PodBrowser-fullWidth",
                              "iconSizeLarge": "PodBrowser-iconSizeLarge",
                              "iconSizeMedium": "PodBrowser-iconSizeMedium",
                              "iconSizeSmall": "PodBrowser-iconSizeSmall",
                              "label": "PodBrowser-label",
                              "outlined": "PodBrowser-outlined",
                              "outlinedPrimary": "PodBrowser-outlinedPrimary",
                              "outlinedSecondary": "PodBrowser-outlinedSecondary",
                              "outlinedSizeLarge": "PodBrowser-outlinedSizeLarge",
                              "outlinedSizeSmall": "PodBrowser-outlinedSizeSmall",
                              "root": "PodBrowser-root",
                              "sizeLarge": "PodBrowser-sizeLarge",
                              "sizeSmall": "PodBrowser-sizeSmall",
                              "startIcon": "PodBrowser-startIcon",
                              "text": "PodBrowser-text",
                              "textPrimary": "PodBrowser-textPrimary",
                              "textSecondary": "PodBrowser-textSecondary",
                              "textSizeLarge": "PodBrowser-textSizeLarge",
                              "textSizeSmall": "PodBrowser-textSizeSmall",
                            }
                          }
                          data-testid="permissions-dropdown-button"
                          endIcon={<Memo(KeyboardArrowDownIcon) />}
                          onClick={[Function]}
                        >
                          <WithStyles(ForwardRef(ButtonBase))
                            className="PodBrowser-root PodBrowser-text PodBrowser-summary"
                            component="button"
                            data-testid="permissions-dropdown-button"
                            disabled={false}
                            focusRipple={true}
                            focusVisibleClassName="PodBrowser-focusVisible"
                            onClick={[Function]}
                            type="button"
                          >
                            <ForwardRef(ButtonBase)
                              className="PodBrowser-root PodBrowser-text PodBrowser-summary"
                              classes={
                                Object {
                                  "disabled": "PodBrowser-disabled",
                                  "focusVisible": "PodBrowser-focusVisible",
                                  "root": "PodBrowser-root",
                                }
                              }
                              component="button"
                              data-testid="permissions-dropdown-button"
                              disabled={false}
                              focusRipple={true}
                              focusVisibleClassName="PodBrowser-focusVisible"
                              onClick={[Function]}
                              type="button"
                            >
                              <button
                                className="PodBrowser-root PodBrowser-root PodBrowser-text PodBrowser-summary"
                                data-testid="permissions-dropdown-button"
                                disabled={false}
                                onBlur={[Function]}
                                onClick={[Function]}
                                onDragLeave={[Function]}
                                onFocus={[Function]}
                                onKeyDown={[Function]}
                                onKeyUp={[Function]}
                                onMouseDown={[Function]}
                                onMouseLeave={[Function]}
                                onMouseUp={[Function]}
                                onTouchEnd={[Function]}
                                onTouchMove={[Function]}
                                onTouchStart={[Function]}
                                tabIndex={0}
                                type="button"
                              >
                                <span
                                  className="PodBrowser-label"
                                >
                                  <span />
                                  <span
                                    className="PodBrowser-endIcon PodBrowser-iconSizeMedium"
                                  >
                                    <KeyboardArrowDownIcon>
                                      <WithStyles(ForwardRef(SvgIcon))>
                                        <ForwardRef(SvgIcon)
                                          classes={
                                            Object {
                                              "colorAction": "PodBrowser-colorAction",
                                              "colorDisabled": "PodBrowser-colorDisabled",
                                              "colorError": "PodBrowser-colorError",
                                              "colorPrimary": "PodBrowser-colorPrimary",
                                              "colorSecondary": "PodBrowser-colorSecondary",
                                              "fontSizeInherit": "PodBrowser-fontSizeInherit",
                                              "fontSizeLarge": "PodBrowser-fontSizeLarge",
                                              "fontSizeSmall": "PodBrowser-fontSizeSmall",
                                              "root": "PodBrowser-root",
                                            }
                                          }
                                        >
                                          <svg
                                            aria-hidden={true}
                                            className="PodBrowser-root"
                                            focusable="false"
                                            viewBox="0 0 24 24"
                                          >
                                            <path
                                              d="M7.41 8.59L12 13.17l4.59-4.58L18 10l-6 6-6-6 1.41-1.41z"
                                            />
                                          </svg>
                                        </ForwardRef(SvgIcon)>
                                      </WithStyles(ForwardRef(SvgIcon))>
                                    </KeyboardArrowDownIcon>
                                  </span>
                                </span>
                                <WithStyles(memo)
                                  center={false}
                                >
                                  <ForwardRef(TouchRipple)
                                    center={false}
                                    classes={
                                      Object {
                                        "child": "PodBrowser-child",
                                        "childLeaving": "PodBrowser-childLeaving",
                                        "childPulsate": "PodBrowser-childPulsate",
                                        "ripple": "PodBrowser-ripple",
                                        "ripplePulsate": "PodBrowser-ripplePulsate",
                                        "rippleVisible": "PodBrowser-rippleVisible",
                                        "root": "PodBrowser-root",
                                      }
                                    }
                                  >
                                    <span
                                      className="PodBrowser-root"
                                    >
                                      <TransitionGroup
                                        childFactory={[Function]}
                                        component={null}
                                        exit={true}
                                      />
                                    </span>
                                  </ForwardRef(TouchRipple)>
                                </WithStyles(memo)>
                              </button>
                            </ForwardRef(ButtonBase)>
                          </WithStyles(ForwardRef(ButtonBase))>
                        </ForwardRef(Button)>
                      </WithStyles(ForwardRef(Button))>
                      <section
                        className="PodBrowser-selectionClosed"
                      >
                        <WithStyles(ForwardRef(List))>
                          <ForwardRef(List)
                            classes={
                              Object {
                                "dense": "PodBrowser-dense",
                                "padding": "PodBrowser-padding",
                                "root": "PodBrowser-root",
                                "subheader": "PodBrowser-subheader",
                              }
                            }
                          >
                            <ul
                              className="PodBrowser-root PodBrowser-padding"
                            >
                              <PermissionCheckbox
                                classes={
                                  Object {
                                    "checkbox": "PodBrowser-checkbox",
                                    "container": "PodBrowser-container",
                                    "label": "PodBrowser-label",
                                    "listItem": "PodBrowser-listItem",
                                    "selectionClosed": "PodBrowser-selectionClosed",
                                    "selectionOpen": "PodBrowser-selectionOpen",
                                    "summary": "PodBrowser-summary",
                                  }
                                }
                                disabled={false}
                                label="View"
                                onChange={[Function]}
                                value={false}
                              >
                                <WithStyles(ForwardRef(ListItem))
                                  className="PodBrowser-listItem"
                                >
                                  <ForwardRef(ListItem)
                                    className="PodBrowser-listItem"
                                    classes={
                                      Object {
                                        "alignItemsFlexStart": "PodBrowser-alignItemsFlexStart",
                                        "button": "PodBrowser-button",
                                        "container": "PodBrowser-container",
                                        "dense": "PodBrowser-dense",
                                        "disabled": "PodBrowser-disabled",
                                        "divider": "PodBrowser-divider",
                                        "focusVisible": "PodBrowser-focusVisible",
                                        "gutters": "PodBrowser-gutters",
                                        "root": "PodBrowser-root",
                                        "secondaryAction": "PodBrowser-secondaryAction",
                                        "selected": "PodBrowser-selected",
                                      }
                                    }
                                  >
                                    <li
                                      className="PodBrowser-root PodBrowser-listItem PodBrowser-gutters"
                                      disabled={false}
                                    >
                                      <WithStyles(ForwardRef(FormControlLabel))
                                        classes={
                                          Object {
                                            "label": "PodBrowser-label",
                                          }
                                        }
                                        control={
                                          <WithStyles(ForwardRef(Checkbox))
                                            checked={false}
                                            classes={
                                              Object {
                                                "root": "PodBrowser-checkbox",
                                              }
                                            }
                                            disabled={false}
                                            name="view"
                                            onChange={[Function]}
                                          />
                                        }
                                        key=".0"
                                        label="View"
                                      >
                                        <ForwardRef(FormControlLabel)
                                          classes={
                                            Object {
                                              "disabled": "PodBrowser-disabled",
                                              "label": "PodBrowser-label PodBrowser-label",
                                              "labelPlacementBottom": "PodBrowser-labelPlacementBottom",
                                              "labelPlacementStart": "PodBrowser-labelPlacementStart",
                                              "labelPlacementTop": "PodBrowser-labelPlacementTop",
                                              "root": "PodBrowser-root",
                                            }
                                          }
                                          control={
                                            <WithStyles(ForwardRef(Checkbox))
                                              checked={false}
                                              classes={
                                                Object {
                                                  "root": "PodBrowser-checkbox",
                                                }
                                              }
                                              disabled={false}
                                              name="view"
                                              onChange={[Function]}
                                            />
                                          }
                                          label="View"
                                        >
                                          <label
                                            className="PodBrowser-root"
                                          >
                                            <WithStyles(ForwardRef(Checkbox))
                                              checked={false}
                                              classes={
                                                Object {
                                                  "root": "PodBrowser-checkbox",
                                                }
                                              }
                                              disabled={false}
                                              name="view"
                                              onChange={[Function]}
                                            >
                                              <ForwardRef(Checkbox)
                                                checked={false}
                                                classes={
                                                  Object {
                                                    "checked": "PodBrowser-checked",
                                                    "colorPrimary": "PodBrowser-colorPrimary",
                                                    "colorSecondary": "PodBrowser-colorSecondary",
                                                    "disabled": "PodBrowser-disabled",
                                                    "indeterminate": "PodBrowser-indeterminate",
                                                    "root": "PodBrowser-root PodBrowser-checkbox",
                                                  }
                                                }
                                                disabled={false}
                                                name="view"
                                                onChange={[Function]}
                                              >
                                                <WithStyles(ForwardRef(SwitchBase))
                                                  checked={false}
                                                  checkedIcon={<Memo />}
                                                  classes={
                                                    Object {
                                                      "checked": "PodBrowser-checked",
                                                      "disabled": "PodBrowser-disabled",
                                                      "root": "PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary",
                                                    }
                                                  }
                                                  color="secondary"
                                                  disabled={false}
                                                  icon={<Memo />}
                                                  inputProps={
                                                    Object {
                                                      "data-indeterminate": false,
                                                    }
                                                  }
                                                  name="view"
                                                  onChange={[Function]}
                                                  type="checkbox"
                                                >
                                                  <ForwardRef(SwitchBase)
                                                    checked={false}
                                                    checkedIcon={<Memo />}
                                                    classes={
                                                      Object {
                                                        "checked": "PodBrowser-checked PodBrowser-checked",
                                                        "disabled": "PodBrowser-disabled PodBrowser-disabled",
                                                        "input": "PodBrowser-input",
                                                        "root": "PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary",
                                                      }
                                                    }
                                                    color="secondary"
                                                    disabled={false}
                                                    icon={<Memo />}
                                                    inputProps={
                                                      Object {
                                                        "data-indeterminate": false,
                                                      }
                                                    }
                                                    name="view"
                                                    onChange={[Function]}
                                                    type="checkbox"
                                                  >
                                                    <WithStyles(ForwardRef(IconButton))
                                                      className="PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary"
                                                      color="secondary"
                                                      component="span"
                                                      disabled={false}
                                                      onBlur={[Function]}
                                                      onFocus={[Function]}
                                                      tabIndex={null}
                                                    >
                                                      <ForwardRef(IconButton)
                                                        className="PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary"
                                                        classes={
                                                          Object {
                                                            "colorInherit": "PodBrowser-colorInherit",
                                                            "colorPrimary": "PodBrowser-colorPrimary",
                                                            "colorSecondary": "PodBrowser-colorSecondary",
                                                            "disabled": "PodBrowser-disabled",
                                                            "edgeEnd": "PodBrowser-edgeEnd",
                                                            "edgeStart": "PodBrowser-edgeStart",
                                                            "label": "PodBrowser-label",
                                                            "root": "PodBrowser-root",
                                                            "sizeSmall": "PodBrowser-sizeSmall",
                                                          }
                                                        }
                                                        color="secondary"
                                                        component="span"
                                                        disabled={false}
                                                        onBlur={[Function]}
                                                        onFocus={[Function]}
                                                        tabIndex={null}
                                                      >
                                                        <WithStyles(ForwardRef(ButtonBase))
                                                          centerRipple={true}
                                                          className="PodBrowser-root PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary PodBrowser-colorSecondary"
                                                          component="span"
                                                          disabled={false}
                                                          focusRipple={true}
                                                          onBlur={[Function]}
                                                          onFocus={[Function]}
                                                          tabIndex={null}
                                                        >
                                                          <ForwardRef(ButtonBase)
                                                            centerRipple={true}
                                                            className="PodBrowser-root PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary PodBrowser-colorSecondary"
                                                            classes={
                                                              Object {
                                                                "disabled": "PodBrowser-disabled",
                                                                "focusVisible": "PodBrowser-focusVisible",
                                                                "root": "PodBrowser-root",
                                                              }
                                                            }
                                                            component="span"
                                                            disabled={false}
                                                            focusRipple={true}
                                                            onBlur={[Function]}
                                                            onFocus={[Function]}
                                                            tabIndex={null}
                                                          >
                                                            <span
                                                              aria-disabled={false}
                                                              className="PodBrowser-root PodBrowser-root PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary PodBrowser-colorSecondary"
                                                              onBlur={[Function]}
                                                              onDragLeave={[Function]}
                                                              onFocus={[Function]}
                                                              onKeyDown={[Function]}
                                                              onKeyUp={[Function]}
                                                              onMouseDown={[Function]}
                                                              onMouseLeave={[Function]}
                                                              onMouseUp={[Function]}
                                                              onTouchEnd={[Function]}
                                                              onTouchMove={[Function]}
                                                              onTouchStart={[Function]}
                                                              tabIndex={null}
                                                            >
                                                              <span
                                                                className="PodBrowser-label"
                                                              >
                                                                <input
                                                                  checked={false}
                                                                  className="PodBrowser-input"
                                                                  data-indeterminate={false}
                                                                  disabled={false}
                                                                  name="view"
                                                                  onChange={[Function]}
                                                                  type="checkbox"
                                                                />
                                                                <ForwardRef(CheckBoxOutlineBlankIcon)>
                                                                  <WithStyles(ForwardRef(SvgIcon))>
                                                                    <ForwardRef(SvgIcon)
                                                                      classes={
                                                                        Object {
                                                                          "colorAction": "PodBrowser-colorAction",
                                                                          "colorDisabled": "PodBrowser-colorDisabled",
                                                                          "colorError": "PodBrowser-colorError",
                                                                          "colorPrimary": "PodBrowser-colorPrimary",
                                                                          "colorSecondary": "PodBrowser-colorSecondary",
                                                                          "fontSizeInherit": "PodBrowser-fontSizeInherit",
                                                                          "fontSizeLarge": "PodBrowser-fontSizeLarge",
                                                                          "fontSizeSmall": "PodBrowser-fontSizeSmall",
                                                                          "root": "PodBrowser-root",
                                                                        }
                                                                      }
                                                                    >
                                                                      <svg
                                                                        aria-hidden={true}
                                                                        className="PodBrowser-root"
                                                                        focusable="false"
                                                                        viewBox="0 0 24 24"
                                                                      >
                                                                        <path
                                                                          d="M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z"
                                                                        />
                                                                      </svg>
                                                                    </ForwardRef(SvgIcon)>
                                                                  </WithStyles(ForwardRef(SvgIcon))>
                                                                </ForwardRef(CheckBoxOutlineBlankIcon)>
                                                              </span>
                                                              <WithStyles(memo)
                                                                center={true}
                                                              >
                                                                <ForwardRef(TouchRipple)
                                                                  center={true}
                                                                  classes={
                                                                    Object {
                                                                      "child": "PodBrowser-child",
                                                                      "childLeaving": "PodBrowser-childLeaving",
                                                                      "childPulsate": "PodBrowser-childPulsate",
                                                                      "ripple": "PodBrowser-ripple",
                                                                      "ripplePulsate": "PodBrowser-ripplePulsate",
                                                                      "rippleVisible": "PodBrowser-rippleVisible",
                                                                      "root": "PodBrowser-root",
                                                                    }
                                                                  }
                                                                >
                                                                  <span
                                                                    className="PodBrowser-root"
                                                                  >
                                                                    <TransitionGroup
                                                                      childFactory={[Function]}
                                                                      component={null}
                                                                      exit={true}
                                                                    />
                                                                  </span>
                                                                </ForwardRef(TouchRipple)>
                                                              </WithStyles(memo)>
                                                            </span>
                                                          </ForwardRef(ButtonBase)>
                                                        </WithStyles(ForwardRef(ButtonBase))>
                                                      </ForwardRef(IconButton)>
                                                    </WithStyles(ForwardRef(IconButton))>
                                                  </ForwardRef(SwitchBase)>
                                                </WithStyles(ForwardRef(SwitchBase))>
                                              </ForwardRef(Checkbox)>
                                            </WithStyles(ForwardRef(Checkbox))>
                                            <WithStyles(ForwardRef(Typography))
                                              className="PodBrowser-label PodBrowser-label"
                                              component="span"
                                            >
                                              <ForwardRef(Typography)
                                                className="PodBrowser-label PodBrowser-label"
                                                classes={
                                                  Object {
                                                    "alignCenter": "PodBrowser-alignCenter",
                                                    "alignJustify": "PodBrowser-alignJustify",
                                                    "alignLeft": "PodBrowser-alignLeft",
                                                    "alignRight": "PodBrowser-alignRight",
                                                    "body1": "PodBrowser-body1",
                                                    "body2": "PodBrowser-body2",
                                                    "button": "PodBrowser-button",
                                                    "caption": "PodBrowser-caption",
                                                    "colorError": "PodBrowser-colorError",
                                                    "colorInherit": "PodBrowser-colorInherit",
                                                    "colorPrimary": "PodBrowser-colorPrimary",
                                                    "colorSecondary": "PodBrowser-colorSecondary",
                                                    "colorTextPrimary": "PodBrowser-colorTextPrimary",
                                                    "colorTextSecondary": "PodBrowser-colorTextSecondary",
                                                    "displayBlock": "PodBrowser-displayBlock",
                                                    "displayInline": "PodBrowser-displayInline",
                                                    "gutterBottom": "PodBrowser-gutterBottom",
                                                    "h1": "PodBrowser-h1",
                                                    "h2": "PodBrowser-h2",
                                                    "h3": "PodBrowser-h3",
                                                    "h4": "PodBrowser-h4",
                                                    "h5": "PodBrowser-h5",
                                                    "h6": "PodBrowser-h6",
                                                    "noWrap": "PodBrowser-noWrap",
                                                    "overline": "PodBrowser-overline",
                                                    "paragraph": "PodBrowser-paragraph",
                                                    "root": "PodBrowser-root",
                                                    "srOnly": "PodBrowser-srOnly",
                                                    "subtitle1": "PodBrowser-subtitle1",
                                                    "subtitle2": "PodBrowser-subtitle2",
                                                  }
                                                }
                                                component="span"
                                              >
                                                <span
                                                  className="PodBrowser-root PodBrowser-label PodBrowser-label PodBrowser-body1"
                                                >
                                                  View
                                                </span>
                                              </ForwardRef(Typography)>
                                            </WithStyles(ForwardRef(Typography))>
                                          </label>
                                        </ForwardRef(FormControlLabel)>
                                      </WithStyles(ForwardRef(FormControlLabel))>
                                    </li>
                                  </ForwardRef(ListItem)>
                                </WithStyles(ForwardRef(ListItem))>
                              </PermissionCheckbox>
                              <PermissionCheckbox
                                classes={
                                  Object {
                                    "checkbox": "PodBrowser-checkbox",
                                    "container": "PodBrowser-container",
                                    "label": "PodBrowser-label",
                                    "listItem": "PodBrowser-listItem",
                                    "selectionClosed": "PodBrowser-selectionClosed",
                                    "selectionOpen": "PodBrowser-selectionOpen",
                                    "summary": "PodBrowser-summary",
                                  }
                                }
                                disabled={false}
                                label="Edit"
                                onChange={[Function]}
                                value={false}
                              >
                                <WithStyles(ForwardRef(ListItem))
                                  className="PodBrowser-listItem"
                                >
                                  <ForwardRef(ListItem)
                                    className="PodBrowser-listItem"
                                    classes={
                                      Object {
                                        "alignItemsFlexStart": "PodBrowser-alignItemsFlexStart",
                                        "button": "PodBrowser-button",
                                        "container": "PodBrowser-container",
                                        "dense": "PodBrowser-dense",
                                        "disabled": "PodBrowser-disabled",
                                        "divider": "PodBrowser-divider",
                                        "focusVisible": "PodBrowser-focusVisible",
                                        "gutters": "PodBrowser-gutters",
                                        "root": "PodBrowser-root",
                                        "secondaryAction": "PodBrowser-secondaryAction",
                                        "selected": "PodBrowser-selected",
                                      }
                                    }
                                  >
                                    <li
                                      className="PodBrowser-root PodBrowser-listItem PodBrowser-gutters"
                                      disabled={false}
                                    >
                                      <WithStyles(ForwardRef(FormControlLabel))
                                        classes={
                                          Object {
                                            "label": "PodBrowser-label",
                                          }
                                        }
                                        control={
                                          <WithStyles(ForwardRef(Checkbox))
                                            checked={false}
                                            classes={
                                              Object {
                                                "root": "PodBrowser-checkbox",
                                              }
                                            }
                                            disabled={false}
                                            name="edit"
                                            onChange={[Function]}
                                          />
                                        }
                                        key=".0"
                                        label="Edit"
                                      >
                                        <ForwardRef(FormControlLabel)
                                          classes={
                                            Object {
                                              "disabled": "PodBrowser-disabled",
                                              "label": "PodBrowser-label PodBrowser-label",
                                              "labelPlacementBottom": "PodBrowser-labelPlacementBottom",
                                              "labelPlacementStart": "PodBrowser-labelPlacementStart",
                                              "labelPlacementTop": "PodBrowser-labelPlacementTop",
                                              "root": "PodBrowser-root",
                                            }
                                          }
                                          control={
                                            <WithStyles(ForwardRef(Checkbox))
                                              checked={false}
                                              classes={
                                                Object {
                                                  "root": "PodBrowser-checkbox",
                                                }
                                              }
                                              disabled={false}
                                              name="edit"
                                              onChange={[Function]}
                                            />
                                          }
                                          label="Edit"
                                        >
                                          <label
                                            className="PodBrowser-root"
                                          >
                                            <WithStyles(ForwardRef(Checkbox))
                                              checked={false}
                                              classes={
                                                Object {
                                                  "root": "PodBrowser-checkbox",
                                                }
                                              }
                                              disabled={false}
                                              name="edit"
                                              onChange={[Function]}
                                            >
                                              <ForwardRef(Checkbox)
                                                checked={false}
                                                classes={
                                                  Object {
                                                    "checked": "PodBrowser-checked",
                                                    "colorPrimary": "PodBrowser-colorPrimary",
                                                    "colorSecondary": "PodBrowser-colorSecondary",
                                                    "disabled": "PodBrowser-disabled",
                                                    "indeterminate": "PodBrowser-indeterminate",
                                                    "root": "PodBrowser-root PodBrowser-checkbox",
                                                  }
                                                }
                                                disabled={false}
                                                name="edit"
                                                onChange={[Function]}
                                              >
                                                <WithStyles(ForwardRef(SwitchBase))
                                                  checked={false}
                                                  checkedIcon={<Memo />}
                                                  classes={
                                                    Object {
                                                      "checked": "PodBrowser-checked",
                                                      "disabled": "PodBrowser-disabled",
                                                      "root": "PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary",
                                                    }
                                                  }
                                                  color="secondary"
                                                  disabled={false}
                                                  icon={<Memo />}
                                                  inputProps={
                                                    Object {
                                                      "data-indeterminate": false,
                                                    }
                                                  }
                                                  name="edit"
                                                  onChange={[Function]}
                                                  type="checkbox"
                                                >
                                                  <ForwardRef(SwitchBase)
                                                    checked={false}
                                                    checkedIcon={<Memo />}
                                                    classes={
                                                      Object {
                                                        "checked": "PodBrowser-checked PodBrowser-checked",
                                                        "disabled": "PodBrowser-disabled PodBrowser-disabled",
                                                        "input": "PodBrowser-input",
                                                        "root": "PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary",
                                                      }
                                                    }
                                                    color="secondary"
                                                    disabled={false}
                                                    icon={<Memo />}
                                                    inputProps={
                                                      Object {
                                                        "data-indeterminate": false,
                                                      }
                                                    }
                                                    name="edit"
                                                    onChange={[Function]}
                                                    type="checkbox"
                                                  >
                                                    <WithStyles(ForwardRef(IconButton))
                                                      className="PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary"
                                                      color="secondary"
                                                      component="span"
                                                      disabled={false}
                                                      onBlur={[Function]}
                                                      onFocus={[Function]}
                                                      tabIndex={null}
                                                    >
                                                      <ForwardRef(IconButton)
                                                        className="PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary"
                                                        classes={
                                                          Object {
                                                            "colorInherit": "PodBrowser-colorInherit",
                                                            "colorPrimary": "PodBrowser-colorPrimary",
                                                            "colorSecondary": "PodBrowser-colorSecondary",
                                                            "disabled": "PodBrowser-disabled",
                                                            "edgeEnd": "PodBrowser-edgeEnd",
                                                            "edgeStart": "PodBrowser-edgeStart",
                                                            "label": "PodBrowser-label",
                                                            "root": "PodBrowser-root",
                                                            "sizeSmall": "PodBrowser-sizeSmall",
                                                          }
                                                        }
                                                        color="secondary"
                                                        component="span"
                                                        disabled={false}
                                                        onBlur={[Function]}
                                                        onFocus={[Function]}
                                                        tabIndex={null}
                                                      >
                                                        <WithStyles(ForwardRef(ButtonBase))
                                                          centerRipple={true}
                                                          className="PodBrowser-root PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary PodBrowser-colorSecondary"
                                                          component="span"
                                                          disabled={false}
                                                          focusRipple={true}
                                                          onBlur={[Function]}
                                                          onFocus={[Function]}
                                                          tabIndex={null}
                                                        >
                                                          <ForwardRef(ButtonBase)
                                                            centerRipple={true}
                                                            className="PodBrowser-root PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary PodBrowser-colorSecondary"
                                                            classes={
                                                              Object {
                                                                "disabled": "PodBrowser-disabled",
                                                                "focusVisible": "PodBrowser-focusVisible",
                                                                "root": "PodBrowser-root",
                                                              }
                                                            }
                                                            component="span"
                                                            disabled={false}
                                                            focusRipple={true}
                                                            onBlur={[Function]}
                                                            onFocus={[Function]}
                                                            tabIndex={null}
                                                          >
                                                            <span
                                                              aria-disabled={false}
                                                              className="PodBrowser-root PodBrowser-root PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary PodBrowser-colorSecondary"
                                                              onBlur={[Function]}
                                                              onDragLeave={[Function]}
                                                              onFocus={[Function]}
                                                              onKeyDown={[Function]}
                                                              onKeyUp={[Function]}
                                                              onMouseDown={[Function]}
                                                              onMouseLeave={[Function]}
                                                              onMouseUp={[Function]}
                                                              onTouchEnd={[Function]}
                                                              onTouchMove={[Function]}
                                                              onTouchStart={[Function]}
                                                              tabIndex={null}
                                                            >
                                                              <span
                                                                className="PodBrowser-label"
                                                              >
                                                                <input
                                                                  checked={false}
                                                                  className="PodBrowser-input"
                                                                  data-indeterminate={false}
                                                                  disabled={false}
                                                                  name="edit"
                                                                  onChange={[Function]}
                                                                  type="checkbox"
                                                                />
                                                                <ForwardRef(CheckBoxOutlineBlankIcon)>
                                                                  <WithStyles(ForwardRef(SvgIcon))>
                                                                    <ForwardRef(SvgIcon)
                                                                      classes={
                                                                        Object {
                                                                          "colorAction": "PodBrowser-colorAction",
                                                                          "colorDisabled": "PodBrowser-colorDisabled",
                                                                          "colorError": "PodBrowser-colorError",
                                                                          "colorPrimary": "PodBrowser-colorPrimary",
                                                                          "colorSecondary": "PodBrowser-colorSecondary",
                                                                          "fontSizeInherit": "PodBrowser-fontSizeInherit",
                                                                          "fontSizeLarge": "PodBrowser-fontSizeLarge",
                                                                          "fontSizeSmall": "PodBrowser-fontSizeSmall",
                                                                          "root": "PodBrowser-root",
                                                                        }
                                                                      }
                                                                    >
                                                                      <svg
                                                                        aria-hidden={true}
                                                                        className="PodBrowser-root"
                                                                        focusable="false"
                                                                        viewBox="0 0 24 24"
                                                                      >
                                                                        <path
                                                                          d="M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z"
                                                                        />
                                                                      </svg>
                                                                    </ForwardRef(SvgIcon)>
                                                                  </WithStyles(ForwardRef(SvgIcon))>
                                                                </ForwardRef(CheckBoxOutlineBlankIcon)>
                                                              </span>
                                                              <WithStyles(memo)
                                                                center={true}
                                                              >
                                                                <ForwardRef(TouchRipple)
                                                                  center={true}
                                                                  classes={
                                                                    Object {
                                                                      "child": "PodBrowser-child",
                                                                      "childLeaving": "PodBrowser-childLeaving",
                                                                      "childPulsate": "PodBrowser-childPulsate",
                                                                      "ripple": "PodBrowser-ripple",
                                                                      "ripplePulsate": "PodBrowser-ripplePulsate",
                                                                      "rippleVisible": "PodBrowser-rippleVisible",
                                                                      "root": "PodBrowser-root",
                                                                    }
                                                                  }
                                                                >
                                                                  <span
                                                                    className="PodBrowser-root"
                                                                  >
                                                                    <TransitionGroup
                                                                      childFactory={[Function]}
                                                                      component={null}
                                                                      exit={true}
                                                                    />
                                                                  </span>
                                                                </ForwardRef(TouchRipple)>
                                                              </WithStyles(memo)>
                                                            </span>
                                                          </ForwardRef(ButtonBase)>
                                                        </WithStyles(ForwardRef(ButtonBase))>
                                                      </ForwardRef(IconButton)>
                                                    </WithStyles(ForwardRef(IconButton))>
                                                  </ForwardRef(SwitchBase)>
                                                </WithStyles(ForwardRef(SwitchBase))>
                                              </ForwardRef(Checkbox)>
                                            </WithStyles(ForwardRef(Checkbox))>
                                            <WithStyles(ForwardRef(Typography))
                                              className="PodBrowser-label PodBrowser-label"
                                              component="span"
                                            >
                                              <ForwardRef(Typography)
                                                className="PodBrowser-label PodBrowser-label"
                                                classes={
                                                  Object {
                                                    "alignCenter": "PodBrowser-alignCenter",
                                                    "alignJustify": "PodBrowser-alignJustify",
                                                    "alignLeft": "PodBrowser-alignLeft",
                                                    "alignRight": "PodBrowser-alignRight",
                                                    "body1": "PodBrowser-body1",
                                                    "body2": "PodBrowser-body2",
                                                    "button": "PodBrowser-button",
                                                    "caption": "PodBrowser-caption",
                                                    "colorError": "PodBrowser-colorError",
                                                    "colorInherit": "PodBrowser-colorInherit",
                                                    "colorPrimary": "PodBrowser-colorPrimary",
                                                    "colorSecondary": "PodBrowser-colorSecondary",
                                                    "colorTextPrimary": "PodBrowser-colorTextPrimary",
                                                    "colorTextSecondary": "PodBrowser-colorTextSecondary",
                                                    "displayBlock": "PodBrowser-displayBlock",
                                                    "displayInline": "PodBrowser-displayInline",
                                                    "gutterBottom": "PodBrowser-gutterBottom",
                                                    "h1": "PodBrowser-h1",
                                                    "h2": "PodBrowser-h2",
                                                    "h3": "PodBrowser-h3",
                                                    "h4": "PodBrowser-h4",
                                                    "h5": "PodBrowser-h5",
                                                    "h6": "PodBrowser-h6",
                                                    "noWrap": "PodBrowser-noWrap",
                                                    "overline": "PodBrowser-overline",
                                                    "paragraph": "PodBrowser-paragraph",
                                                    "root": "PodBrowser-root",
                                                    "srOnly": "PodBrowser-srOnly",
                                                    "subtitle1": "PodBrowser-subtitle1",
                                                    "subtitle2": "PodBrowser-subtitle2",
                                                  }
                                                }
                                                component="span"
                                              >
                                                <span
                                                  className="PodBrowser-root PodBrowser-label PodBrowser-label PodBrowser-body1"
                                                >
                                                  Edit
                                                </span>
                                              </ForwardRef(Typography)>
                                            </WithStyles(ForwardRef(Typography))>
                                          </label>
                                        </ForwardRef(FormControlLabel)>
                                      </WithStyles(ForwardRef(FormControlLabel))>
                                    </li>
                                  </ForwardRef(ListItem)>
                                </WithStyles(ForwardRef(ListItem))>
                              </PermissionCheckbox>
                              <PermissionCheckbox
                                classes={
                                  Object {
                                    "checkbox": "PodBrowser-checkbox",
                                    "container": "PodBrowser-container",
                                    "label": "PodBrowser-label",
                                    "listItem": "PodBrowser-listItem",
                                    "selectionClosed": "PodBrowser-selectionClosed",
                                    "selectionOpen": "PodBrowser-selectionOpen",
                                    "summary": "PodBrowser-summary",
                                  }
                                }
                                disabled={false}
                                label="Append"
                                onChange={[Function]}
                                value={false}
                              >
                                <WithStyles(ForwardRef(ListItem))
                                  className="PodBrowser-listItem"
                                >
                                  <ForwardRef(ListItem)
                                    className="PodBrowser-listItem"
                                    classes={
                                      Object {
                                        "alignItemsFlexStart": "PodBrowser-alignItemsFlexStart",
                                        "button": "PodBrowser-button",
                                        "container": "PodBrowser-container",
                                        "dense": "PodBrowser-dense",
                                        "disabled": "PodBrowser-disabled",
                                        "divider": "PodBrowser-divider",
                                        "focusVisible": "PodBrowser-focusVisible",
                                        "gutters": "PodBrowser-gutters",
                                        "root": "PodBrowser-root",
                                        "secondaryAction": "PodBrowser-secondaryAction",
                                        "selected": "PodBrowser-selected",
                                      }
                                    }
                                  >
                                    <li
                                      className="PodBrowser-root PodBrowser-listItem PodBrowser-gutters"
                                      disabled={false}
                                    >
                                      <WithStyles(ForwardRef(FormControlLabel))
                                        classes={
                                          Object {
                                            "label": "PodBrowser-label",
                                          }
                                        }
                                        control={
                                          <WithStyles(ForwardRef(Checkbox))
                                            checked={false}
                                            classes={
                                              Object {
                                                "root": "PodBrowser-checkbox",
                                              }
                                            }
                                            disabled={false}
                                            name="append"
                                            onChange={[Function]}
                                          />
                                        }
                                        key=".0"
                                        label="Append"
                                      >
                                        <ForwardRef(FormControlLabel)
                                          classes={
                                            Object {
                                              "disabled": "PodBrowser-disabled",
                                              "label": "PodBrowser-label PodBrowser-label",
                                              "labelPlacementBottom": "PodBrowser-labelPlacementBottom",
                                              "labelPlacementStart": "PodBrowser-labelPlacementStart",
                                              "labelPlacementTop": "PodBrowser-labelPlacementTop",
                                              "root": "PodBrowser-root",
                                            }
                                          }
                                          control={
                                            <WithStyles(ForwardRef(Checkbox))
                                              checked={false}
                                              classes={
                                                Object {
                                                  "root": "PodBrowser-checkbox",
                                                }
                                              }
                                              disabled={false}
                                              name="append"
                                              onChange={[Function]}
                                            />
                                          }
                                          label="Append"
                                        >
                                          <label
                                            className="PodBrowser-root"
                                          >
                                            <WithStyles(ForwardRef(Checkbox))
                                              checked={false}
                                              classes={
                                                Object {
                                                  "root": "PodBrowser-checkbox",
                                                }
                                              }
                                              disabled={false}
                                              name="append"
                                              onChange={[Function]}
                                            >
                                              <ForwardRef(Checkbox)
                                                checked={false}
                                                classes={
                                                  Object {
                                                    "checked": "PodBrowser-checked",
                                                    "colorPrimary": "PodBrowser-colorPrimary",
                                                    "colorSecondary": "PodBrowser-colorSecondary",
                                                    "disabled": "PodBrowser-disabled",
                                                    "indeterminate": "PodBrowser-indeterminate",
                                                    "root": "PodBrowser-root PodBrowser-checkbox",
                                                  }
                                                }
                                                disabled={false}
                                                name="append"
                                                onChange={[Function]}
                                              >
                                                <WithStyles(ForwardRef(SwitchBase))
                                                  checked={false}
                                                  checkedIcon={<Memo />}
                                                  classes={
                                                    Object {
                                                      "checked": "PodBrowser-checked",
                                                      "disabled": "PodBrowser-disabled",
                                                      "root": "PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary",
                                                    }
                                                  }
                                                  color="secondary"
                                                  disabled={false}
                                                  icon={<Memo />}
                                                  inputProps={
                                                    Object {
                                                      "data-indeterminate": false,
                                                    }
                                                  }
                                                  name="append"
                                                  onChange={[Function]}
                                                  type="checkbox"
                                                >
                                                  <ForwardRef(SwitchBase)
                                                    checked={false}
                                                    checkedIcon={<Memo />}
                                                    classes={
                                                      Object {
                                                        "checked": "PodBrowser-checked PodBrowser-checked",
                                                        "disabled": "PodBrowser-disabled PodBrowser-disabled",
                                                        "input": "PodBrowser-input",
                                                        "root": "PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary",
                                                      }
                                                    }
                                                    color="secondary"
                                                    disabled={false}
                                                    icon={<Memo />}
                                                    inputProps={
                                                      Object {
                                                        "data-indeterminate": false,
                                                      }
                                                    }
                                                    name="append"
                                                    onChange={[Function]}
                                                    type="checkbox"
                                                  >
                                                    <WithStyles(ForwardRef(IconButton))
                                                      className="PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary"
                                                      color="secondary"
                                                      component="span"
                                                      disabled={false}
                                                      onBlur={[Function]}
                                                      onFocus={[Function]}
                                                      tabIndex={null}
                                                    >
                                                      <ForwardRef(IconButton)
                                                        className="PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary"
                                                        classes={
                                                          Object {
                                                            "colorInherit": "PodBrowser-colorInherit",
                                                            "colorPrimary": "PodBrowser-colorPrimary",
                                                            "colorSecondary": "PodBrowser-colorSecondary",
                                                            "disabled": "PodBrowser-disabled",
                                                            "edgeEnd": "PodBrowser-edgeEnd",
                                                            "edgeStart": "PodBrowser-edgeStart",
                                                            "label": "PodBrowser-label",
                                                            "root": "PodBrowser-root",
                                                            "sizeSmall": "PodBrowser-sizeSmall",
                                                          }
                                                        }
                                                        color="secondary"
                                                        component="span"
                                                        disabled={false}
                                                        onBlur={[Function]}
                                                        onFocus={[Function]}
                                                        tabIndex={null}
                                                      >
                                                        <WithStyles(ForwardRef(ButtonBase))
                                                          centerRipple={true}
                                                          className="PodBrowser-root PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary PodBrowser-colorSecondary"
                                                          component="span"
                                                          disabled={false}
                                                          focusRipple={true}
                                                          onBlur={[Function]}
                                                          onFocus={[Function]}
                                                          tabIndex={null}
                                                        >
                                                          <ForwardRef(ButtonBase)
                                                            centerRipple={true}
                                                            className="PodBrowser-root PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary PodBrowser-colorSecondary"
                                                            classes={
                                                              Object {
                                                                "disabled": "PodBrowser-disabled",
                                                                "focusVisible": "PodBrowser-focusVisible",
                                                                "root": "PodBrowser-root",
                                                              }
                                                            }
                                                            component="span"
                                                            disabled={false}
                                                            focusRipple={true}
                                                            onBlur={[Function]}
                                                            onFocus={[Function]}
                                                            tabIndex={null}
                                                          >
                                                            <span
                                                              aria-disabled={false}
                                                              className="PodBrowser-root PodBrowser-root PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary PodBrowser-colorSecondary"
                                                              onBlur={[Function]}
                                                              onDragLeave={[Function]}
                                                              onFocus={[Function]}
                                                              onKeyDown={[Function]}
                                                              onKeyUp={[Function]}
                                                              onMouseDown={[Function]}
                                                              onMouseLeave={[Function]}
                                                              onMouseUp={[Function]}
                                                              onTouchEnd={[Function]}
                                                              onTouchMove={[Function]}
                                                              onTouchStart={[Function]}
                                                              tabIndex={null}
                                                            >
                                                              <span
                                                                className="PodBrowser-label"
                                                              >
                                                                <input
                                                                  checked={false}
                                                                  className="PodBrowser-input"
                                                                  data-indeterminate={false}
                                                                  disabled={false}
                                                                  name="append"
                                                                  onChange={[Function]}
                                                                  type="checkbox"
                                                                />
                                                                <ForwardRef(CheckBoxOutlineBlankIcon)>
                                                                  <WithStyles(ForwardRef(SvgIcon))>
                                                                    <ForwardRef(SvgIcon)
                                                                      classes={
                                                                        Object {
                                                                          "colorAction": "PodBrowser-colorAction",
                                                                          "colorDisabled": "PodBrowser-colorDisabled",
                                                                          "colorError": "PodBrowser-colorError",
                                                                          "colorPrimary": "PodBrowser-colorPrimary",
                                                                          "colorSecondary": "PodBrowser-colorSecondary",
                                                                          "fontSizeInherit": "PodBrowser-fontSizeInherit",
                                                                          "fontSizeLarge": "PodBrowser-fontSizeLarge",
                                                                          "fontSizeSmall": "PodBrowser-fontSizeSmall",
                                                                          "root": "PodBrowser-root",
                                                                        }
                                                                      }
                                                                    >
                                                                      <svg
                                                                        aria-hidden={true}
                                                                        className="PodBrowser-root"
                                                                        focusable="false"
                                                                        viewBox="0 0 24 24"
                                                                      >
                                                                        <path
                                                                          d="M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z"
                                                                        />
                                                                      </svg>
                                                                    </ForwardRef(SvgIcon)>
                                                                  </WithStyles(ForwardRef(SvgIcon))>
                                                                </ForwardRef(CheckBoxOutlineBlankIcon)>
                                                              </span>
                                                              <WithStyles(memo)
                                                                center={true}
                                                              >
                                                                <ForwardRef(TouchRipple)
                                                                  center={true}
                                                                  classes={
                                                                    Object {
                                                                      "child": "PodBrowser-child",
                                                                      "childLeaving": "PodBrowser-childLeaving",
                                                                      "childPulsate": "PodBrowser-childPulsate",
                                                                      "ripple": "PodBrowser-ripple",
                                                                      "ripplePulsate": "PodBrowser-ripplePulsate",
                                                                      "rippleVisible": "PodBrowser-rippleVisible",
                                                                      "root": "PodBrowser-root",
                                                                    }
                                                                  }
                                                                >
                                                                  <span
                                                                    className="PodBrowser-root"
                                                                  >
                                                                    <TransitionGroup
                                                                      childFactory={[Function]}
                                                                      component={null}
                                                                      exit={true}
                                                                    />
                                                                  </span>
                                                                </ForwardRef(TouchRipple)>
                                                              </WithStyles(memo)>
                                                            </span>
                                                          </ForwardRef(ButtonBase)>
                                                        </WithStyles(ForwardRef(ButtonBase))>
                                                      </ForwardRef(IconButton)>
                                                    </WithStyles(ForwardRef(IconButton))>
                                                  </ForwardRef(SwitchBase)>
                                                </WithStyles(ForwardRef(SwitchBase))>
                                              </ForwardRef(Checkbox)>
                                            </WithStyles(ForwardRef(Checkbox))>
                                            <WithStyles(ForwardRef(Typography))
                                              className="PodBrowser-label PodBrowser-label"
                                              component="span"
                                            >
                                              <ForwardRef(Typography)
                                                className="PodBrowser-label PodBrowser-label"
                                                classes={
                                                  Object {
                                                    "alignCenter": "PodBrowser-alignCenter",
                                                    "alignJustify": "PodBrowser-alignJustify",
                                                    "alignLeft": "PodBrowser-alignLeft",
                                                    "alignRight": "PodBrowser-alignRight",
                                                    "body1": "PodBrowser-body1",
                                                    "body2": "PodBrowser-body2",
                                                    "button": "PodBrowser-button",
                                                    "caption": "PodBrowser-caption",
                                                    "colorError": "PodBrowser-colorError",
                                                    "colorInherit": "PodBrowser-colorInherit",
                                                    "colorPrimary": "PodBrowser-colorPrimary",
                                                    "colorSecondary": "PodBrowser-colorSecondary",
                                                    "colorTextPrimary": "PodBrowser-colorTextPrimary",
                                                    "colorTextSecondary": "PodBrowser-colorTextSecondary",
                                                    "displayBlock": "PodBrowser-displayBlock",
                                                    "displayInline": "PodBrowser-displayInline",
                                                    "gutterBottom": "PodBrowser-gutterBottom",
                                                    "h1": "PodBrowser-h1",
                                                    "h2": "PodBrowser-h2",
                                                    "h3": "PodBrowser-h3",
                                                    "h4": "PodBrowser-h4",
                                                    "h5": "PodBrowser-h5",
                                                    "h6": "PodBrowser-h6",
                                                    "noWrap": "PodBrowser-noWrap",
                                                    "overline": "PodBrowser-overline",
                                                    "paragraph": "PodBrowser-paragraph",
                                                    "root": "PodBrowser-root",
                                                    "srOnly": "PodBrowser-srOnly",
                                                    "subtitle1": "PodBrowser-subtitle1",
                                                    "subtitle2": "PodBrowser-subtitle2",
                                                  }
                                                }
                                                component="span"
                                              >
                                                <span
                                                  className="PodBrowser-root PodBrowser-label PodBrowser-label PodBrowser-body1"
                                                >
                                                  Append
                                                </span>
                                              </ForwardRef(Typography)>
                                            </WithStyles(ForwardRef(Typography))>
                                          </label>
                                        </ForwardRef(FormControlLabel)>
                                      </WithStyles(ForwardRef(FormControlLabel))>
                                    </li>
                                  </ForwardRef(ListItem)>
                                </WithStyles(ForwardRef(ListItem))>
                              </PermissionCheckbox>
                              <PermissionCheckbox
                                classes={
                                  Object {
                                    "checkbox": "PodBrowser-checkbox",
                                    "container": "PodBrowser-container",
                                    "label": "PodBrowser-label",
                                    "listItem": "PodBrowser-listItem",
                                    "selectionClosed": "PodBrowser-selectionClosed",
                                    "selectionOpen": "PodBrowser-selectionOpen",
                                    "summary": "PodBrowser-summary",
                                  }
                                }
                                disabled={false}
                                label="Control"
                                onChange={[Function]}
                                value={false}
                              >
                                <WithStyles(ForwardRef(ListItem))
                                  className="PodBrowser-listItem"
                                >
                                  <ForwardRef(ListItem)
                                    className="PodBrowser-listItem"
                                    classes={
                                      Object {
                                        "alignItemsFlexStart": "PodBrowser-alignItemsFlexStart",
                                        "button": "PodBrowser-button",
                                        "container": "PodBrowser-container",
                                        "dense": "PodBrowser-dense",
                                        "disabled": "PodBrowser-disabled",
                                        "divider": "PodBrowser-divider",
                                        "focusVisible": "PodBrowser-focusVisible",
                                        "gutters": "PodBrowser-gutters",
                                        "root": "PodBrowser-root",
                                        "secondaryAction": "PodBrowser-secondaryAction",
                                        "selected": "PodBrowser-selected",
                                      }
                                    }
                                  >
                                    <li
                                      className="PodBrowser-root PodBrowser-listItem PodBrowser-gutters"
                                      disabled={false}
                                    >
                                      <WithStyles(ForwardRef(FormControlLabel))
                                        classes={
                                          Object {
                                            "label": "PodBrowser-label",
                                          }
                                        }
                                        control={
                                          <WithStyles(ForwardRef(Checkbox))
                                            checked={false}
                                            classes={
                                              Object {
                                                "root": "PodBrowser-checkbox",
                                              }
                                            }
                                            disabled={false}
                                            name="control"
                                            onChange={[Function]}
                                          />
                                        }
                                        key=".0"
                                        label="Control"
                                      >
                                        <ForwardRef(FormControlLabel)
                                          classes={
                                            Object {
                                              "disabled": "PodBrowser-disabled",
                                              "label": "PodBrowser-label PodBrowser-label",
                                              "labelPlacementBottom": "PodBrowser-labelPlacementBottom",
                                              "labelPlacementStart": "PodBrowser-labelPlacementStart",
                                              "labelPlacementTop": "PodBrowser-labelPlacementTop",
                                              "root": "PodBrowser-root",
                                            }
                                          }
                                          control={
                                            <WithStyles(ForwardRef(Checkbox))
                                              checked={false}
                                              classes={
                                                Object {
                                                  "root": "PodBrowser-checkbox",
                                                }
                                              }
                                              disabled={false}
                                              name="control"
                                              onChange={[Function]}
                                            />
                                          }
                                          label="Control"
                                        >
                                          <label
                                            className="PodBrowser-root"
                                          >
                                            <WithStyles(ForwardRef(Checkbox))
                                              checked={false}
                                              classes={
                                                Object {
                                                  "root": "PodBrowser-checkbox",
                                                }
                                              }
                                              disabled={false}
                                              name="control"
                                              onChange={[Function]}
                                            >
                                              <ForwardRef(Checkbox)
                                                checked={false}
                                                classes={
                                                  Object {
                                                    "checked": "PodBrowser-checked",
                                                    "colorPrimary": "PodBrowser-colorPrimary",
                                                    "colorSecondary": "PodBrowser-colorSecondary",
                                                    "disabled": "PodBrowser-disabled",
                                                    "indeterminate": "PodBrowser-indeterminate",
                                                    "root": "PodBrowser-root PodBrowser-checkbox",
                                                  }
                                                }
                                                disabled={false}
                                                name="control"
                                                onChange={[Function]}
                                              >
                                                <WithStyles(ForwardRef(SwitchBase))
                                                  checked={false}
                                                  checkedIcon={<Memo />}
                                                  classes={
                                                    Object {
                                                      "checked": "PodBrowser-checked",
                                                      "disabled": "PodBrowser-disabled",
                                                      "root": "PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary",
                                                    }
                                                  }
                                                  color="secondary"
                                                  disabled={false}
                                                  icon={<Memo />}
                                                  inputProps={
                                                    Object {
                                                      "data-indeterminate": false,
                                                    }
                                                  }
                                                  name="control"
                                                  onChange={[Function]}
                                                  type="checkbox"
                                                >
                                                  <ForwardRef(SwitchBase)
                                                    checked={false}
                                                    checkedIcon={<Memo />}
                                                    classes={
                                                      Object {
                                                        "checked": "PodBrowser-checked PodBrowser-checked",
                                                        "disabled": "PodBrowser-disabled PodBrowser-disabled",
                                                        "input": "PodBrowser-input",
                                                        "root": "PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary",
                                                      }
                                                    }
                                                    color="secondary"
                                                    disabled={false}
                                                    icon={<Memo />}
                                                    inputProps={
                                                      Object {
                                                        "data-indeterminate": false,
                                                      }
                                                    }
                                                    name="control"
                                                    onChange={[Function]}
                                                    type="checkbox"
                                                  >
                                                    <WithStyles(ForwardRef(IconButton))
                                                      className="PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary"
                                                      color="secondary"
                                                      component="span"
                                                      disabled={false}
                                                      onBlur={[Function]}
                                                      onFocus={[Function]}
                                                      tabIndex={null}
                                                    >
                                                      <ForwardRef(IconButton)
                                                        className="PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary"
                                                        classes={
                                                          Object {
                                                            "colorInherit": "PodBrowser-colorInherit",
                                                            "colorPrimary": "PodBrowser-colorPrimary",
                                                            "colorSecondary": "PodBrowser-colorSecondary",
                                                            "disabled": "PodBrowser-disabled",
                                                            "edgeEnd": "PodBrowser-edgeEnd",
                                                            "edgeStart": "PodBrowser-edgeStart",
                                                            "label": "PodBrowser-label",
                                                            "root": "PodBrowser-root",
                                                            "sizeSmall": "PodBrowser-sizeSmall",
                                                          }
                                                        }
                                                        color="secondary"
                                                        component="span"
                                                        disabled={false}
                                                        onBlur={[Function]}
                                                        onFocus={[Function]}
                                                        tabIndex={null}
                                                      >
                                                        <WithStyles(ForwardRef(ButtonBase))
                                                          centerRipple={true}
                                                          className="PodBrowser-root PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary PodBrowser-colorSecondary"
                                                          component="span"
                                                          disabled={false}
                                                          focusRipple={true}
                                                          onBlur={[Function]}
                                                          onFocus={[Function]}
                                                          tabIndex={null}
                                                        >
                                                          <ForwardRef(ButtonBase)
                                                            centerRipple={true}
                                                            className="PodBrowser-root PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary PodBrowser-colorSecondary"
                                                            classes={
                                                              Object {
                                                                "disabled": "PodBrowser-disabled",
                                                                "focusVisible": "PodBrowser-focusVisible",
                                                                "root": "PodBrowser-root",
                                                              }
                                                            }
                                                            component="span"
                                                            disabled={false}
                                                            focusRipple={true}
                                                            onBlur={[Function]}
                                                            onFocus={[Function]}
                                                            tabIndex={null}
                                                          >
                                                            <span
                                                              aria-disabled={false}
                                                              className="PodBrowser-root PodBrowser-root PodBrowser-root PodBrowser-root PodBrowser-checkbox PodBrowser-colorSecondary PodBrowser-colorSecondary"
                                                              onBlur={[Function]}
                                                              onDragLeave={[Function]}
                                                              onFocus={[Function]}
                                                              onKeyDown={[Function]}
                                                              onKeyUp={[Function]}
                                                              onMouseDown={[Function]}
                                                              onMouseLeave={[Function]}
                                                              onMouseUp={[Function]}
                                                              onTouchEnd={[Function]}
                                                              onTouchMove={[Function]}
                                                              onTouchStart={[Function]}
                                                              tabIndex={null}
                                                            >
                                                              <span
                                                                className="PodBrowser-label"
                                                              >
                                                                <input
                                                                  checked={false}
                                                                  className="PodBrowser-input"
                                                                  data-indeterminate={false}
                                                                  disabled={false}
                                                                  name="control"
                                                                  onChange={[Function]}
                                                                  type="checkbox"
                                                                />
                                                                <ForwardRef(CheckBoxOutlineBlankIcon)>
                                                                  <WithStyles(ForwardRef(SvgIcon))>
                                                                    <ForwardRef(SvgIcon)
                                                                      classes={
                                                                        Object {
                                                                          "colorAction": "PodBrowser-colorAction",
                                                                          "colorDisabled": "PodBrowser-colorDisabled",
                                                                          "colorError": "PodBrowser-colorError",
                                                                          "colorPrimary": "PodBrowser-colorPrimary",
                                                                          "colorSecondary": "PodBrowser-colorSecondary",
                                                                          "fontSizeInherit": "PodBrowser-fontSizeInherit",
                                                                          "fontSizeLarge": "PodBrowser-fontSizeLarge",
                                                                          "fontSizeSmall": "PodBrowser-fontSizeSmall",
                                                                          "root": "PodBrowser-root",
                                                                        }
                                                                      }
                                                                    >
                                                                      <svg
                                                                        aria-hidden={true}
                                                                        className="PodBrowser-root"
                                                                        focusable="false"
                                                                        viewBox="0 0 24 24"
                                                                      >
                                                                        <path
                                                                          d="M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z"
                                                                        />
                                                                      </svg>
                                                                    </ForwardRef(SvgIcon)>
                                                                  </WithStyles(ForwardRef(SvgIcon))>
                                                                </ForwardRef(CheckBoxOutlineBlankIcon)>
                                                              </span>
                                                              <WithStyles(memo)
                                                                center={true}
                                                              >
                                                                <ForwardRef(TouchRipple)
                                                                  center={true}
                                                                  classes={
                                                                    Object {
                                                                      "child": "PodBrowser-child",
                                                                      "childLeaving": "PodBrowser-childLeaving",
                                                                      "childPulsate": "PodBrowser-childPulsate",
                                                                      "ripple": "PodBrowser-ripple",
                                                                      "ripplePulsate": "PodBrowser-ripplePulsate",
                                                                      "rippleVisible": "PodBrowser-rippleVisible",
                                                                      "root": "PodBrowser-root",
                                                                    }
                                                                  }
                                                                >
                                                                  <span
                                                                    className="PodBrowser-root"
                                                                  >
                                                                    <TransitionGroup
                                                                      childFactory={[Function]}
                                                                      component={null}
                                                                      exit={true}
                                                                    />
                                                                  </span>
                                                                </ForwardRef(TouchRipple)>
                                                              </WithStyles(memo)>
                                                            </span>
                                                          </ForwardRef(ButtonBase)>
                                                        </WithStyles(ForwardRef(ButtonBase))>
                                                      </ForwardRef(IconButton)>
                                                    </WithStyles(ForwardRef(IconButton))>
                                                  </ForwardRef(SwitchBase)>
                                                </WithStyles(ForwardRef(SwitchBase))>
                                              </ForwardRef(Checkbox)>
                                            </WithStyles(ForwardRef(Checkbox))>
                                            <WithStyles(ForwardRef(Typography))
                                              className="PodBrowser-label PodBrowser-label"
                                              component="span"
                                            >
                                              <ForwardRef(Typography)
                                                className="PodBrowser-label PodBrowser-label"
                                                classes={
                                                  Object {
                                                    "alignCenter": "PodBrowser-alignCenter",
                                                    "alignJustify": "PodBrowser-alignJustify",
                                                    "alignLeft": "PodBrowser-alignLeft",
                                                    "alignRight": "PodBrowser-alignRight",
                                                    "body1": "PodBrowser-body1",
                                                    "body2": "PodBrowser-body2",
                                                    "button": "PodBrowser-button",
                                                    "caption": "PodBrowser-caption",
                                                    "colorError": "PodBrowser-colorError",
                                                    "colorInherit": "PodBrowser-colorInherit",
                                                    "colorPrimary": "PodBrowser-colorPrimary",
                                                    "colorSecondary": "PodBrowser-colorSecondary",
                                                    "colorTextPrimary": "PodBrowser-colorTextPrimary",
                                                    "colorTextSecondary": "PodBrowser-colorTextSecondary",
                                                    "displayBlock": "PodBrowser-displayBlock",
                                                    "displayInline": "PodBrowser-displayInline",
                                                    "gutterBottom": "PodBrowser-gutterBottom",
                                                    "h1": "PodBrowser-h1",
                                                    "h2": "PodBrowser-h2",
                                                    "h3": "PodBrowser-h3",
                                                    "h4": "PodBrowser-h4",
                                                    "h5": "PodBrowser-h5",
                                                    "h6": "PodBrowser-h6",
                                                    "noWrap": "PodBrowser-noWrap",
                                                    "overline": "PodBrowser-overline",
                                                    "paragraph": "PodBrowser-paragraph",
                                                    "root": "PodBrowser-root",
                                                    "srOnly": "PodBrowser-srOnly",
                                                    "subtitle1": "PodBrowser-subtitle1",
                                                    "subtitle2": "PodBrowser-subtitle2",
                                                  }
                                                }
                                                component="span"
                                              >
                                                <span
                                                  className="PodBrowser-root PodBrowser-label PodBrowser-label PodBrowser-body1"
                                                >
                                                  Control
                                                </span>
                                              </ForwardRef(Typography)>
                                            </WithStyles(ForwardRef(Typography))>
                                          </label>
                                        </ForwardRef(FormControlLabel)>
                                      </WithStyles(ForwardRef(FormControlLabel))>
                                    </li>
                                  </ForwardRef(ListItem)>
                                </WithStyles(ForwardRef(ListItem))>
                              </PermissionCheckbox>
                            </ul>
                          </ForwardRef(List)>
                        </WithStyles(ForwardRef(List))>
                        <ForwardRef
                          onClick={[Function]}
                          type="submit"
                        >
                          <button
                            className="PodBrowser-button"
                            onClick={[Function]}
                            type="submit"
                          >
                            Save
                          </button>
                        </ForwardRef>
                      </section>
                    </div>
                  </PermissionsForm>
                </form>
              </Form>
            </AgentAccess>
          </m>
        </g>
      </MockedSessionContextProvider>
    </ThemeProvider>
  </StylesProvider>
</Component>
`;
