// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`PermissionCheckbox it renders a permission checkbox 1`] = `
<PermissionCheckbox
  classes={
    Object {
      "checkbox": "checkbox",
      "label": "label",
      "listItem": "listItem",
    }
  }
  label="Read"
  onChange={[MockFunction]}
  value={true}
>
  <WithStyles(ForwardRef(ListItem))
    className="listItem"
  >
    <ForwardRef(ListItem)
      className="listItem"
      classes={
        Object {
          "alignItemsFlexStart": "MuiListItem-alignItemsFlexStart",
          "button": "MuiListItem-button",
          "container": "MuiListItem-container",
          "dense": "MuiListItem-dense",
          "disabled": "Mui-disabled",
          "divider": "MuiListItem-divider",
          "focusVisible": "Mui-focusVisible",
          "gutters": "MuiListItem-gutters",
          "root": "MuiListItem-root",
          "secondaryAction": "MuiListItem-secondaryAction",
          "selected": "Mui-selected",
        }
      }
    >
      <li
        className="MuiListItem-root listItem MuiListItem-gutters"
        disabled={false}
      >
        <WithStyles(ForwardRef(FormControlLabel))
          classes={
            Object {
              "label": "label",
            }
          }
          control={
            <WithStyles(ForwardRef(Checkbox))
              checked={true}
              classes={
                Object {
                  "root": "checkbox",
                }
              }
              name="read"
              onChange={[MockFunction]}
            />
          }
          key=".0"
          label="Read"
        >
          <ForwardRef(FormControlLabel)
            classes={
              Object {
                "disabled": "Mui-disabled",
                "label": "MuiFormControlLabel-label label",
                "labelPlacementBottom": "MuiFormControlLabel-labelPlacementBottom",
                "labelPlacementStart": "MuiFormControlLabel-labelPlacementStart",
                "labelPlacementTop": "MuiFormControlLabel-labelPlacementTop",
                "root": "MuiFormControlLabel-root",
              }
            }
            control={
              <WithStyles(ForwardRef(Checkbox))
                checked={true}
                classes={
                  Object {
                    "root": "checkbox",
                  }
                }
                name="read"
                onChange={[MockFunction]}
              />
            }
            label="Read"
          >
            <label
              className="MuiFormControlLabel-root"
            >
              <WithStyles(ForwardRef(Checkbox))
                checked={true}
                classes={
                  Object {
                    "root": "checkbox",
                  }
                }
                name="read"
                onChange={[MockFunction]}
              >
                <ForwardRef(Checkbox)
                  checked={true}
                  classes={
                    Object {
                      "checked": "Mui-checked",
                      "colorPrimary": "MuiCheckbox-colorPrimary",
                      "colorSecondary": "MuiCheckbox-colorSecondary",
                      "disabled": "Mui-disabled",
                      "indeterminate": "MuiCheckbox-indeterminate",
                      "root": "MuiCheckbox-root checkbox",
                    }
                  }
                  name="read"
                  onChange={[MockFunction]}
                >
                  <WithStyles(ForwardRef(SwitchBase))
                    checked={true}
                    checkedIcon={<Memo />}
                    classes={
                      Object {
                        "checked": "Mui-checked",
                        "disabled": "Mui-disabled",
                        "root": "MuiCheckbox-root checkbox MuiCheckbox-colorSecondary",
                      }
                    }
                    color="secondary"
                    icon={<Memo />}
                    inputProps={
                      Object {
                        "data-indeterminate": false,
                      }
                    }
                    name="read"
                    onChange={[MockFunction]}
                    type="checkbox"
                  >
                    <ForwardRef(SwitchBase)
                      checked={true}
                      checkedIcon={<Memo />}
                      classes={
                        Object {
                          "checked": "PrivateSwitchBase-checked-7 Mui-checked",
                          "disabled": "PrivateSwitchBase-disabled-8 Mui-disabled",
                          "input": "PrivateSwitchBase-input-9",
                          "root": "PrivateSwitchBase-root-6 MuiCheckbox-root checkbox MuiCheckbox-colorSecondary",
                        }
                      }
                      color="secondary"
                      icon={<Memo />}
                      inputProps={
                        Object {
                          "data-indeterminate": false,
                        }
                      }
                      name="read"
                      onChange={[MockFunction]}
                      type="checkbox"
                    >
                      <WithStyles(ForwardRef(IconButton))
                        className="PrivateSwitchBase-root-6 MuiCheckbox-root checkbox MuiCheckbox-colorSecondary PrivateSwitchBase-checked-7 Mui-checked"
                        color="secondary"
                        component="span"
                        onBlur={[Function]}
                        onFocus={[Function]}
                        tabIndex={null}
                      >
                        <ForwardRef(IconButton)
                          className="PrivateSwitchBase-root-6 MuiCheckbox-root checkbox MuiCheckbox-colorSecondary PrivateSwitchBase-checked-7 Mui-checked"
                          classes={
                            Object {
                              "colorInherit": "MuiIconButton-colorInherit",
                              "colorPrimary": "MuiIconButton-colorPrimary",
                              "colorSecondary": "MuiIconButton-colorSecondary",
                              "disabled": "Mui-disabled",
                              "edgeEnd": "MuiIconButton-edgeEnd",
                              "edgeStart": "MuiIconButton-edgeStart",
                              "label": "MuiIconButton-label",
                              "root": "MuiIconButton-root",
                              "sizeSmall": "MuiIconButton-sizeSmall",
                            }
                          }
                          color="secondary"
                          component="span"
                          onBlur={[Function]}
                          onFocus={[Function]}
                          tabIndex={null}
                        >
                          <WithStyles(ForwardRef(ButtonBase))
                            centerRipple={true}
                            className="MuiIconButton-root PrivateSwitchBase-root-6 MuiCheckbox-root checkbox MuiCheckbox-colorSecondary PrivateSwitchBase-checked-7 Mui-checked MuiIconButton-colorSecondary"
                            component="span"
                            disabled={false}
                            focusRipple={true}
                            onBlur={[Function]}
                            onFocus={[Function]}
                            tabIndex={null}
                          >
                            <ForwardRef(ButtonBase)
                              centerRipple={true}
                              className="MuiIconButton-root PrivateSwitchBase-root-6 MuiCheckbox-root checkbox MuiCheckbox-colorSecondary PrivateSwitchBase-checked-7 Mui-checked MuiIconButton-colorSecondary"
                              classes={
                                Object {
                                  "disabled": "Mui-disabled",
                                  "focusVisible": "Mui-focusVisible",
                                  "root": "MuiButtonBase-root",
                                }
                              }
                              component="span"
                              disabled={false}
                              focusRipple={true}
                              onBlur={[Function]}
                              onFocus={[Function]}
                              tabIndex={null}
                            >
                              <span
                                aria-disabled={false}
                                className="MuiButtonBase-root MuiIconButton-root PrivateSwitchBase-root-6 MuiCheckbox-root checkbox MuiCheckbox-colorSecondary PrivateSwitchBase-checked-7 Mui-checked MuiIconButton-colorSecondary"
                                onBlur={[Function]}
                                onDragLeave={[Function]}
                                onFocus={[Function]}
                                onKeyDown={[Function]}
                                onKeyUp={[Function]}
                                onMouseDown={[Function]}
                                onMouseLeave={[Function]}
                                onMouseUp={[Function]}
                                onTouchEnd={[Function]}
                                onTouchMove={[Function]}
                                onTouchStart={[Function]}
                                tabIndex={null}
                              >
                                <span
                                  className="MuiIconButton-label"
                                >
                                  <input
                                    checked={true}
                                    className="PrivateSwitchBase-input-9"
                                    data-indeterminate={false}
                                    name="read"
                                    onChange={[Function]}
                                    type="checkbox"
                                  />
                                  <ForwardRef(CheckBoxIcon)>
                                    <WithStyles(ForwardRef(SvgIcon))>
                                      <ForwardRef(SvgIcon)
                                        classes={
                                          Object {
                                            "colorAction": "MuiSvgIcon-colorAction",
                                            "colorDisabled": "MuiSvgIcon-colorDisabled",
                                            "colorError": "MuiSvgIcon-colorError",
                                            "colorPrimary": "MuiSvgIcon-colorPrimary",
                                            "colorSecondary": "MuiSvgIcon-colorSecondary",
                                            "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                            "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                            "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                            "root": "MuiSvgIcon-root",
                                          }
                                        }
                                      >
                                        <svg
                                          aria-hidden={true}
                                          className="MuiSvgIcon-root"
                                          focusable="false"
                                          viewBox="0 0 24 24"
                                        >
                                          <path
                                            d="M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"
                                          />
                                        </svg>
                                      </ForwardRef(SvgIcon)>
                                    </WithStyles(ForwardRef(SvgIcon))>
                                  </ForwardRef(CheckBoxIcon)>
                                </span>
                              </span>
                            </ForwardRef(ButtonBase)>
                          </WithStyles(ForwardRef(ButtonBase))>
                        </ForwardRef(IconButton)>
                      </WithStyles(ForwardRef(IconButton))>
                    </ForwardRef(SwitchBase)>
                  </WithStyles(ForwardRef(SwitchBase))>
                </ForwardRef(Checkbox)>
              </WithStyles(ForwardRef(Checkbox))>
              <WithStyles(ForwardRef(Typography))
                className="MuiFormControlLabel-label label"
                component="span"
              >
                <ForwardRef(Typography)
                  className="MuiFormControlLabel-label label"
                  classes={
                    Object {
                      "alignCenter": "MuiTypography-alignCenter",
                      "alignJustify": "MuiTypography-alignJustify",
                      "alignLeft": "MuiTypography-alignLeft",
                      "alignRight": "MuiTypography-alignRight",
                      "body1": "MuiTypography-body1",
                      "body2": "MuiTypography-body2",
                      "button": "MuiTypography-button",
                      "caption": "MuiTypography-caption",
                      "colorError": "MuiTypography-colorError",
                      "colorInherit": "MuiTypography-colorInherit",
                      "colorPrimary": "MuiTypography-colorPrimary",
                      "colorSecondary": "MuiTypography-colorSecondary",
                      "colorTextPrimary": "MuiTypography-colorTextPrimary",
                      "colorTextSecondary": "MuiTypography-colorTextSecondary",
                      "displayBlock": "MuiTypography-displayBlock",
                      "displayInline": "MuiTypography-displayInline",
                      "gutterBottom": "MuiTypography-gutterBottom",
                      "h1": "MuiTypography-h1",
                      "h2": "MuiTypography-h2",
                      "h3": "MuiTypography-h3",
                      "h4": "MuiTypography-h4",
                      "h5": "MuiTypography-h5",
                      "h6": "MuiTypography-h6",
                      "noWrap": "MuiTypography-noWrap",
                      "overline": "MuiTypography-overline",
                      "paragraph": "MuiTypography-paragraph",
                      "root": "MuiTypography-root",
                      "srOnly": "MuiTypography-srOnly",
                      "subtitle1": "MuiTypography-subtitle1",
                      "subtitle2": "MuiTypography-subtitle2",
                    }
                  }
                  component="span"
                >
                  <span
                    className="MuiTypography-root MuiFormControlLabel-label label MuiTypography-body1"
                  >
                    Read
                  </span>
                </ForwardRef(Typography)>
              </WithStyles(ForwardRef(Typography))>
            </label>
          </ForwardRef(FormControlLabel)>
        </WithStyles(ForwardRef(FormControlLabel))>
      </li>
    </ForwardRef(ListItem)>
  </WithStyles(ForwardRef(ListItem))>
</PermissionCheckbox>
`;

exports[`PermissionsForm Renders a permissions form 1`] = `
<PermissionsForm
  iri="https://mypod.myhost.com"
  permission={
    Object {
      "acl": Object {
        "append": true,
        "control": false,
        "read": true,
        "write": true,
      },
      "alias": "Full Control",
      "profile": Object {
        "webId": "https://mypod.myhost.com/profile/card#me",
      },
      "webId": "https://mypod.myhost.com/profile/card#me",
    }
  }
  warnOnSubmit={false}
/>
`;

exports[`confirmationDialog it returns a Dialog component when warn is true 1`] = `
<WithStyles(ForwardRef(Dialog))
  aria-labelledby="permission-edit-confirmation"
  disableBackdropClick={true}
  disableEscapeKeyDown={true}
  maxWidth="xs"
  open={false}
>
  <ForwardRef(Dialog)
    aria-labelledby="permission-edit-confirmation"
    classes={
      Object {
        "container": "MuiDialog-container",
        "paper": "MuiDialog-paper",
        "paperFullScreen": "MuiDialog-paperFullScreen",
        "paperFullWidth": "MuiDialog-paperFullWidth",
        "paperScrollBody": "MuiDialog-paperScrollBody",
        "paperScrollPaper": "MuiDialog-paperScrollPaper",
        "paperWidthFalse": "MuiDialog-paperWidthFalse",
        "paperWidthLg": "MuiDialog-paperWidthLg",
        "paperWidthMd": "MuiDialog-paperWidthMd",
        "paperWidthSm": "MuiDialog-paperWidthSm",
        "paperWidthXl": "MuiDialog-paperWidthXl",
        "paperWidthXs": "MuiDialog-paperWidthXs",
        "root": "MuiDialog-root",
        "scrollBody": "MuiDialog-scrollBody",
        "scrollPaper": "MuiDialog-scrollPaper",
      }
    }
    disableBackdropClick={true}
    disableEscapeKeyDown={true}
    maxWidth="xs"
    open={false}
  >
    <ForwardRef(Modal)
      BackdropComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "Naked": Object {
            "$$typeof": Symbol(react.forward_ref),
            "propTypes": Object {
              "children": [Function],
              "className": [Function],
              "classes": [Function],
              "invisible": [Function],
              "open": [Function],
              "transitionDuration": [Function],
            },
            "render": [Function],
          },
          "displayName": "WithStyles(ForwardRef(Backdrop))",
          "options": Object {
            "defaultTheme": Object {
              "breakpoints": Object {
                "between": [Function],
                "down": [Function],
                "keys": Array [
                  "xs",
                  "sm",
                  "md",
                  "lg",
                  "xl",
                ],
                "only": [Function],
                "up": [Function],
                "values": Object {
                  "lg": 1280,
                  "md": 960,
                  "sm": 600,
                  "xl": 1920,
                  "xs": 0,
                },
                "width": [Function],
              },
              "direction": "ltr",
              "mixins": Object {
                "gutters": [Function],
                "toolbar": Object {
                  "@media (min-width:0px) and (orientation: landscape)": Object {
                    "minHeight": 48,
                  },
                  "@media (min-width:600px)": Object {
                    "minHeight": 64,
                  },
                  "minHeight": 56,
                },
              },
              "overrides": Object {},
              "palette": Object {
                "action": Object {
                  "activatedOpacity": 0.12,
                  "active": "rgba(0, 0, 0, 0.54)",
                  "disabled": "rgba(0, 0, 0, 0.26)",
                  "disabledBackground": "rgba(0, 0, 0, 0.12)",
                  "disabledOpacity": 0.38,
                  "focus": "rgba(0, 0, 0, 0.12)",
                  "focusOpacity": 0.12,
                  "hover": "rgba(0, 0, 0, 0.04)",
                  "hoverOpacity": 0.04,
                  "selected": "rgba(0, 0, 0, 0.08)",
                  "selectedOpacity": 0.08,
                },
                "augmentColor": [Function],
                "background": Object {
                  "default": "#fafafa",
                  "paper": "#fff",
                },
                "common": Object {
                  "black": "#000",
                  "white": "#fff",
                },
                "contrastThreshold": 3,
                "divider": "rgba(0, 0, 0, 0.12)",
                "error": Object {
                  "contrastText": "#fff",
                  "dark": "#d32f2f",
                  "light": "#e57373",
                  "main": "#f44336",
                },
                "getContrastText": [Function],
                "grey": Object {
                  "100": "#f5f5f5",
                  "200": "#eeeeee",
                  "300": "#e0e0e0",
                  "400": "#bdbdbd",
                  "50": "#fafafa",
                  "500": "#9e9e9e",
                  "600": "#757575",
                  "700": "#616161",
                  "800": "#424242",
                  "900": "#212121",
                  "A100": "#d5d5d5",
                  "A200": "#aaaaaa",
                  "A400": "#303030",
                  "A700": "#616161",
                },
                "info": Object {
                  "contrastText": "#fff",
                  "dark": "#1976d2",
                  "light": "#64b5f6",
                  "main": "#2196f3",
                },
                "primary": Object {
                  "contrastText": "#fff",
                  "dark": "#303f9f",
                  "light": "#7986cb",
                  "main": "#3f51b5",
                },
                "secondary": Object {
                  "contrastText": "#fff",
                  "dark": "#c51162",
                  "light": "#ff4081",
                  "main": "#f50057",
                },
                "success": Object {
                  "contrastText": "rgba(0, 0, 0, 0.87)",
                  "dark": "#388e3c",
                  "light": "#81c784",
                  "main": "#4caf50",
                },
                "text": Object {
                  "disabled": "rgba(0, 0, 0, 0.38)",
                  "hint": "rgba(0, 0, 0, 0.38)",
                  "primary": "rgba(0, 0, 0, 0.87)",
                  "secondary": "rgba(0, 0, 0, 0.54)",
                },
                "tonalOffset": 0.2,
                "type": "light",
                "warning": Object {
                  "contrastText": "rgba(0, 0, 0, 0.87)",
                  "dark": "#f57c00",
                  "light": "#ffb74d",
                  "main": "#ff9800",
                },
              },
              "props": Object {},
              "shadows": Array [
                "none",
                "0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12)",
                "0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12)",
                "0px 3px 3px -2px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 1px 8px 0px rgba(0,0,0,0.12)",
                "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
                "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
                "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
                "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
                "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
                "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
                "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
                "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
                "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
                "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
                "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
                "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
                "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
                "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
                "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
                "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
                "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
                "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
                "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
                "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
                "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
              ],
              "shape": Object {
                "borderRadius": 4,
              },
              "spacing": [Function],
              "transitions": Object {
                "create": [Function],
                "duration": Object {
                  "complex": 375,
                  "enteringScreen": 225,
                  "leavingScreen": 195,
                  "short": 250,
                  "shorter": 200,
                  "shortest": 150,
                  "standard": 300,
                },
                "easing": Object {
                  "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
                  "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
                  "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
                  "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
                },
                "getAutoHeightDuration": [Function],
              },
              "typography": Object {
                "body1": Object {
                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                  "fontSize": "1rem",
                  "fontWeight": 400,
                  "letterSpacing": "0.00938em",
                  "lineHeight": 1.5,
                },
                "body2": Object {
                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                  "fontSize": "0.875rem",
                  "fontWeight": 400,
                  "letterSpacing": "0.01071em",
                  "lineHeight": 1.43,
                },
                "button": Object {
                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                  "fontSize": "0.875rem",
                  "fontWeight": 500,
                  "letterSpacing": "0.02857em",
                  "lineHeight": 1.75,
                  "textTransform": "uppercase",
                },
                "caption": Object {
                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                  "fontSize": "0.75rem",
                  "fontWeight": 400,
                  "letterSpacing": "0.03333em",
                  "lineHeight": 1.66,
                },
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": 14,
                "fontWeightBold": 700,
                "fontWeightLight": 300,
                "fontWeightMedium": 500,
                "fontWeightRegular": 400,
                "h1": Object {
                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                  "fontSize": "6rem",
                  "fontWeight": 300,
                  "letterSpacing": "-0.01562em",
                  "lineHeight": 1.167,
                },
                "h2": Object {
                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                  "fontSize": "3.75rem",
                  "fontWeight": 300,
                  "letterSpacing": "-0.00833em",
                  "lineHeight": 1.2,
                },
                "h3": Object {
                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                  "fontSize": "3rem",
                  "fontWeight": 400,
                  "letterSpacing": "0em",
                  "lineHeight": 1.167,
                },
                "h4": Object {
                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                  "fontSize": "2.125rem",
                  "fontWeight": 400,
                  "letterSpacing": "0.00735em",
                  "lineHeight": 1.235,
                },
                "h5": Object {
                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                  "fontSize": "1.5rem",
                  "fontWeight": 400,
                  "letterSpacing": "0em",
                  "lineHeight": 1.334,
                },
                "h6": Object {
                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                  "fontSize": "1.25rem",
                  "fontWeight": 500,
                  "letterSpacing": "0.0075em",
                  "lineHeight": 1.6,
                },
                "htmlFontSize": 16,
                "overline": Object {
                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                  "fontSize": "0.75rem",
                  "fontWeight": 400,
                  "letterSpacing": "0.08333em",
                  "lineHeight": 2.66,
                  "textTransform": "uppercase",
                },
                "pxToRem": [Function],
                "round": [Function],
                "subtitle1": Object {
                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                  "fontSize": "1rem",
                  "fontWeight": 400,
                  "letterSpacing": "0.00938em",
                  "lineHeight": 1.75,
                },
                "subtitle2": Object {
                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                  "fontSize": "0.875rem",
                  "fontWeight": 500,
                  "letterSpacing": "0.00714em",
                  "lineHeight": 1.57,
                },
              },
              "zIndex": Object {
                "appBar": 1100,
                "drawer": 1200,
                "mobileStepper": 1000,
                "modal": 1300,
                "snackbar": 1400,
                "speedDial": 1050,
                "tooltip": 1500,
              },
            },
            "name": "MuiBackdrop",
          },
          "propTypes": Object {
            "classes": [Function],
            "innerRef": [Function],
          },
          "render": [Function],
          "useStyles": [Function],
        }
      }
      BackdropProps={
        Object {
          "transitionDuration": Object {
            "enter": 225,
            "exit": 195,
          },
        }
      }
      className="MuiDialog-root"
      closeAfterTransition={true}
      disableBackdropClick={true}
      disableEscapeKeyDown={true}
      open={false}
    />
  </ForwardRef(Dialog)>
</WithStyles(ForwardRef(Dialog))>
`;
