// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AddedAgents it renders a list of agents added to the pending allow access list 1`] = `
<WithTheme
  theme={
    Object {
      "breakpoints": Object {
        "between": [Function],
        "down": [Function],
        "keys": Array [
          "xs",
          "sm",
          "md",
          "lg",
          "xl",
        ],
        "only": [Function],
        "up": [Function],
        "values": Object {
          "lg": 1280,
          "md": 960,
          "sm": 600,
          "xl": 1920,
          "xs": 0,
        },
        "width": [Function],
      },
      "direction": "ltr",
      "iconSet": Object {
        "config": Object {
          "cssFiles": Array [
            "css/all.css",
          ],
          "fonts": Array [
            Object {
              "fontFace": "
font-family: 'Font Awesome 5 Free';
font-style: normal;
font-weight: 900;
font-display: block;",
              "fontsPath": "./webfonts",
              "licensePath": "./LICENSE.txt",
              "source": "fa-solid-900.eot",
              "sources": Array [
                Object {
                  "format": "embedded-opentype",
                  "path": "fa-solid-900.eot",
                  "urlAddition": "?#iefix",
                },
                Object {
                  "format": "woff2",
                  "path": "fa-solid-900.woff2",
                },
                Object {
                  "format": "woff",
                  "path": "fa-solid-900.woff",
                },
                Object {
                  "format": "truetype",
                  "path": "fa-solid-900.ttf",
                },
                Object {
                  "format": "svg",
                  "path": "fa-solid-900.svg",
                  "urlAddition": "#fontawesome",
                },
              ],
            },
          ],
          "label": "Font Awesome Solid",
          "name": "fontawesome-solid",
          "npmModule": "@fortawesome/fontawesome-free",
          "type": 0,
        },
        "iconColor": [Function],
        "styles": [Function],
      },
      "icons": Object {
        "config": Object {
          "cssFiles": Array [
            "css/all.css",
          ],
          "fonts": Array [
            Object {
              "fontFace": "
font-family: 'Font Awesome 5 Free';
font-style: normal;
font-weight: 900;
font-display: block;",
              "fontsPath": "./webfonts",
              "licensePath": "./LICENSE.txt",
              "source": "fa-solid-900.eot",
              "sources": Array [
                Object {
                  "format": "embedded-opentype",
                  "path": "fa-solid-900.eot",
                  "urlAddition": "?#iefix",
                },
                Object {
                  "format": "woff2",
                  "path": "fa-solid-900.woff2",
                },
                Object {
                  "format": "woff",
                  "path": "fa-solid-900.woff",
                },
                Object {
                  "format": "truetype",
                  "path": "fa-solid-900.ttf",
                },
                Object {
                  "format": "svg",
                  "path": "fa-solid-900.svg",
                  "urlAddition": "#fontawesome",
                },
              ],
            },
          ],
          "label": "Font Awesome Solid",
          "name": "fontawesome-solid",
          "npmModule": "@fortawesome/fontawesome-free",
          "type": 0,
        },
        "iconColor": [Function],
        "styles": [Function],
      },
      "label": "SDK Default",
      "licenses": Array [
        "fonts/Raleway/OFL.txt",
        "fonts/Roboto/LICENSE.txt",
      ],
      "localFonts": Object {
        "fonts/Raleway/Raleway-Bold.woff2": [Function],
        "fonts/Raleway/Raleway-Regular.woff2": [Function],
        "fonts/Roboto/Roboto-Bold.woff2": [Function],
        "fonts/Roboto/Roboto-Light.woff2": [Function],
        "fonts/Roboto/Roboto-Regular.woff2": [Function],
      },
      "mixins": Object {
        "gutters": [Function],
        "toolbar": Object {
          "@media (min-width:0px) and (orientation: landscape)": Object {
            "minHeight": 48,
          },
          "@media (min-width:600px)": Object {
            "minHeight": 64,
          },
          "minHeight": 56,
        },
      },
      "name": "sdk-default",
      "overrides": Object {},
      "palette": Object {
        "action": Object {
          "activatedOpacity": 0.12,
          "active": "rgba(0, 0, 0, 0.54)",
          "disabled": "rgba(0, 0, 0, 0.26)",
          "disabledBackground": "rgba(0, 0, 0, 0.12)",
          "disabledOpacity": 0.38,
          "focus": "rgba(0, 0, 0, 0.12)",
          "focusOpacity": 0.12,
          "hover": "rgba(0, 0, 0, 0.04)",
          "hoverOpacity": 0.04,
          "selected": "rgba(0, 0, 0, 0.08)",
          "selectedOpacity": 0.08,
        },
        "adjustAlpha": [Function],
        "augmentColor": [Function],
        "background": Object {
          "default": "#FFFFFF",
          "paper": "#fff",
        },
        "common": Object {
          "black": "#000",
          "white": "#fff",
        },
        "contrastThreshold": 3,
        "divider": "rgba(0, 0, 0, 0.12)",
        "error": Object {
          "contrastText": "#fff",
          "dark": "#d32f2f",
          "light": "#e57373",
          "main": "#f44336",
        },
        "getContrastText": [Function],
        "grey": Object {
          "100": "#f5f5f5",
          "200": "#eeeeee",
          "300": "#e0e0e0",
          "400": "#bdbdbd",
          "50": "#fafafa",
          "500": "#9e9e9e",
          "600": "#757575",
          "700": "#616161",
          "800": "#424242",
          "900": "#212121",
          "A100": "#d5d5d5",
          "A200": "#aaaaaa",
          "A400": "#303030",
          "A700": "#616161",
        },
        "info": Object {
          "contrastText": "#fff",
          "dark": "#1976d2",
          "light": "#64b5f6",
          "main": "#2196f3",
        },
        "primary": Object {
          "contrastText": "#fff",
          "dark": "rgb(86, 53, 178)",
          "light": "rgb(150, 112, 255)",
          "main": "#7C4DFF",
        },
        "secondary": Object {
          "contrastText": "rgba(0, 0, 0, 0.87)",
          "dark": "#083575",
          "light": "#01C9EA",
          "main": "#18A9E6",
        },
        "success": Object {
          "contrastText": "rgba(0, 0, 0, 0.87)",
          "dark": "#388e3c",
          "light": "#81c784",
          "main": "#4caf50",
        },
        "text": Object {
          "disabled": "rgba(0, 0, 0, 0.38)",
          "hint": "rgba(0, 0, 0, 0.38)",
          "primary": "rgba(0, 0, 0, 0.87)",
          "secondary": "rgba(0, 0, 0, 0.54)",
        },
        "tonalOffset": 0.2,
        "type": "light",
        "warning": Object {
          "contrastText": "rgba(0, 0, 0, 0.87)",
          "dark": "#f57c00",
          "light": "#ffb74d",
          "main": "#ff9800",
        },
      },
      "props": Object {},
      "shadows": Array [
        "none",
        "0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12)",
        "0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12)",
        "0px 3px 3px -2px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 1px 8px 0px rgba(0,0,0,0.12)",
        "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
        "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
        "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
        "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
        "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
        "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
        "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
        "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
        "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
        "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
        "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
        "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
        "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
        "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
        "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
        "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
        "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
        "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
        "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
        "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
        "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
      ],
      "shape": Object {
        "borderRadius": 4,
      },
      "spacing": [Function],
      "stylesheets": Array [
        "https://fonts.googleapis.com/css?family=Raleway:400,700|Roboto:300,400,700&display=swap",
      ],
      "transitions": Object {
        "create": [Function],
        "duration": Object {
          "complex": 375,
          "enteringScreen": 225,
          "leavingScreen": 195,
          "short": 250,
          "shorter": 200,
          "shortest": 150,
          "standard": 300,
        },
        "easing": Object {
          "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
          "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
          "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
          "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
        },
        "getAutoHeightDuration": [Function],
      },
      "typography": Object {
        "body": Object {
          "fontFamily": "\\"Roboto\\", sans-serif",
          "fontSize": "0.875rem",
          "fontWeight": 300,
          "letterSpacing": "0.01071em",
          "lineHeight": 1.43,
        },
        "body1": Object {
          "fontFamily": "\\"Raleway\\", \\"Roboto\\", sans-serif",
          "fontSize": "1rem",
          "fontWeight": 300,
          "letterSpacing": "0.00938em",
          "lineHeight": 1.5,
        },
        "body2": Object {
          "fontFamily": "\\"Roboto\\", sans-serif",
          "fontSize": "0.875rem",
          "fontWeight": 300,
          "letterSpacing": "0.01071em",
          "lineHeight": 1.43,
        },
        "button": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "0.875rem",
          "fontWeight": 400,
          "letterSpacing": "0.02857em",
          "lineHeight": 1.75,
          "textTransform": "uppercase",
        },
        "caption": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "0.75rem",
          "fontWeight": 400,
          "letterSpacing": "0.03333em",
          "lineHeight": 1.66,
        },
        "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
        "fontSize": 14,
        "fontWeightBold": 700,
        "fontWeightLight": 300,
        "fontWeightMedium": 400,
        "fontWeightRegular": 400,
        "h1": Object {
          "fontFamily": "\\"Raleway\\", \\"Roboto\\", sans-serif",
          "fontSize": "2.5rem",
          "fontWeight": 700,
          "letterSpacing": "-0.01562em",
          "lineHeight": 1,
        },
        "h2": Object {
          "fontFamily": "\\"Raleway\\", \\"Roboto\\", sans-serif",
          "fontSize": "2rem",
          "fontWeight": 300,
          "letterSpacing": "-0.00833em",
          "lineHeight": 1,
        },
        "h3": Object {
          "fontFamily": "\\"Roboto\\", sans-serif",
          "fontSize": "1.9rem",
          "fontWeight": 300,
          "letterSpacing": "0em",
          "lineHeight": 1,
        },
        "h4": Object {
          "fontFamily": "\\"Raleway\\", \\"Roboto\\", sans-serif",
          "fontSize": "1.25rem",
          "fontWeight": 700,
          "letterSpacing": "0.00735em",
          "lineHeight": 1,
          "textTransform": "uppercase",
        },
        "h5": Object {
          "fontFamily": "\\"Raleway\\", \\"Roboto\\", sans-serif",
          "fontSize": "1rem",
          "fontWeight": 400,
          "letterSpacing": "0em",
          "lineHeight": 1,
          "textTransform": "uppercase",
        },
        "h6": Object {
          "fontFamily": "\\"Roboto\\", sans-serif",
          "fontSize": "0.625rem",
          "fontWeight": 300,
          "letterSpacing": "0.0075em",
          "lineHeight": 1,
        },
        "heading": Object {
          "fontFamily": "\\"Raleway\\", \\"Roboto\\", sans-serif",
          "fontSize": "1rem",
          "fontWeight": 300,
          "letterSpacing": "0.00938em",
          "lineHeight": 1.5,
        },
        "htmlFontSize": 16,
        "overline": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "0.75rem",
          "fontWeight": 400,
          "letterSpacing": "0.08333em",
          "lineHeight": 2.66,
          "textTransform": "uppercase",
        },
        "pxToRem": [Function],
        "round": [Function],
        "subtitle1": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "1rem",
          "fontWeight": 400,
          "letterSpacing": "0.00938em",
          "lineHeight": 1.75,
        },
        "subtitle2": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "0.875rem",
          "fontWeight": 400,
          "letterSpacing": "0.00714em",
          "lineHeight": 1.57,
        },
      },
      "zIndex": Object {
        "appBar": 1100,
        "drawer": 1200,
        "mobileStepper": 1000,
        "modal": 1300,
        "snackbar": 1400,
        "speedDial": 1050,
        "tooltip": 1500,
      },
      Symbol(mui.nested): false,
    }
  }
>
  <ThemeProvider
    theme={
      Object {
        "breakpoints": Object {
          "between": [Function],
          "down": [Function],
          "keys": Array [
            "xs",
            "sm",
            "md",
            "lg",
            "xl",
          ],
          "only": [Function],
          "up": [Function],
          "values": Object {
            "lg": 1280,
            "md": 960,
            "sm": 600,
            "xl": 1920,
            "xs": 0,
          },
          "width": [Function],
        },
        "direction": "ltr",
        "iconSet": Object {
          "config": Object {
            "cssFiles": Array [
              "css/all.css",
            ],
            "fonts": Array [
              Object {
                "fontFace": "
font-family: 'Font Awesome 5 Free';
font-style: normal;
font-weight: 900;
font-display: block;",
                "fontsPath": "./webfonts",
                "licensePath": "./LICENSE.txt",
                "source": "fa-solid-900.eot",
                "sources": Array [
                  Object {
                    "format": "embedded-opentype",
                    "path": "fa-solid-900.eot",
                    "urlAddition": "?#iefix",
                  },
                  Object {
                    "format": "woff2",
                    "path": "fa-solid-900.woff2",
                  },
                  Object {
                    "format": "woff",
                    "path": "fa-solid-900.woff",
                  },
                  Object {
                    "format": "truetype",
                    "path": "fa-solid-900.ttf",
                  },
                  Object {
                    "format": "svg",
                    "path": "fa-solid-900.svg",
                    "urlAddition": "#fontawesome",
                  },
                ],
              },
            ],
            "label": "Font Awesome Solid",
            "name": "fontawesome-solid",
            "npmModule": "@fortawesome/fontawesome-free",
            "type": 0,
          },
          "iconColor": [Function],
          "styles": [Function],
        },
        "icons": Object {
          "config": Object {
            "cssFiles": Array [
              "css/all.css",
            ],
            "fonts": Array [
              Object {
                "fontFace": "
font-family: 'Font Awesome 5 Free';
font-style: normal;
font-weight: 900;
font-display: block;",
                "fontsPath": "./webfonts",
                "licensePath": "./LICENSE.txt",
                "source": "fa-solid-900.eot",
                "sources": Array [
                  Object {
                    "format": "embedded-opentype",
                    "path": "fa-solid-900.eot",
                    "urlAddition": "?#iefix",
                  },
                  Object {
                    "format": "woff2",
                    "path": "fa-solid-900.woff2",
                  },
                  Object {
                    "format": "woff",
                    "path": "fa-solid-900.woff",
                  },
                  Object {
                    "format": "truetype",
                    "path": "fa-solid-900.ttf",
                  },
                  Object {
                    "format": "svg",
                    "path": "fa-solid-900.svg",
                    "urlAddition": "#fontawesome",
                  },
                ],
              },
            ],
            "label": "Font Awesome Solid",
            "name": "fontawesome-solid",
            "npmModule": "@fortawesome/fontawesome-free",
            "type": 0,
          },
          "iconColor": [Function],
          "styles": [Function],
        },
        "label": "SDK Default",
        "licenses": Array [
          "fonts/Raleway/OFL.txt",
          "fonts/Roboto/LICENSE.txt",
        ],
        "localFonts": Object {
          "fonts/Raleway/Raleway-Bold.woff2": [Function],
          "fonts/Raleway/Raleway-Regular.woff2": [Function],
          "fonts/Roboto/Roboto-Bold.woff2": [Function],
          "fonts/Roboto/Roboto-Light.woff2": [Function],
          "fonts/Roboto/Roboto-Regular.woff2": [Function],
        },
        "mixins": Object {
          "gutters": [Function],
          "toolbar": Object {
            "@media (min-width:0px) and (orientation: landscape)": Object {
              "minHeight": 48,
            },
            "@media (min-width:600px)": Object {
              "minHeight": 64,
            },
            "minHeight": 56,
          },
        },
        "name": "sdk-default",
        "overrides": Object {},
        "palette": Object {
          "action": Object {
            "activatedOpacity": 0.12,
            "active": "rgba(0, 0, 0, 0.54)",
            "disabled": "rgba(0, 0, 0, 0.26)",
            "disabledBackground": "rgba(0, 0, 0, 0.12)",
            "disabledOpacity": 0.38,
            "focus": "rgba(0, 0, 0, 0.12)",
            "focusOpacity": 0.12,
            "hover": "rgba(0, 0, 0, 0.04)",
            "hoverOpacity": 0.04,
            "selected": "rgba(0, 0, 0, 0.08)",
            "selectedOpacity": 0.08,
          },
          "adjustAlpha": [Function],
          "augmentColor": [Function],
          "background": Object {
            "default": "#FFFFFF",
            "paper": "#fff",
          },
          "common": Object {
            "black": "#000",
            "white": "#fff",
          },
          "contrastThreshold": 3,
          "divider": "rgba(0, 0, 0, 0.12)",
          "error": Object {
            "contrastText": "#fff",
            "dark": "#d32f2f",
            "light": "#e57373",
            "main": "#f44336",
          },
          "getContrastText": [Function],
          "grey": Object {
            "100": "#f5f5f5",
            "200": "#eeeeee",
            "300": "#e0e0e0",
            "400": "#bdbdbd",
            "50": "#fafafa",
            "500": "#9e9e9e",
            "600": "#757575",
            "700": "#616161",
            "800": "#424242",
            "900": "#212121",
            "A100": "#d5d5d5",
            "A200": "#aaaaaa",
            "A400": "#303030",
            "A700": "#616161",
          },
          "info": Object {
            "contrastText": "#fff",
            "dark": "#1976d2",
            "light": "#64b5f6",
            "main": "#2196f3",
          },
          "primary": Object {
            "contrastText": "#fff",
            "dark": "rgb(86, 53, 178)",
            "light": "rgb(150, 112, 255)",
            "main": "#7C4DFF",
          },
          "secondary": Object {
            "contrastText": "rgba(0, 0, 0, 0.87)",
            "dark": "#083575",
            "light": "#01C9EA",
            "main": "#18A9E6",
          },
          "success": Object {
            "contrastText": "rgba(0, 0, 0, 0.87)",
            "dark": "#388e3c",
            "light": "#81c784",
            "main": "#4caf50",
          },
          "text": Object {
            "disabled": "rgba(0, 0, 0, 0.38)",
            "hint": "rgba(0, 0, 0, 0.38)",
            "primary": "rgba(0, 0, 0, 0.87)",
            "secondary": "rgba(0, 0, 0, 0.54)",
          },
          "tonalOffset": 0.2,
          "type": "light",
          "warning": Object {
            "contrastText": "rgba(0, 0, 0, 0.87)",
            "dark": "#f57c00",
            "light": "#ffb74d",
            "main": "#ff9800",
          },
        },
        "props": Object {},
        "shadows": Array [
          "none",
          "0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12)",
          "0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12)",
          "0px 3px 3px -2px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 1px 8px 0px rgba(0,0,0,0.12)",
          "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
          "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
          "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
          "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
          "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
          "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
          "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
          "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
          "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
          "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
          "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
          "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
          "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
          "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
          "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
          "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
          "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
          "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
          "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
          "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
          "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
        ],
        "shape": Object {
          "borderRadius": 4,
        },
        "spacing": [Function],
        "stylesheets": Array [
          "https://fonts.googleapis.com/css?family=Raleway:400,700|Roboto:300,400,700&display=swap",
        ],
        "transitions": Object {
          "create": [Function],
          "duration": Object {
            "complex": 375,
            "enteringScreen": 225,
            "leavingScreen": 195,
            "short": 250,
            "shorter": 200,
            "shortest": 150,
            "standard": 300,
          },
          "easing": Object {
            "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
            "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
            "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
            "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
          },
          "getAutoHeightDuration": [Function],
        },
        "typography": Object {
          "body": Object {
            "fontFamily": "\\"Roboto\\", sans-serif",
            "fontSize": "0.875rem",
            "fontWeight": 300,
            "letterSpacing": "0.01071em",
            "lineHeight": 1.43,
          },
          "body1": Object {
            "fontFamily": "\\"Raleway\\", \\"Roboto\\", sans-serif",
            "fontSize": "1rem",
            "fontWeight": 300,
            "letterSpacing": "0.00938em",
            "lineHeight": 1.5,
          },
          "body2": Object {
            "fontFamily": "\\"Roboto\\", sans-serif",
            "fontSize": "0.875rem",
            "fontWeight": 300,
            "letterSpacing": "0.01071em",
            "lineHeight": 1.43,
          },
          "button": Object {
            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
            "fontSize": "0.875rem",
            "fontWeight": 400,
            "letterSpacing": "0.02857em",
            "lineHeight": 1.75,
            "textTransform": "uppercase",
          },
          "caption": Object {
            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
            "fontSize": "0.75rem",
            "fontWeight": 400,
            "letterSpacing": "0.03333em",
            "lineHeight": 1.66,
          },
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": 14,
          "fontWeightBold": 700,
          "fontWeightLight": 300,
          "fontWeightMedium": 400,
          "fontWeightRegular": 400,
          "h1": Object {
            "fontFamily": "\\"Raleway\\", \\"Roboto\\", sans-serif",
            "fontSize": "2.5rem",
            "fontWeight": 700,
            "letterSpacing": "-0.01562em",
            "lineHeight": 1,
          },
          "h2": Object {
            "fontFamily": "\\"Raleway\\", \\"Roboto\\", sans-serif",
            "fontSize": "2rem",
            "fontWeight": 300,
            "letterSpacing": "-0.00833em",
            "lineHeight": 1,
          },
          "h3": Object {
            "fontFamily": "\\"Roboto\\", sans-serif",
            "fontSize": "1.9rem",
            "fontWeight": 300,
            "letterSpacing": "0em",
            "lineHeight": 1,
          },
          "h4": Object {
            "fontFamily": "\\"Raleway\\", \\"Roboto\\", sans-serif",
            "fontSize": "1.25rem",
            "fontWeight": 700,
            "letterSpacing": "0.00735em",
            "lineHeight": 1,
            "textTransform": "uppercase",
          },
          "h5": Object {
            "fontFamily": "\\"Raleway\\", \\"Roboto\\", sans-serif",
            "fontSize": "1rem",
            "fontWeight": 400,
            "letterSpacing": "0em",
            "lineHeight": 1,
            "textTransform": "uppercase",
          },
          "h6": Object {
            "fontFamily": "\\"Roboto\\", sans-serif",
            "fontSize": "0.625rem",
            "fontWeight": 300,
            "letterSpacing": "0.0075em",
            "lineHeight": 1,
          },
          "heading": Object {
            "fontFamily": "\\"Raleway\\", \\"Roboto\\", sans-serif",
            "fontSize": "1rem",
            "fontWeight": 300,
            "letterSpacing": "0.00938em",
            "lineHeight": 1.5,
          },
          "htmlFontSize": 16,
          "overline": Object {
            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
            "fontSize": "0.75rem",
            "fontWeight": 400,
            "letterSpacing": "0.08333em",
            "lineHeight": 2.66,
            "textTransform": "uppercase",
          },
          "pxToRem": [Function],
          "round": [Function],
          "subtitle1": Object {
            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
            "fontSize": "1rem",
            "fontWeight": 400,
            "letterSpacing": "0.00938em",
            "lineHeight": 1.75,
          },
          "subtitle2": Object {
            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
            "fontSize": "0.875rem",
            "fontWeight": 400,
            "letterSpacing": "0.00714em",
            "lineHeight": 1.57,
          },
        },
        "zIndex": Object {
          "appBar": 1100,
          "drawer": 1200,
          "mobileStepper": 1000,
          "modal": 1300,
          "snackbar": 1400,
          "speedDial": 1050,
          "tooltip": 1500,
        },
        Symbol(mui.nested): false,
      }
    }
  >
    <AddedAgents
      addedAgents={
        Array [
          Object {
            "avatar": "avatar",
            "name": "name",
            "webId": "webId",
          },
        ]
      }
      classes={
        Object {
          "avatar": "avatar",
          "detailText": "detailText",
          "listItem": "listItem",
        }
      }
      setAddedAgents={[MockFunction]}
      setThirdPartyPermissions={[MockFunction]}
      thirdPartyPermissions={Array []}
    >
      <WithStyles(ForwardRef(List))>
        <ForwardRef(List)
          classes={
            Object {
              "dense": "MuiList-dense",
              "padding": "MuiList-padding",
              "root": "MuiList-root",
              "subheader": "MuiList-subheader",
            }
          }
        >
          <ul
            className="MuiList-root MuiList-padding"
          >
            <WithStyles(ForwardRef(ListItem))
              className="listItem"
              key="webId"
            >
              <ForwardRef(ListItem)
                className="listItem"
                classes={
                  Object {
                    "alignItemsFlexStart": "MuiListItem-alignItemsFlexStart",
                    "button": "MuiListItem-button",
                    "container": "MuiListItem-container",
                    "dense": "MuiListItem-dense",
                    "disabled": "Mui-disabled",
                    "divider": "MuiListItem-divider",
                    "focusVisible": "Mui-focusVisible",
                    "gutters": "MuiListItem-gutters",
                    "root": "MuiListItem-root",
                    "secondaryAction": "MuiListItem-secondaryAction",
                    "selected": "Mui-selected",
                  }
                }
              >
                <li
                  className="MuiListItem-root listItem MuiListItem-gutters"
                  disabled={false}
                >
                  <WithStyles(ForwardRef(Avatar))
                    alt="name"
                    className="avatar"
                    key=".0"
                    src="avatar"
                  >
                    <ForwardRef(Avatar)
                      alt="name"
                      className="avatar"
                      classes={
                        Object {
                          "circle": "MuiAvatar-circle",
                          "colorDefault": "MuiAvatar-colorDefault",
                          "fallback": "MuiAvatar-fallback",
                          "img": "MuiAvatar-img",
                          "root": "MuiAvatar-root",
                          "rounded": "MuiAvatar-rounded",
                          "square": "MuiAvatar-square",
                        }
                      }
                      src="avatar"
                    >
                      <div
                        className="MuiAvatar-root MuiAvatar-circle avatar"
                      >
                        <img
                          alt="name"
                          className="MuiAvatar-img"
                          src="avatar"
                        />
                      </div>
                    </ForwardRef(Avatar)>
                  </WithStyles(ForwardRef(Avatar))>
                  <WithStyles(ForwardRef(Typography))
                    className="detailText"
                    key=".1"
                  >
                    <ForwardRef(Typography)
                      className="detailText"
                      classes={
                        Object {
                          "alignCenter": "MuiTypography-alignCenter",
                          "alignJustify": "MuiTypography-alignJustify",
                          "alignLeft": "MuiTypography-alignLeft",
                          "alignRight": "MuiTypography-alignRight",
                          "body1": "MuiTypography-body1",
                          "body2": "MuiTypography-body2",
                          "button": "MuiTypography-button",
                          "caption": "MuiTypography-caption",
                          "colorError": "MuiTypography-colorError",
                          "colorInherit": "MuiTypography-colorInherit",
                          "colorPrimary": "MuiTypography-colorPrimary",
                          "colorSecondary": "MuiTypography-colorSecondary",
                          "colorTextPrimary": "MuiTypography-colorTextPrimary",
                          "colorTextSecondary": "MuiTypography-colorTextSecondary",
                          "displayBlock": "MuiTypography-displayBlock",
                          "displayInline": "MuiTypography-displayInline",
                          "gutterBottom": "MuiTypography-gutterBottom",
                          "h1": "MuiTypography-h1",
                          "h2": "MuiTypography-h2",
                          "h3": "MuiTypography-h3",
                          "h4": "MuiTypography-h4",
                          "h5": "MuiTypography-h5",
                          "h6": "MuiTypography-h6",
                          "noWrap": "MuiTypography-noWrap",
                          "overline": "MuiTypography-overline",
                          "paragraph": "MuiTypography-paragraph",
                          "root": "MuiTypography-root",
                          "srOnly": "MuiTypography-srOnly",
                          "subtitle1": "MuiTypography-subtitle1",
                          "subtitle2": "MuiTypography-subtitle2",
                        }
                      }
                    >
                      <p
                        className="MuiTypography-root detailText MuiTypography-body1"
                      >
                        name
                      </p>
                    </ForwardRef(Typography)>
                  </WithStyles(ForwardRef(Typography))>
                  <PermissionsForm
                    key=".$webId"
                    onSave={[Function]}
                    permission={
                      Object {
                        "acl": Object {
                          "append": false,
                          "control": false,
                          "read": false,
                          "write": false,
                        },
                        "alias": "No Control",
                      }
                    }
                    warnOnSubmit={false}
                  >
                    <section>
                      <WithStyles(ForwardRef(Select))
                        id="demo-simple-select"
                        labelId="demo-simple-select-label"
                        onChange={[Function]}
                        value="No access"
                      >
                        <ForwardRef(Select)
                          classes={
                            Object {
                              "disabled": "Mui-disabled",
                              "filled": "MuiSelect-filled",
                              "icon": "MuiSelect-icon",
                              "iconFilled": "MuiSelect-iconFilled",
                              "iconOpen": "MuiSelect-iconOpen",
                              "iconOutlined": "MuiSelect-iconOutlined",
                              "nativeInput": "MuiSelect-nativeInput",
                              "outlined": "MuiSelect-outlined",
                              "root": "MuiSelect-root",
                              "select": "MuiSelect-select",
                              "selectMenu": "MuiSelect-selectMenu",
                            }
                          }
                          id="demo-simple-select"
                          labelId="demo-simple-select-label"
                          onChange={[Function]}
                          value="No access"
                        >
                          <WithStyles(ForwardRef(Input))
                            inputComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "propTypes": Object {
                                  "IconComponent": [Function],
                                  "MenuProps": [Function],
                                  "SelectDisplayProps": [Function],
                                  "aria-label": [Function],
                                  "autoFocus": [Function],
                                  "autoWidth": [Function],
                                  "children": [Function],
                                  "className": [Function],
                                  "classes": [Function],
                                  "defaultValue": [Function],
                                  "disabled": [Function],
                                  "displayEmpty": [Function],
                                  "inputRef": [Function],
                                  "labelId": [Function],
                                  "multiple": [Function],
                                  "name": [Function],
                                  "onBlur": [Function],
                                  "onChange": [Function],
                                  "onClose": [Function],
                                  "onFocus": [Function],
                                  "onOpen": [Function],
                                  "open": [Function],
                                  "readOnly": [Function],
                                  "renderValue": [Function],
                                  "tabIndex": [Function],
                                  "type": [Function],
                                  "value": [Function],
                                  "variant": [Function],
                                },
                                "render": [Function],
                              }
                            }
                            inputProps={
                              Object {
                                "IconComponent": Object {
                                  "$$typeof": Symbol(react.memo),
                                  "compare": null,
                                  "type": Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "render": [Function],
                                  },
                                },
                                "MenuProps": undefined,
                                "SelectDisplayProps": Object {
                                  "id": "demo-simple-select",
                                },
                                "autoWidth": false,
                                "children": Array [
                                  <WithStyles(ForwardRef(MenuItem))
                                    value="No access"
                                  >
                                    No access
                                  </WithStyles(ForwardRef(MenuItem))>,
                                  <WithStyles(ForwardRef(MenuItem))
                                    value="View"
                                  >
                                    View
                                  </WithStyles(ForwardRef(MenuItem))>,
                                  <WithStyles(ForwardRef(MenuItem))
                                    value="Edit"
                                  >
                                    Edit
                                  </WithStyles(ForwardRef(MenuItem))>,
                                  <WithStyles(ForwardRef(MenuItem))
                                    value="Append"
                                  >
                                    Append
                                  </WithStyles(ForwardRef(MenuItem))>,
                                  <WithStyles(ForwardRef(MenuItem))
                                    value="Control"
                                  >
                                    Control
                                  </WithStyles(ForwardRef(MenuItem))>,
                                ],
                                "classes": Object {
                                  "disabled": "Mui-disabled",
                                  "filled": "MuiSelect-filled",
                                  "icon": "MuiSelect-icon",
                                  "iconFilled": "MuiSelect-iconFilled",
                                  "iconOpen": "MuiSelect-iconOpen",
                                  "iconOutlined": "MuiSelect-iconOutlined",
                                  "nativeInput": "MuiSelect-nativeInput",
                                  "outlined": "MuiSelect-outlined",
                                  "root": "MuiSelect-root",
                                  "select": "MuiSelect-select",
                                  "selectMenu": "MuiSelect-selectMenu",
                                },
                                "displayEmpty": false,
                                "labelId": "demo-simple-select-label",
                                "multiple": false,
                                "onClose": undefined,
                                "onOpen": undefined,
                                "open": undefined,
                                "renderValue": undefined,
                                "type": undefined,
                                "variant": "standard",
                              }
                            }
                            onChange={[Function]}
                            value="No access"
                          >
                            <ForwardRef(Input)
                              classes={
                                Object {
                                  "colorSecondary": "MuiInput-colorSecondary",
                                  "disabled": "Mui-disabled",
                                  "error": "Mui-error",
                                  "focused": "Mui-focused",
                                  "formControl": "MuiInput-formControl",
                                  "fullWidth": "MuiInput-fullWidth",
                                  "input": "MuiInput-input",
                                  "inputMarginDense": "MuiInput-inputMarginDense",
                                  "inputMultiline": "MuiInput-inputMultiline",
                                  "inputTypeSearch": "MuiInput-inputTypeSearch",
                                  "marginDense": "MuiInput-marginDense",
                                  "multiline": "MuiInput-multiline",
                                  "root": "MuiInput-root",
                                  "underline": "MuiInput-underline",
                                }
                              }
                              inputComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "propTypes": Object {
                                    "IconComponent": [Function],
                                    "MenuProps": [Function],
                                    "SelectDisplayProps": [Function],
                                    "aria-label": [Function],
                                    "autoFocus": [Function],
                                    "autoWidth": [Function],
                                    "children": [Function],
                                    "className": [Function],
                                    "classes": [Function],
                                    "defaultValue": [Function],
                                    "disabled": [Function],
                                    "displayEmpty": [Function],
                                    "inputRef": [Function],
                                    "labelId": [Function],
                                    "multiple": [Function],
                                    "name": [Function],
                                    "onBlur": [Function],
                                    "onChange": [Function],
                                    "onClose": [Function],
                                    "onFocus": [Function],
                                    "onOpen": [Function],
                                    "open": [Function],
                                    "readOnly": [Function],
                                    "renderValue": [Function],
                                    "tabIndex": [Function],
                                    "type": [Function],
                                    "value": [Function],
                                    "variant": [Function],
                                  },
                                  "render": [Function],
                                }
                              }
                              inputProps={
                                Object {
                                  "IconComponent": Object {
                                    "$$typeof": Symbol(react.memo),
                                    "compare": null,
                                    "type": Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "render": [Function],
                                    },
                                  },
                                  "MenuProps": undefined,
                                  "SelectDisplayProps": Object {
                                    "id": "demo-simple-select",
                                  },
                                  "autoWidth": false,
                                  "children": Array [
                                    <WithStyles(ForwardRef(MenuItem))
                                      value="No access"
                                    >
                                      No access
                                    </WithStyles(ForwardRef(MenuItem))>,
                                    <WithStyles(ForwardRef(MenuItem))
                                      value="View"
                                    >
                                      View
                                    </WithStyles(ForwardRef(MenuItem))>,
                                    <WithStyles(ForwardRef(MenuItem))
                                      value="Edit"
                                    >
                                      Edit
                                    </WithStyles(ForwardRef(MenuItem))>,
                                    <WithStyles(ForwardRef(MenuItem))
                                      value="Append"
                                    >
                                      Append
                                    </WithStyles(ForwardRef(MenuItem))>,
                                    <WithStyles(ForwardRef(MenuItem))
                                      value="Control"
                                    >
                                      Control
                                    </WithStyles(ForwardRef(MenuItem))>,
                                  ],
                                  "classes": Object {
                                    "disabled": "Mui-disabled",
                                    "filled": "MuiSelect-filled",
                                    "icon": "MuiSelect-icon",
                                    "iconFilled": "MuiSelect-iconFilled",
                                    "iconOpen": "MuiSelect-iconOpen",
                                    "iconOutlined": "MuiSelect-iconOutlined",
                                    "nativeInput": "MuiSelect-nativeInput",
                                    "outlined": "MuiSelect-outlined",
                                    "root": "MuiSelect-root",
                                    "select": "MuiSelect-select",
                                    "selectMenu": "MuiSelect-selectMenu",
                                  },
                                  "displayEmpty": false,
                                  "labelId": "demo-simple-select-label",
                                  "multiple": false,
                                  "onClose": undefined,
                                  "onOpen": undefined,
                                  "open": undefined,
                                  "renderValue": undefined,
                                  "type": undefined,
                                  "variant": "standard",
                                }
                              }
                              onChange={[Function]}
                              value="No access"
                            >
                              <WithStyles(ForwardRef(InputBase))
                                classes={
                                  Object {
                                    "colorSecondary": "MuiInput-colorSecondary",
                                    "disabled": "Mui-disabled",
                                    "error": "Mui-error",
                                    "focused": "Mui-focused",
                                    "formControl": "MuiInput-formControl",
                                    "fullWidth": "MuiInput-fullWidth",
                                    "input": "MuiInput-input",
                                    "inputMarginDense": "MuiInput-inputMarginDense",
                                    "inputMultiline": "MuiInput-inputMultiline",
                                    "inputTypeSearch": "MuiInput-inputTypeSearch",
                                    "marginDense": "MuiInput-marginDense",
                                    "multiline": "MuiInput-multiline",
                                    "root": "MuiInput-root MuiInput-underline",
                                    "underline": null,
                                  }
                                }
                                fullWidth={false}
                                inputComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "propTypes": Object {
                                      "IconComponent": [Function],
                                      "MenuProps": [Function],
                                      "SelectDisplayProps": [Function],
                                      "aria-label": [Function],
                                      "autoFocus": [Function],
                                      "autoWidth": [Function],
                                      "children": [Function],
                                      "className": [Function],
                                      "classes": [Function],
                                      "defaultValue": [Function],
                                      "disabled": [Function],
                                      "displayEmpty": [Function],
                                      "inputRef": [Function],
                                      "labelId": [Function],
                                      "multiple": [Function],
                                      "name": [Function],
                                      "onBlur": [Function],
                                      "onChange": [Function],
                                      "onClose": [Function],
                                      "onFocus": [Function],
                                      "onOpen": [Function],
                                      "open": [Function],
                                      "readOnly": [Function],
                                      "renderValue": [Function],
                                      "tabIndex": [Function],
                                      "type": [Function],
                                      "value": [Function],
                                      "variant": [Function],
                                    },
                                    "render": [Function],
                                  }
                                }
                                inputProps={
                                  Object {
                                    "IconComponent": Object {
                                      "$$typeof": Symbol(react.memo),
                                      "compare": null,
                                      "type": Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "render": [Function],
                                      },
                                    },
                                    "MenuProps": undefined,
                                    "SelectDisplayProps": Object {
                                      "id": "demo-simple-select",
                                    },
                                    "autoWidth": false,
                                    "children": Array [
                                      <WithStyles(ForwardRef(MenuItem))
                                        value="No access"
                                      >
                                        No access
                                      </WithStyles(ForwardRef(MenuItem))>,
                                      <WithStyles(ForwardRef(MenuItem))
                                        value="View"
                                      >
                                        View
                                      </WithStyles(ForwardRef(MenuItem))>,
                                      <WithStyles(ForwardRef(MenuItem))
                                        value="Edit"
                                      >
                                        Edit
                                      </WithStyles(ForwardRef(MenuItem))>,
                                      <WithStyles(ForwardRef(MenuItem))
                                        value="Append"
                                      >
                                        Append
                                      </WithStyles(ForwardRef(MenuItem))>,
                                      <WithStyles(ForwardRef(MenuItem))
                                        value="Control"
                                      >
                                        Control
                                      </WithStyles(ForwardRef(MenuItem))>,
                                    ],
                                    "classes": Object {
                                      "disabled": "Mui-disabled",
                                      "filled": "MuiSelect-filled",
                                      "icon": "MuiSelect-icon",
                                      "iconFilled": "MuiSelect-iconFilled",
                                      "iconOpen": "MuiSelect-iconOpen",
                                      "iconOutlined": "MuiSelect-iconOutlined",
                                      "nativeInput": "MuiSelect-nativeInput",
                                      "outlined": "MuiSelect-outlined",
                                      "root": "MuiSelect-root",
                                      "select": "MuiSelect-select",
                                      "selectMenu": "MuiSelect-selectMenu",
                                    },
                                    "displayEmpty": false,
                                    "labelId": "demo-simple-select-label",
                                    "multiple": false,
                                    "onClose": undefined,
                                    "onOpen": undefined,
                                    "open": undefined,
                                    "renderValue": undefined,
                                    "type": undefined,
                                    "variant": "standard",
                                  }
                                }
                                multiline={false}
                                onChange={[Function]}
                                type="text"
                                value="No access"
                              >
                                <ForwardRef(InputBase)
                                  classes={
                                    Object {
                                      "adornedEnd": "MuiInputBase-adornedEnd",
                                      "adornedStart": "MuiInputBase-adornedStart",
                                      "colorSecondary": "MuiInputBase-colorSecondary MuiInput-colorSecondary",
                                      "disabled": "Mui-disabled Mui-disabled",
                                      "error": "Mui-error Mui-error",
                                      "focused": "Mui-focused Mui-focused",
                                      "formControl": "MuiInputBase-formControl MuiInput-formControl",
                                      "fullWidth": "MuiInputBase-fullWidth MuiInput-fullWidth",
                                      "input": "MuiInputBase-input MuiInput-input",
                                      "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
                                      "inputAdornedStart": "MuiInputBase-inputAdornedStart",
                                      "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                                      "inputMarginDense": "MuiInputBase-inputMarginDense MuiInput-inputMarginDense",
                                      "inputMultiline": "MuiInputBase-inputMultiline MuiInput-inputMultiline",
                                      "inputTypeSearch": "MuiInputBase-inputTypeSearch MuiInput-inputTypeSearch",
                                      "marginDense": "MuiInputBase-marginDense MuiInput-marginDense",
                                      "multiline": "MuiInputBase-multiline MuiInput-multiline",
                                      "root": "MuiInputBase-root MuiInput-root MuiInput-underline",
                                    }
                                  }
                                  fullWidth={false}
                                  inputComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "propTypes": Object {
                                        "IconComponent": [Function],
                                        "MenuProps": [Function],
                                        "SelectDisplayProps": [Function],
                                        "aria-label": [Function],
                                        "autoFocus": [Function],
                                        "autoWidth": [Function],
                                        "children": [Function],
                                        "className": [Function],
                                        "classes": [Function],
                                        "defaultValue": [Function],
                                        "disabled": [Function],
                                        "displayEmpty": [Function],
                                        "inputRef": [Function],
                                        "labelId": [Function],
                                        "multiple": [Function],
                                        "name": [Function],
                                        "onBlur": [Function],
                                        "onChange": [Function],
                                        "onClose": [Function],
                                        "onFocus": [Function],
                                        "onOpen": [Function],
                                        "open": [Function],
                                        "readOnly": [Function],
                                        "renderValue": [Function],
                                        "tabIndex": [Function],
                                        "type": [Function],
                                        "value": [Function],
                                        "variant": [Function],
                                      },
                                      "render": [Function],
                                    }
                                  }
                                  inputProps={
                                    Object {
                                      "IconComponent": Object {
                                        "$$typeof": Symbol(react.memo),
                                        "compare": null,
                                        "type": Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "render": [Function],
                                        },
                                      },
                                      "MenuProps": undefined,
                                      "SelectDisplayProps": Object {
                                        "id": "demo-simple-select",
                                      },
                                      "autoWidth": false,
                                      "children": Array [
                                        <WithStyles(ForwardRef(MenuItem))
                                          value="No access"
                                        >
                                          No access
                                        </WithStyles(ForwardRef(MenuItem))>,
                                        <WithStyles(ForwardRef(MenuItem))
                                          value="View"
                                        >
                                          View
                                        </WithStyles(ForwardRef(MenuItem))>,
                                        <WithStyles(ForwardRef(MenuItem))
                                          value="Edit"
                                        >
                                          Edit
                                        </WithStyles(ForwardRef(MenuItem))>,
                                        <WithStyles(ForwardRef(MenuItem))
                                          value="Append"
                                        >
                                          Append
                                        </WithStyles(ForwardRef(MenuItem))>,
                                        <WithStyles(ForwardRef(MenuItem))
                                          value="Control"
                                        >
                                          Control
                                        </WithStyles(ForwardRef(MenuItem))>,
                                      ],
                                      "classes": Object {
                                        "disabled": "Mui-disabled",
                                        "filled": "MuiSelect-filled",
                                        "icon": "MuiSelect-icon",
                                        "iconFilled": "MuiSelect-iconFilled",
                                        "iconOpen": "MuiSelect-iconOpen",
                                        "iconOutlined": "MuiSelect-iconOutlined",
                                        "nativeInput": "MuiSelect-nativeInput",
                                        "outlined": "MuiSelect-outlined",
                                        "root": "MuiSelect-root",
                                        "select": "MuiSelect-select",
                                        "selectMenu": "MuiSelect-selectMenu",
                                      },
                                      "displayEmpty": false,
                                      "labelId": "demo-simple-select-label",
                                      "multiple": false,
                                      "onClose": undefined,
                                      "onOpen": undefined,
                                      "open": undefined,
                                      "renderValue": undefined,
                                      "type": undefined,
                                      "variant": "standard",
                                    }
                                  }
                                  multiline={false}
                                  onChange={[Function]}
                                  type="text"
                                  value="No access"
                                >
                                  <div
                                    className="MuiInputBase-root MuiInput-root MuiInput-underline"
                                    onClick={[Function]}
                                  >
                                    <ForwardRef(SelectInput)
                                      IconComponent={
                                        Object {
                                          "$$typeof": Symbol(react.memo),
                                          "compare": null,
                                          "type": Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "render": [Function],
                                          },
                                        }
                                      }
                                      SelectDisplayProps={
                                        Object {
                                          "id": "demo-simple-select",
                                        }
                                      }
                                      autoWidth={false}
                                      className="MuiInputBase-input MuiInput-input"
                                      classes={
                                        Object {
                                          "disabled": "Mui-disabled",
                                          "filled": "MuiSelect-filled",
                                          "icon": "MuiSelect-icon",
                                          "iconFilled": "MuiSelect-iconFilled",
                                          "iconOpen": "MuiSelect-iconOpen",
                                          "iconOutlined": "MuiSelect-iconOutlined",
                                          "nativeInput": "MuiSelect-nativeInput",
                                          "outlined": "MuiSelect-outlined",
                                          "root": "MuiSelect-root",
                                          "select": "MuiSelect-select",
                                          "selectMenu": "MuiSelect-selectMenu",
                                        }
                                      }
                                      displayEmpty={false}
                                      inputRef={[Function]}
                                      labelId="demo-simple-select-label"
                                      multiple={false}
                                      onAnimationStart={[Function]}
                                      onBlur={[Function]}
                                      onChange={[Function]}
                                      onFocus={[Function]}
                                      value="No access"
                                      variant="standard"
                                    >
                                      <div
                                        aria-haspopup="listbox"
                                        aria-labelledby="demo-simple-select-label demo-simple-select"
                                        className="MuiSelect-root MuiSelect-select MuiSelect-selectMenu MuiInputBase-input MuiInput-input"
                                        id="demo-simple-select"
                                        onBlur={[Function]}
                                        onFocus={[Function]}
                                        onKeyDown={[Function]}
                                        onMouseDown={[Function]}
                                        role="button"
                                        tabIndex={0}
                                      >
                                        No access
                                      </div>
                                      <input
                                        aria-hidden={true}
                                        className="MuiSelect-nativeInput"
                                        onAnimationStart={[Function]}
                                        onChange={[Function]}
                                        tabIndex={-1}
                                        value="No access"
                                      />
                                      <ForwardRef(ArrowDropDownIcon)
                                        className="MuiSelect-icon"
                                      >
                                        <WithStyles(ForwardRef(SvgIcon))
                                          className="MuiSelect-icon"
                                        >
                                          <ForwardRef(SvgIcon)
                                            className="MuiSelect-icon"
                                            classes={
                                              Object {
                                                "colorAction": "MuiSvgIcon-colorAction",
                                                "colorDisabled": "MuiSvgIcon-colorDisabled",
                                                "colorError": "MuiSvgIcon-colorError",
                                                "colorPrimary": "MuiSvgIcon-colorPrimary",
                                                "colorSecondary": "MuiSvgIcon-colorSecondary",
                                                "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                                "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                                "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                                "root": "MuiSvgIcon-root",
                                              }
                                            }
                                          >
                                            <svg
                                              aria-hidden={true}
                                              className="MuiSvgIcon-root MuiSelect-icon"
                                              focusable="false"
                                              viewBox="0 0 24 24"
                                            >
                                              <path
                                                d="M7 10l5 5 5-5z"
                                              />
                                            </svg>
                                          </ForwardRef(SvgIcon)>
                                        </WithStyles(ForwardRef(SvgIcon))>
                                      </ForwardRef(ArrowDropDownIcon)>
                                      <WithStyles(ForwardRef(Menu))
                                        MenuListProps={
                                          Object {
                                            "aria-labelledby": "demo-simple-select-label",
                                            "disableListWrap": true,
                                            "role": "listbox",
                                          }
                                        }
                                        PaperProps={
                                          Object {
                                            "style": Object {
                                              "minWidth": undefined,
                                            },
                                          }
                                        }
                                        anchorEl={
                                          <div
                                            aria-haspopup="listbox"
                                            aria-labelledby="demo-simple-select-label demo-simple-select"
                                            class="MuiSelect-root MuiSelect-select MuiSelect-selectMenu MuiInputBase-input MuiInput-input"
                                            id="demo-simple-select"
                                            role="button"
                                            tabindex="0"
                                          >
                                            No access
                                          </div>
                                        }
                                        id="menu-"
                                        onClose={[Function]}
                                        open={false}
                                      >
                                        <ForwardRef(Menu)
                                          MenuListProps={
                                            Object {
                                              "aria-labelledby": "demo-simple-select-label",
                                              "disableListWrap": true,
                                              "role": "listbox",
                                            }
                                          }
                                          PaperProps={
                                            Object {
                                              "style": Object {
                                                "minWidth": undefined,
                                              },
                                            }
                                          }
                                          anchorEl={
                                            <div
                                              aria-haspopup="listbox"
                                              aria-labelledby="demo-simple-select-label demo-simple-select"
                                              class="MuiSelect-root MuiSelect-select MuiSelect-selectMenu MuiInputBase-input MuiInput-input"
                                              id="demo-simple-select"
                                              role="button"
                                              tabindex="0"
                                            >
                                              No access
                                            </div>
                                          }
                                          classes={
                                            Object {
                                              "list": "MuiMenu-list",
                                              "paper": "MuiMenu-paper",
                                            }
                                          }
                                          id="menu-"
                                          onClose={[Function]}
                                          open={false}
                                        >
                                          <WithStyles(ForwardRef(Popover))
                                            PaperProps={
                                              Object {
                                                "classes": Object {
                                                  "root": "MuiMenu-paper",
                                                },
                                                "style": Object {
                                                  "minWidth": undefined,
                                                },
                                              }
                                            }
                                            anchorEl={
                                              <div
                                                aria-haspopup="listbox"
                                                aria-labelledby="demo-simple-select-label demo-simple-select"
                                                class="MuiSelect-root MuiSelect-select MuiSelect-selectMenu MuiInputBase-input MuiInput-input"
                                                id="demo-simple-select"
                                                role="button"
                                                tabindex="0"
                                              >
                                                No access
                                              </div>
                                            }
                                            anchorOrigin={
                                              Object {
                                                "horizontal": "left",
                                                "vertical": "top",
                                              }
                                            }
                                            getContentAnchorEl={[Function]}
                                            id="menu-"
                                            onClose={[Function]}
                                            onEntering={[Function]}
                                            open={false}
                                            transformOrigin={
                                              Object {
                                                "horizontal": "left",
                                                "vertical": "top",
                                              }
                                            }
                                            transitionDuration="auto"
                                          >
                                            <ForwardRef(Popover)
                                              PaperProps={
                                                Object {
                                                  "classes": Object {
                                                    "root": "MuiMenu-paper",
                                                  },
                                                  "style": Object {
                                                    "minWidth": undefined,
                                                  },
                                                }
                                              }
                                              anchorEl={
                                                <div
                                                  aria-haspopup="listbox"
                                                  aria-labelledby="demo-simple-select-label demo-simple-select"
                                                  class="MuiSelect-root MuiSelect-select MuiSelect-selectMenu MuiInputBase-input MuiInput-input"
                                                  id="demo-simple-select"
                                                  role="button"
                                                  tabindex="0"
                                                >
                                                  No access
                                                </div>
                                              }
                                              anchorOrigin={
                                                Object {
                                                  "horizontal": "left",
                                                  "vertical": "top",
                                                }
                                              }
                                              classes={
                                                Object {
                                                  "paper": "MuiPopover-paper",
                                                  "root": "MuiPopover-root",
                                                }
                                              }
                                              getContentAnchorEl={[Function]}
                                              id="menu-"
                                              onClose={[Function]}
                                              onEntering={[Function]}
                                              open={false}
                                              transformOrigin={
                                                Object {
                                                  "horizontal": "left",
                                                  "vertical": "top",
                                                }
                                              }
                                              transitionDuration="auto"
                                            >
                                              <ForwardRef(Modal)
                                                BackdropProps={
                                                  Object {
                                                    "invisible": true,
                                                  }
                                                }
                                                className="MuiPopover-root"
                                                container={<body />}
                                                id="menu-"
                                                onClose={[Function]}
                                                open={false}
                                              />
                                            </ForwardRef(Popover)>
                                          </WithStyles(ForwardRef(Popover))>
                                        </ForwardRef(Menu)>
                                      </WithStyles(ForwardRef(Menu))>
                                    </ForwardRef(SelectInput)>
                                  </div>
                                </ForwardRef(InputBase)>
                              </WithStyles(ForwardRef(InputBase))>
                            </ForwardRef(Input)>
                          </WithStyles(ForwardRef(Input))>
                        </ForwardRef(Select)>
                      </WithStyles(ForwardRef(Select))>
                    </section>
                  </PermissionsForm>
                </li>
              </ForwardRef(ListItem)>
            </WithStyles(ForwardRef(ListItem))>
          </ul>
        </ForwardRef(List)>
      </WithStyles(ForwardRef(List))>
    </AddedAgents>
  </ThemeProvider>
</WithTheme>
`;

exports[`NoThirdPartyPermissions it renders a no 3rd party permissions component 1`] = `
<WithTheme
  theme={
    Object {
      "breakpoints": Object {
        "between": [Function],
        "down": [Function],
        "keys": Array [
          "xs",
          "sm",
          "md",
          "lg",
          "xl",
        ],
        "only": [Function],
        "up": [Function],
        "values": Object {
          "lg": 1280,
          "md": 960,
          "sm": 600,
          "xl": 1920,
          "xs": 0,
        },
        "width": [Function],
      },
      "direction": "ltr",
      "iconSet": Object {
        "config": Object {
          "cssFiles": Array [
            "css/all.css",
          ],
          "fonts": Array [
            Object {
              "fontFace": "
font-family: 'Font Awesome 5 Free';
font-style: normal;
font-weight: 900;
font-display: block;",
              "fontsPath": "./webfonts",
              "licensePath": "./LICENSE.txt",
              "source": "fa-solid-900.eot",
              "sources": Array [
                Object {
                  "format": "embedded-opentype",
                  "path": "fa-solid-900.eot",
                  "urlAddition": "?#iefix",
                },
                Object {
                  "format": "woff2",
                  "path": "fa-solid-900.woff2",
                },
                Object {
                  "format": "woff",
                  "path": "fa-solid-900.woff",
                },
                Object {
                  "format": "truetype",
                  "path": "fa-solid-900.ttf",
                },
                Object {
                  "format": "svg",
                  "path": "fa-solid-900.svg",
                  "urlAddition": "#fontawesome",
                },
              ],
            },
          ],
          "label": "Font Awesome Solid",
          "name": "fontawesome-solid",
          "npmModule": "@fortawesome/fontawesome-free",
          "type": 0,
        },
        "iconColor": [Function],
        "styles": [Function],
      },
      "icons": Object {
        "config": Object {
          "cssFiles": Array [
            "css/all.css",
          ],
          "fonts": Array [
            Object {
              "fontFace": "
font-family: 'Font Awesome 5 Free';
font-style: normal;
font-weight: 900;
font-display: block;",
              "fontsPath": "./webfonts",
              "licensePath": "./LICENSE.txt",
              "source": "fa-solid-900.eot",
              "sources": Array [
                Object {
                  "format": "embedded-opentype",
                  "path": "fa-solid-900.eot",
                  "urlAddition": "?#iefix",
                },
                Object {
                  "format": "woff2",
                  "path": "fa-solid-900.woff2",
                },
                Object {
                  "format": "woff",
                  "path": "fa-solid-900.woff",
                },
                Object {
                  "format": "truetype",
                  "path": "fa-solid-900.ttf",
                },
                Object {
                  "format": "svg",
                  "path": "fa-solid-900.svg",
                  "urlAddition": "#fontawesome",
                },
              ],
            },
          ],
          "label": "Font Awesome Solid",
          "name": "fontawesome-solid",
          "npmModule": "@fortawesome/fontawesome-free",
          "type": 0,
        },
        "iconColor": [Function],
        "styles": [Function],
      },
      "label": "SDK Default",
      "licenses": Array [
        "fonts/Raleway/OFL.txt",
        "fonts/Roboto/LICENSE.txt",
      ],
      "localFonts": Object {
        "fonts/Raleway/Raleway-Bold.woff2": [Function],
        "fonts/Raleway/Raleway-Regular.woff2": [Function],
        "fonts/Roboto/Roboto-Bold.woff2": [Function],
        "fonts/Roboto/Roboto-Light.woff2": [Function],
        "fonts/Roboto/Roboto-Regular.woff2": [Function],
      },
      "mixins": Object {
        "gutters": [Function],
        "toolbar": Object {
          "@media (min-width:0px) and (orientation: landscape)": Object {
            "minHeight": 48,
          },
          "@media (min-width:600px)": Object {
            "minHeight": 64,
          },
          "minHeight": 56,
        },
      },
      "name": "sdk-default",
      "overrides": Object {},
      "palette": Object {
        "action": Object {
          "activatedOpacity": 0.12,
          "active": "rgba(0, 0, 0, 0.54)",
          "disabled": "rgba(0, 0, 0, 0.26)",
          "disabledBackground": "rgba(0, 0, 0, 0.12)",
          "disabledOpacity": 0.38,
          "focus": "rgba(0, 0, 0, 0.12)",
          "focusOpacity": 0.12,
          "hover": "rgba(0, 0, 0, 0.04)",
          "hoverOpacity": 0.04,
          "selected": "rgba(0, 0, 0, 0.08)",
          "selectedOpacity": 0.08,
        },
        "adjustAlpha": [Function],
        "augmentColor": [Function],
        "background": Object {
          "default": "#FFFFFF",
          "paper": "#fff",
        },
        "common": Object {
          "black": "#000",
          "white": "#fff",
        },
        "contrastThreshold": 3,
        "divider": "rgba(0, 0, 0, 0.12)",
        "error": Object {
          "contrastText": "#fff",
          "dark": "#d32f2f",
          "light": "#e57373",
          "main": "#f44336",
        },
        "getContrastText": [Function],
        "grey": Object {
          "100": "#f5f5f5",
          "200": "#eeeeee",
          "300": "#e0e0e0",
          "400": "#bdbdbd",
          "50": "#fafafa",
          "500": "#9e9e9e",
          "600": "#757575",
          "700": "#616161",
          "800": "#424242",
          "900": "#212121",
          "A100": "#d5d5d5",
          "A200": "#aaaaaa",
          "A400": "#303030",
          "A700": "#616161",
        },
        "info": Object {
          "contrastText": "#fff",
          "dark": "#1976d2",
          "light": "#64b5f6",
          "main": "#2196f3",
        },
        "primary": Object {
          "contrastText": "#fff",
          "dark": "rgb(86, 53, 178)",
          "light": "rgb(150, 112, 255)",
          "main": "#7C4DFF",
        },
        "secondary": Object {
          "contrastText": "rgba(0, 0, 0, 0.87)",
          "dark": "#083575",
          "light": "#01C9EA",
          "main": "#18A9E6",
        },
        "success": Object {
          "contrastText": "rgba(0, 0, 0, 0.87)",
          "dark": "#388e3c",
          "light": "#81c784",
          "main": "#4caf50",
        },
        "text": Object {
          "disabled": "rgba(0, 0, 0, 0.38)",
          "hint": "rgba(0, 0, 0, 0.38)",
          "primary": "rgba(0, 0, 0, 0.87)",
          "secondary": "rgba(0, 0, 0, 0.54)",
        },
        "tonalOffset": 0.2,
        "type": "light",
        "warning": Object {
          "contrastText": "rgba(0, 0, 0, 0.87)",
          "dark": "#f57c00",
          "light": "#ffb74d",
          "main": "#ff9800",
        },
      },
      "props": Object {},
      "shadows": Array [
        "none",
        "0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12)",
        "0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12)",
        "0px 3px 3px -2px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 1px 8px 0px rgba(0,0,0,0.12)",
        "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
        "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
        "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
        "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
        "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
        "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
        "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
        "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
        "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
        "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
        "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
        "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
        "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
        "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
        "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
        "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
        "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
        "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
        "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
        "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
        "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
      ],
      "shape": Object {
        "borderRadius": 4,
      },
      "spacing": [Function],
      "stylesheets": Array [
        "https://fonts.googleapis.com/css?family=Raleway:400,700|Roboto:300,400,700&display=swap",
      ],
      "transitions": Object {
        "create": [Function],
        "duration": Object {
          "complex": 375,
          "enteringScreen": 225,
          "leavingScreen": 195,
          "short": 250,
          "shorter": 200,
          "shortest": 150,
          "standard": 300,
        },
        "easing": Object {
          "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
          "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
          "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
          "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
        },
        "getAutoHeightDuration": [Function],
      },
      "typography": Object {
        "body": Object {
          "fontFamily": "\\"Roboto\\", sans-serif",
          "fontSize": "0.875rem",
          "fontWeight": 300,
          "letterSpacing": "0.01071em",
          "lineHeight": 1.43,
        },
        "body1": Object {
          "fontFamily": "\\"Raleway\\", \\"Roboto\\", sans-serif",
          "fontSize": "1rem",
          "fontWeight": 300,
          "letterSpacing": "0.00938em",
          "lineHeight": 1.5,
        },
        "body2": Object {
          "fontFamily": "\\"Roboto\\", sans-serif",
          "fontSize": "0.875rem",
          "fontWeight": 300,
          "letterSpacing": "0.01071em",
          "lineHeight": 1.43,
        },
        "button": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "0.875rem",
          "fontWeight": 400,
          "letterSpacing": "0.02857em",
          "lineHeight": 1.75,
          "textTransform": "uppercase",
        },
        "caption": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "0.75rem",
          "fontWeight": 400,
          "letterSpacing": "0.03333em",
          "lineHeight": 1.66,
        },
        "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
        "fontSize": 14,
        "fontWeightBold": 700,
        "fontWeightLight": 300,
        "fontWeightMedium": 400,
        "fontWeightRegular": 400,
        "h1": Object {
          "fontFamily": "\\"Raleway\\", \\"Roboto\\", sans-serif",
          "fontSize": "2.5rem",
          "fontWeight": 700,
          "letterSpacing": "-0.01562em",
          "lineHeight": 1,
        },
        "h2": Object {
          "fontFamily": "\\"Raleway\\", \\"Roboto\\", sans-serif",
          "fontSize": "2rem",
          "fontWeight": 300,
          "letterSpacing": "-0.00833em",
          "lineHeight": 1,
        },
        "h3": Object {
          "fontFamily": "\\"Roboto\\", sans-serif",
          "fontSize": "1.9rem",
          "fontWeight": 300,
          "letterSpacing": "0em",
          "lineHeight": 1,
        },
        "h4": Object {
          "fontFamily": "\\"Raleway\\", \\"Roboto\\", sans-serif",
          "fontSize": "1.25rem",
          "fontWeight": 700,
          "letterSpacing": "0.00735em",
          "lineHeight": 1,
          "textTransform": "uppercase",
        },
        "h5": Object {
          "fontFamily": "\\"Raleway\\", \\"Roboto\\", sans-serif",
          "fontSize": "1rem",
          "fontWeight": 400,
          "letterSpacing": "0em",
          "lineHeight": 1,
          "textTransform": "uppercase",
        },
        "h6": Object {
          "fontFamily": "\\"Roboto\\", sans-serif",
          "fontSize": "0.625rem",
          "fontWeight": 300,
          "letterSpacing": "0.0075em",
          "lineHeight": 1,
        },
        "heading": Object {
          "fontFamily": "\\"Raleway\\", \\"Roboto\\", sans-serif",
          "fontSize": "1rem",
          "fontWeight": 300,
          "letterSpacing": "0.00938em",
          "lineHeight": 1.5,
        },
        "htmlFontSize": 16,
        "overline": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "0.75rem",
          "fontWeight": 400,
          "letterSpacing": "0.08333em",
          "lineHeight": 2.66,
          "textTransform": "uppercase",
        },
        "pxToRem": [Function],
        "round": [Function],
        "subtitle1": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "1rem",
          "fontWeight": 400,
          "letterSpacing": "0.00938em",
          "lineHeight": 1.75,
        },
        "subtitle2": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "0.875rem",
          "fontWeight": 400,
          "letterSpacing": "0.00714em",
          "lineHeight": 1.57,
        },
      },
      "zIndex": Object {
        "appBar": 1100,
        "drawer": 1200,
        "mobileStepper": 1000,
        "modal": 1300,
        "snackbar": 1400,
        "speedDial": 1050,
        "tooltip": 1500,
      },
      Symbol(mui.nested): false,
    }
  }
>
  <ThemeProvider
    theme={
      Object {
        "breakpoints": Object {
          "between": [Function],
          "down": [Function],
          "keys": Array [
            "xs",
            "sm",
            "md",
            "lg",
            "xl",
          ],
          "only": [Function],
          "up": [Function],
          "values": Object {
            "lg": 1280,
            "md": 960,
            "sm": 600,
            "xl": 1920,
            "xs": 0,
          },
          "width": [Function],
        },
        "direction": "ltr",
        "iconSet": Object {
          "config": Object {
            "cssFiles": Array [
              "css/all.css",
            ],
            "fonts": Array [
              Object {
                "fontFace": "
font-family: 'Font Awesome 5 Free';
font-style: normal;
font-weight: 900;
font-display: block;",
                "fontsPath": "./webfonts",
                "licensePath": "./LICENSE.txt",
                "source": "fa-solid-900.eot",
                "sources": Array [
                  Object {
                    "format": "embedded-opentype",
                    "path": "fa-solid-900.eot",
                    "urlAddition": "?#iefix",
                  },
                  Object {
                    "format": "woff2",
                    "path": "fa-solid-900.woff2",
                  },
                  Object {
                    "format": "woff",
                    "path": "fa-solid-900.woff",
                  },
                  Object {
                    "format": "truetype",
                    "path": "fa-solid-900.ttf",
                  },
                  Object {
                    "format": "svg",
                    "path": "fa-solid-900.svg",
                    "urlAddition": "#fontawesome",
                  },
                ],
              },
            ],
            "label": "Font Awesome Solid",
            "name": "fontawesome-solid",
            "npmModule": "@fortawesome/fontawesome-free",
            "type": 0,
          },
          "iconColor": [Function],
          "styles": [Function],
        },
        "icons": Object {
          "config": Object {
            "cssFiles": Array [
              "css/all.css",
            ],
            "fonts": Array [
              Object {
                "fontFace": "
font-family: 'Font Awesome 5 Free';
font-style: normal;
font-weight: 900;
font-display: block;",
                "fontsPath": "./webfonts",
                "licensePath": "./LICENSE.txt",
                "source": "fa-solid-900.eot",
                "sources": Array [
                  Object {
                    "format": "embedded-opentype",
                    "path": "fa-solid-900.eot",
                    "urlAddition": "?#iefix",
                  },
                  Object {
                    "format": "woff2",
                    "path": "fa-solid-900.woff2",
                  },
                  Object {
                    "format": "woff",
                    "path": "fa-solid-900.woff",
                  },
                  Object {
                    "format": "truetype",
                    "path": "fa-solid-900.ttf",
                  },
                  Object {
                    "format": "svg",
                    "path": "fa-solid-900.svg",
                    "urlAddition": "#fontawesome",
                  },
                ],
              },
            ],
            "label": "Font Awesome Solid",
            "name": "fontawesome-solid",
            "npmModule": "@fortawesome/fontawesome-free",
            "type": 0,
          },
          "iconColor": [Function],
          "styles": [Function],
        },
        "label": "SDK Default",
        "licenses": Array [
          "fonts/Raleway/OFL.txt",
          "fonts/Roboto/LICENSE.txt",
        ],
        "localFonts": Object {
          "fonts/Raleway/Raleway-Bold.woff2": [Function],
          "fonts/Raleway/Raleway-Regular.woff2": [Function],
          "fonts/Roboto/Roboto-Bold.woff2": [Function],
          "fonts/Roboto/Roboto-Light.woff2": [Function],
          "fonts/Roboto/Roboto-Regular.woff2": [Function],
        },
        "mixins": Object {
          "gutters": [Function],
          "toolbar": Object {
            "@media (min-width:0px) and (orientation: landscape)": Object {
              "minHeight": 48,
            },
            "@media (min-width:600px)": Object {
              "minHeight": 64,
            },
            "minHeight": 56,
          },
        },
        "name": "sdk-default",
        "overrides": Object {},
        "palette": Object {
          "action": Object {
            "activatedOpacity": 0.12,
            "active": "rgba(0, 0, 0, 0.54)",
            "disabled": "rgba(0, 0, 0, 0.26)",
            "disabledBackground": "rgba(0, 0, 0, 0.12)",
            "disabledOpacity": 0.38,
            "focus": "rgba(0, 0, 0, 0.12)",
            "focusOpacity": 0.12,
            "hover": "rgba(0, 0, 0, 0.04)",
            "hoverOpacity": 0.04,
            "selected": "rgba(0, 0, 0, 0.08)",
            "selectedOpacity": 0.08,
          },
          "adjustAlpha": [Function],
          "augmentColor": [Function],
          "background": Object {
            "default": "#FFFFFF",
            "paper": "#fff",
          },
          "common": Object {
            "black": "#000",
            "white": "#fff",
          },
          "contrastThreshold": 3,
          "divider": "rgba(0, 0, 0, 0.12)",
          "error": Object {
            "contrastText": "#fff",
            "dark": "#d32f2f",
            "light": "#e57373",
            "main": "#f44336",
          },
          "getContrastText": [Function],
          "grey": Object {
            "100": "#f5f5f5",
            "200": "#eeeeee",
            "300": "#e0e0e0",
            "400": "#bdbdbd",
            "50": "#fafafa",
            "500": "#9e9e9e",
            "600": "#757575",
            "700": "#616161",
            "800": "#424242",
            "900": "#212121",
            "A100": "#d5d5d5",
            "A200": "#aaaaaa",
            "A400": "#303030",
            "A700": "#616161",
          },
          "info": Object {
            "contrastText": "#fff",
            "dark": "#1976d2",
            "light": "#64b5f6",
            "main": "#2196f3",
          },
          "primary": Object {
            "contrastText": "#fff",
            "dark": "rgb(86, 53, 178)",
            "light": "rgb(150, 112, 255)",
            "main": "#7C4DFF",
          },
          "secondary": Object {
            "contrastText": "rgba(0, 0, 0, 0.87)",
            "dark": "#083575",
            "light": "#01C9EA",
            "main": "#18A9E6",
          },
          "success": Object {
            "contrastText": "rgba(0, 0, 0, 0.87)",
            "dark": "#388e3c",
            "light": "#81c784",
            "main": "#4caf50",
          },
          "text": Object {
            "disabled": "rgba(0, 0, 0, 0.38)",
            "hint": "rgba(0, 0, 0, 0.38)",
            "primary": "rgba(0, 0, 0, 0.87)",
            "secondary": "rgba(0, 0, 0, 0.54)",
          },
          "tonalOffset": 0.2,
          "type": "light",
          "warning": Object {
            "contrastText": "rgba(0, 0, 0, 0.87)",
            "dark": "#f57c00",
            "light": "#ffb74d",
            "main": "#ff9800",
          },
        },
        "props": Object {},
        "shadows": Array [
          "none",
          "0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12)",
          "0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12)",
          "0px 3px 3px -2px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 1px 8px 0px rgba(0,0,0,0.12)",
          "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
          "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
          "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
          "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
          "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
          "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
          "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
          "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
          "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
          "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
          "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
          "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
          "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
          "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
          "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
          "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
          "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
          "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
          "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
          "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
          "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
        ],
        "shape": Object {
          "borderRadius": 4,
        },
        "spacing": [Function],
        "stylesheets": Array [
          "https://fonts.googleapis.com/css?family=Raleway:400,700|Roboto:300,400,700&display=swap",
        ],
        "transitions": Object {
          "create": [Function],
          "duration": Object {
            "complex": 375,
            "enteringScreen": 225,
            "leavingScreen": 195,
            "short": 250,
            "shorter": 200,
            "shortest": 150,
            "standard": 300,
          },
          "easing": Object {
            "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
            "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
            "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
            "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
          },
          "getAutoHeightDuration": [Function],
        },
        "typography": Object {
          "body": Object {
            "fontFamily": "\\"Roboto\\", sans-serif",
            "fontSize": "0.875rem",
            "fontWeight": 300,
            "letterSpacing": "0.01071em",
            "lineHeight": 1.43,
          },
          "body1": Object {
            "fontFamily": "\\"Raleway\\", \\"Roboto\\", sans-serif",
            "fontSize": "1rem",
            "fontWeight": 300,
            "letterSpacing": "0.00938em",
            "lineHeight": 1.5,
          },
          "body2": Object {
            "fontFamily": "\\"Roboto\\", sans-serif",
            "fontSize": "0.875rem",
            "fontWeight": 300,
            "letterSpacing": "0.01071em",
            "lineHeight": 1.43,
          },
          "button": Object {
            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
            "fontSize": "0.875rem",
            "fontWeight": 400,
            "letterSpacing": "0.02857em",
            "lineHeight": 1.75,
            "textTransform": "uppercase",
          },
          "caption": Object {
            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
            "fontSize": "0.75rem",
            "fontWeight": 400,
            "letterSpacing": "0.03333em",
            "lineHeight": 1.66,
          },
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": 14,
          "fontWeightBold": 700,
          "fontWeightLight": 300,
          "fontWeightMedium": 400,
          "fontWeightRegular": 400,
          "h1": Object {
            "fontFamily": "\\"Raleway\\", \\"Roboto\\", sans-serif",
            "fontSize": "2.5rem",
            "fontWeight": 700,
            "letterSpacing": "-0.01562em",
            "lineHeight": 1,
          },
          "h2": Object {
            "fontFamily": "\\"Raleway\\", \\"Roboto\\", sans-serif",
            "fontSize": "2rem",
            "fontWeight": 300,
            "letterSpacing": "-0.00833em",
            "lineHeight": 1,
          },
          "h3": Object {
            "fontFamily": "\\"Roboto\\", sans-serif",
            "fontSize": "1.9rem",
            "fontWeight": 300,
            "letterSpacing": "0em",
            "lineHeight": 1,
          },
          "h4": Object {
            "fontFamily": "\\"Raleway\\", \\"Roboto\\", sans-serif",
            "fontSize": "1.25rem",
            "fontWeight": 700,
            "letterSpacing": "0.00735em",
            "lineHeight": 1,
            "textTransform": "uppercase",
          },
          "h5": Object {
            "fontFamily": "\\"Raleway\\", \\"Roboto\\", sans-serif",
            "fontSize": "1rem",
            "fontWeight": 400,
            "letterSpacing": "0em",
            "lineHeight": 1,
            "textTransform": "uppercase",
          },
          "h6": Object {
            "fontFamily": "\\"Roboto\\", sans-serif",
            "fontSize": "0.625rem",
            "fontWeight": 300,
            "letterSpacing": "0.0075em",
            "lineHeight": 1,
          },
          "heading": Object {
            "fontFamily": "\\"Raleway\\", \\"Roboto\\", sans-serif",
            "fontSize": "1rem",
            "fontWeight": 300,
            "letterSpacing": "0.00938em",
            "lineHeight": 1.5,
          },
          "htmlFontSize": 16,
          "overline": Object {
            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
            "fontSize": "0.75rem",
            "fontWeight": 400,
            "letterSpacing": "0.08333em",
            "lineHeight": 2.66,
            "textTransform": "uppercase",
          },
          "pxToRem": [Function],
          "round": [Function],
          "subtitle1": Object {
            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
            "fontSize": "1rem",
            "fontWeight": 400,
            "letterSpacing": "0.00938em",
            "lineHeight": 1.75,
          },
          "subtitle2": Object {
            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
            "fontSize": "0.875rem",
            "fontWeight": 400,
            "letterSpacing": "0.00714em",
            "lineHeight": 1.57,
          },
        },
        "zIndex": Object {
          "appBar": 1100,
          "drawer": 1200,
          "mobileStepper": 1000,
          "modal": 1300,
          "snackbar": 1400,
          "speedDial": 1050,
          "tooltip": 1500,
        },
        Symbol(mui.nested): false,
      }
    }
  >
    <NoThirdPartyPermissions
      classes={
        Object {
          "centeredSection": "centeredSection",
          "detailText": "detailText",
          "listItem": "listItem",
        }
      }
    >
      <section
        className="centeredSection"
      >
        <WithStyles(ForwardRef(List))>
          <ForwardRef(List)
            classes={
              Object {
                "dense": "MuiList-dense",
                "padding": "MuiList-padding",
                "root": "MuiList-root",
                "subheader": "MuiList-subheader",
              }
            }
          >
            <ul
              className="MuiList-root MuiList-padding"
            >
              <WithStyles(ForwardRef(ListItem))
                className="listItem"
                key="0"
              >
                <ForwardRef(ListItem)
                  className="listItem"
                  classes={
                    Object {
                      "alignItemsFlexStart": "MuiListItem-alignItemsFlexStart",
                      "button": "MuiListItem-button",
                      "container": "MuiListItem-container",
                      "dense": "MuiListItem-dense",
                      "disabled": "Mui-disabled",
                      "divider": "MuiListItem-divider",
                      "focusVisible": "Mui-focusVisible",
                      "gutters": "MuiListItem-gutters",
                      "root": "MuiListItem-root",
                      "secondaryAction": "MuiListItem-secondaryAction",
                      "selected": "Mui-selected",
                    }
                  }
                >
                  <li
                    className="MuiListItem-root listItem MuiListItem-gutters"
                    disabled={false}
                  >
                    <WithStyles(ForwardRef(ListItemIcon))
                      key=".0"
                    >
                      <ForwardRef(ListItemIcon)
                        classes={
                          Object {
                            "alignItemsFlexStart": "MuiListItemIcon-alignItemsFlexStart",
                            "root": "MuiListItemIcon-root",
                          }
                        }
                      >
                        <div
                          className="MuiListItemIcon-root"
                        >
                          <ForwardRef>
                            <WithStyles(ForwardRef(SvgIcon))>
                              <ForwardRef(SvgIcon)
                                classes={
                                  Object {
                                    "colorAction": "MuiSvgIcon-colorAction",
                                    "colorDisabled": "MuiSvgIcon-colorDisabled",
                                    "colorError": "MuiSvgIcon-colorError",
                                    "colorPrimary": "MuiSvgIcon-colorPrimary",
                                    "colorSecondary": "MuiSvgIcon-colorSecondary",
                                    "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                    "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                    "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                    "root": "MuiSvgIcon-root",
                                  }
                                }
                              >
                                <svg
                                  aria-hidden={true}
                                  className="MuiSvgIcon-root"
                                  focusable="false"
                                  viewBox="0 0 24 24"
                                >
                                  <path
                                    d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"
                                  />
                                </svg>
                              </ForwardRef(SvgIcon)>
                            </WithStyles(ForwardRef(SvgIcon))>
                          </ForwardRef>
                          People
                        </div>
                      </ForwardRef(ListItemIcon)>
                    </WithStyles(ForwardRef(ListItemIcon))>
                  </li>
                </ForwardRef(ListItem)>
              </WithStyles(ForwardRef(ListItem))>
              <WithStyles(ForwardRef(ListItem))
                className="listItem"
                key="1"
              >
                <ForwardRef(ListItem)
                  className="listItem"
                  classes={
                    Object {
                      "alignItemsFlexStart": "MuiListItem-alignItemsFlexStart",
                      "button": "MuiListItem-button",
                      "container": "MuiListItem-container",
                      "dense": "MuiListItem-dense",
                      "disabled": "Mui-disabled",
                      "divider": "MuiListItem-divider",
                      "focusVisible": "Mui-focusVisible",
                      "gutters": "MuiListItem-gutters",
                      "root": "MuiListItem-root",
                      "secondaryAction": "MuiListItem-secondaryAction",
                      "selected": "Mui-selected",
                    }
                  }
                >
                  <li
                    className="MuiListItem-root listItem MuiListItem-gutters"
                    disabled={false}
                  >
                    <WithStyles(ForwardRef(Typography))
                      className="detailText"
                      key=".0"
                    >
                      <ForwardRef(Typography)
                        className="detailText"
                        classes={
                          Object {
                            "alignCenter": "MuiTypography-alignCenter",
                            "alignJustify": "MuiTypography-alignJustify",
                            "alignLeft": "MuiTypography-alignLeft",
                            "alignRight": "MuiTypography-alignRight",
                            "body1": "MuiTypography-body1",
                            "body2": "MuiTypography-body2",
                            "button": "MuiTypography-button",
                            "caption": "MuiTypography-caption",
                            "colorError": "MuiTypography-colorError",
                            "colorInherit": "MuiTypography-colorInherit",
                            "colorPrimary": "MuiTypography-colorPrimary",
                            "colorSecondary": "MuiTypography-colorSecondary",
                            "colorTextPrimary": "MuiTypography-colorTextPrimary",
                            "colorTextSecondary": "MuiTypography-colorTextSecondary",
                            "displayBlock": "MuiTypography-displayBlock",
                            "displayInline": "MuiTypography-displayInline",
                            "gutterBottom": "MuiTypography-gutterBottom",
                            "h1": "MuiTypography-h1",
                            "h2": "MuiTypography-h2",
                            "h3": "MuiTypography-h3",
                            "h4": "MuiTypography-h4",
                            "h5": "MuiTypography-h5",
                            "h6": "MuiTypography-h6",
                            "noWrap": "MuiTypography-noWrap",
                            "overline": "MuiTypography-overline",
                            "paragraph": "MuiTypography-paragraph",
                            "root": "MuiTypography-root",
                            "srOnly": "MuiTypography-srOnly",
                            "subtitle1": "MuiTypography-subtitle1",
                            "subtitle2": "MuiTypography-subtitle2",
                          }
                        }
                      >
                        <p
                          className="MuiTypography-root detailText MuiTypography-body1"
                        >
                          No 3rd party access
                        </p>
                      </ForwardRef(Typography)>
                    </WithStyles(ForwardRef(Typography))>
                  </li>
                </ForwardRef(ListItem)>
              </WithStyles(ForwardRef(ListItem))>
            </ul>
          </ForwardRef(List)>
        </WithStyles(ForwardRef(List))>
      </section>
    </NoThirdPartyPermissions>
  </ThemeProvider>
</WithTheme>
`;

exports[`ResourceSharing it renders the sharing action component 1`] = `
<WithTheme
  theme={
    Object {
      "breakpoints": Object {
        "between": [Function],
        "down": [Function],
        "keys": Array [
          "xs",
          "sm",
          "md",
          "lg",
          "xl",
        ],
        "only": [Function],
        "up": [Function],
        "values": Object {
          "lg": 1280,
          "md": 960,
          "sm": 600,
          "xl": 1920,
          "xs": 0,
        },
        "width": [Function],
      },
      "direction": "ltr",
      "iconSet": Object {
        "config": Object {
          "cssFiles": Array [
            "css/all.css",
          ],
          "fonts": Array [
            Object {
              "fontFace": "
font-family: 'Font Awesome 5 Free';
font-style: normal;
font-weight: 900;
font-display: block;",
              "fontsPath": "./webfonts",
              "licensePath": "./LICENSE.txt",
              "source": "fa-solid-900.eot",
              "sources": Array [
                Object {
                  "format": "embedded-opentype",
                  "path": "fa-solid-900.eot",
                  "urlAddition": "?#iefix",
                },
                Object {
                  "format": "woff2",
                  "path": "fa-solid-900.woff2",
                },
                Object {
                  "format": "woff",
                  "path": "fa-solid-900.woff",
                },
                Object {
                  "format": "truetype",
                  "path": "fa-solid-900.ttf",
                },
                Object {
                  "format": "svg",
                  "path": "fa-solid-900.svg",
                  "urlAddition": "#fontawesome",
                },
              ],
            },
          ],
          "label": "Font Awesome Solid",
          "name": "fontawesome-solid",
          "npmModule": "@fortawesome/fontawesome-free",
          "type": 0,
        },
        "iconColor": [Function],
        "styles": [Function],
      },
      "icons": Object {
        "config": Object {
          "cssFiles": Array [
            "css/all.css",
          ],
          "fonts": Array [
            Object {
              "fontFace": "
font-family: 'Font Awesome 5 Free';
font-style: normal;
font-weight: 900;
font-display: block;",
              "fontsPath": "./webfonts",
              "licensePath": "./LICENSE.txt",
              "source": "fa-solid-900.eot",
              "sources": Array [
                Object {
                  "format": "embedded-opentype",
                  "path": "fa-solid-900.eot",
                  "urlAddition": "?#iefix",
                },
                Object {
                  "format": "woff2",
                  "path": "fa-solid-900.woff2",
                },
                Object {
                  "format": "woff",
                  "path": "fa-solid-900.woff",
                },
                Object {
                  "format": "truetype",
                  "path": "fa-solid-900.ttf",
                },
                Object {
                  "format": "svg",
                  "path": "fa-solid-900.svg",
                  "urlAddition": "#fontawesome",
                },
              ],
            },
          ],
          "label": "Font Awesome Solid",
          "name": "fontawesome-solid",
          "npmModule": "@fortawesome/fontawesome-free",
          "type": 0,
        },
        "iconColor": [Function],
        "styles": [Function],
      },
      "label": "SDK Default",
      "licenses": Array [
        "fonts/Raleway/OFL.txt",
        "fonts/Roboto/LICENSE.txt",
      ],
      "localFonts": Object {
        "fonts/Raleway/Raleway-Bold.woff2": [Function],
        "fonts/Raleway/Raleway-Regular.woff2": [Function],
        "fonts/Roboto/Roboto-Bold.woff2": [Function],
        "fonts/Roboto/Roboto-Light.woff2": [Function],
        "fonts/Roboto/Roboto-Regular.woff2": [Function],
      },
      "mixins": Object {
        "gutters": [Function],
        "toolbar": Object {
          "@media (min-width:0px) and (orientation: landscape)": Object {
            "minHeight": 48,
          },
          "@media (min-width:600px)": Object {
            "minHeight": 64,
          },
          "minHeight": 56,
        },
      },
      "name": "sdk-default",
      "overrides": Object {},
      "palette": Object {
        "action": Object {
          "activatedOpacity": 0.12,
          "active": "rgba(0, 0, 0, 0.54)",
          "disabled": "rgba(0, 0, 0, 0.26)",
          "disabledBackground": "rgba(0, 0, 0, 0.12)",
          "disabledOpacity": 0.38,
          "focus": "rgba(0, 0, 0, 0.12)",
          "focusOpacity": 0.12,
          "hover": "rgba(0, 0, 0, 0.04)",
          "hoverOpacity": 0.04,
          "selected": "rgba(0, 0, 0, 0.08)",
          "selectedOpacity": 0.08,
        },
        "adjustAlpha": [Function],
        "augmentColor": [Function],
        "background": Object {
          "default": "#FFFFFF",
          "paper": "#fff",
        },
        "common": Object {
          "black": "#000",
          "white": "#fff",
        },
        "contrastThreshold": 3,
        "divider": "rgba(0, 0, 0, 0.12)",
        "error": Object {
          "contrastText": "#fff",
          "dark": "#d32f2f",
          "light": "#e57373",
          "main": "#f44336",
        },
        "getContrastText": [Function],
        "grey": Object {
          "100": "#f5f5f5",
          "200": "#eeeeee",
          "300": "#e0e0e0",
          "400": "#bdbdbd",
          "50": "#fafafa",
          "500": "#9e9e9e",
          "600": "#757575",
          "700": "#616161",
          "800": "#424242",
          "900": "#212121",
          "A100": "#d5d5d5",
          "A200": "#aaaaaa",
          "A400": "#303030",
          "A700": "#616161",
        },
        "info": Object {
          "contrastText": "#fff",
          "dark": "#1976d2",
          "light": "#64b5f6",
          "main": "#2196f3",
        },
        "primary": Object {
          "contrastText": "#fff",
          "dark": "rgb(86, 53, 178)",
          "light": "rgb(150, 112, 255)",
          "main": "#7C4DFF",
        },
        "secondary": Object {
          "contrastText": "rgba(0, 0, 0, 0.87)",
          "dark": "#083575",
          "light": "#01C9EA",
          "main": "#18A9E6",
        },
        "success": Object {
          "contrastText": "rgba(0, 0, 0, 0.87)",
          "dark": "#388e3c",
          "light": "#81c784",
          "main": "#4caf50",
        },
        "text": Object {
          "disabled": "rgba(0, 0, 0, 0.38)",
          "hint": "rgba(0, 0, 0, 0.38)",
          "primary": "rgba(0, 0, 0, 0.87)",
          "secondary": "rgba(0, 0, 0, 0.54)",
        },
        "tonalOffset": 0.2,
        "type": "light",
        "warning": Object {
          "contrastText": "rgba(0, 0, 0, 0.87)",
          "dark": "#f57c00",
          "light": "#ffb74d",
          "main": "#ff9800",
        },
      },
      "props": Object {},
      "shadows": Array [
        "none",
        "0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12)",
        "0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12)",
        "0px 3px 3px -2px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 1px 8px 0px rgba(0,0,0,0.12)",
        "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
        "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
        "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
        "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
        "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
        "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
        "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
        "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
        "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
        "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
        "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
        "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
        "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
        "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
        "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
        "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
        "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
        "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
        "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
        "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
        "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
      ],
      "shape": Object {
        "borderRadius": 4,
      },
      "spacing": [Function],
      "stylesheets": Array [
        "https://fonts.googleapis.com/css?family=Raleway:400,700|Roboto:300,400,700&display=swap",
      ],
      "transitions": Object {
        "create": [Function],
        "duration": Object {
          "complex": 375,
          "enteringScreen": 225,
          "leavingScreen": 195,
          "short": 250,
          "shorter": 200,
          "shortest": 150,
          "standard": 300,
        },
        "easing": Object {
          "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
          "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
          "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
          "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
        },
        "getAutoHeightDuration": [Function],
      },
      "typography": Object {
        "body": Object {
          "fontFamily": "\\"Roboto\\", sans-serif",
          "fontSize": "0.875rem",
          "fontWeight": 300,
          "letterSpacing": "0.01071em",
          "lineHeight": 1.43,
        },
        "body1": Object {
          "fontFamily": "\\"Raleway\\", \\"Roboto\\", sans-serif",
          "fontSize": "1rem",
          "fontWeight": 300,
          "letterSpacing": "0.00938em",
          "lineHeight": 1.5,
        },
        "body2": Object {
          "fontFamily": "\\"Roboto\\", sans-serif",
          "fontSize": "0.875rem",
          "fontWeight": 300,
          "letterSpacing": "0.01071em",
          "lineHeight": 1.43,
        },
        "button": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "0.875rem",
          "fontWeight": 400,
          "letterSpacing": "0.02857em",
          "lineHeight": 1.75,
          "textTransform": "uppercase",
        },
        "caption": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "0.75rem",
          "fontWeight": 400,
          "letterSpacing": "0.03333em",
          "lineHeight": 1.66,
        },
        "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
        "fontSize": 14,
        "fontWeightBold": 700,
        "fontWeightLight": 300,
        "fontWeightMedium": 400,
        "fontWeightRegular": 400,
        "h1": Object {
          "fontFamily": "\\"Raleway\\", \\"Roboto\\", sans-serif",
          "fontSize": "2.5rem",
          "fontWeight": 700,
          "letterSpacing": "-0.01562em",
          "lineHeight": 1,
        },
        "h2": Object {
          "fontFamily": "\\"Raleway\\", \\"Roboto\\", sans-serif",
          "fontSize": "2rem",
          "fontWeight": 300,
          "letterSpacing": "-0.00833em",
          "lineHeight": 1,
        },
        "h3": Object {
          "fontFamily": "\\"Roboto\\", sans-serif",
          "fontSize": "1.9rem",
          "fontWeight": 300,
          "letterSpacing": "0em",
          "lineHeight": 1,
        },
        "h4": Object {
          "fontFamily": "\\"Raleway\\", \\"Roboto\\", sans-serif",
          "fontSize": "1.25rem",
          "fontWeight": 700,
          "letterSpacing": "0.00735em",
          "lineHeight": 1,
          "textTransform": "uppercase",
        },
        "h5": Object {
          "fontFamily": "\\"Raleway\\", \\"Roboto\\", sans-serif",
          "fontSize": "1rem",
          "fontWeight": 400,
          "letterSpacing": "0em",
          "lineHeight": 1,
          "textTransform": "uppercase",
        },
        "h6": Object {
          "fontFamily": "\\"Roboto\\", sans-serif",
          "fontSize": "0.625rem",
          "fontWeight": 300,
          "letterSpacing": "0.0075em",
          "lineHeight": 1,
        },
        "heading": Object {
          "fontFamily": "\\"Raleway\\", \\"Roboto\\", sans-serif",
          "fontSize": "1rem",
          "fontWeight": 300,
          "letterSpacing": "0.00938em",
          "lineHeight": 1.5,
        },
        "htmlFontSize": 16,
        "overline": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "0.75rem",
          "fontWeight": 400,
          "letterSpacing": "0.08333em",
          "lineHeight": 2.66,
          "textTransform": "uppercase",
        },
        "pxToRem": [Function],
        "round": [Function],
        "subtitle1": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "1rem",
          "fontWeight": 400,
          "letterSpacing": "0.00938em",
          "lineHeight": 1.75,
        },
        "subtitle2": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "0.875rem",
          "fontWeight": 400,
          "letterSpacing": "0.00714em",
          "lineHeight": 1.57,
        },
      },
      "zIndex": Object {
        "appBar": 1100,
        "drawer": 1200,
        "mobileStepper": 1000,
        "modal": 1300,
        "snackbar": 1400,
        "speedDial": 1050,
        "tooltip": 1500,
      },
      Symbol(mui.nested): false,
    }
  }
>
  <ThemeProvider
    theme={
      Object {
        "breakpoints": Object {
          "between": [Function],
          "down": [Function],
          "keys": Array [
            "xs",
            "sm",
            "md",
            "lg",
            "xl",
          ],
          "only": [Function],
          "up": [Function],
          "values": Object {
            "lg": 1280,
            "md": 960,
            "sm": 600,
            "xl": 1920,
            "xs": 0,
          },
          "width": [Function],
        },
        "direction": "ltr",
        "iconSet": Object {
          "config": Object {
            "cssFiles": Array [
              "css/all.css",
            ],
            "fonts": Array [
              Object {
                "fontFace": "
font-family: 'Font Awesome 5 Free';
font-style: normal;
font-weight: 900;
font-display: block;",
                "fontsPath": "./webfonts",
                "licensePath": "./LICENSE.txt",
                "source": "fa-solid-900.eot",
                "sources": Array [
                  Object {
                    "format": "embedded-opentype",
                    "path": "fa-solid-900.eot",
                    "urlAddition": "?#iefix",
                  },
                  Object {
                    "format": "woff2",
                    "path": "fa-solid-900.woff2",
                  },
                  Object {
                    "format": "woff",
                    "path": "fa-solid-900.woff",
                  },
                  Object {
                    "format": "truetype",
                    "path": "fa-solid-900.ttf",
                  },
                  Object {
                    "format": "svg",
                    "path": "fa-solid-900.svg",
                    "urlAddition": "#fontawesome",
                  },
                ],
              },
            ],
            "label": "Font Awesome Solid",
            "name": "fontawesome-solid",
            "npmModule": "@fortawesome/fontawesome-free",
            "type": 0,
          },
          "iconColor": [Function],
          "styles": [Function],
        },
        "icons": Object {
          "config": Object {
            "cssFiles": Array [
              "css/all.css",
            ],
            "fonts": Array [
              Object {
                "fontFace": "
font-family: 'Font Awesome 5 Free';
font-style: normal;
font-weight: 900;
font-display: block;",
                "fontsPath": "./webfonts",
                "licensePath": "./LICENSE.txt",
                "source": "fa-solid-900.eot",
                "sources": Array [
                  Object {
                    "format": "embedded-opentype",
                    "path": "fa-solid-900.eot",
                    "urlAddition": "?#iefix",
                  },
                  Object {
                    "format": "woff2",
                    "path": "fa-solid-900.woff2",
                  },
                  Object {
                    "format": "woff",
                    "path": "fa-solid-900.woff",
                  },
                  Object {
                    "format": "truetype",
                    "path": "fa-solid-900.ttf",
                  },
                  Object {
                    "format": "svg",
                    "path": "fa-solid-900.svg",
                    "urlAddition": "#fontawesome",
                  },
                ],
              },
            ],
            "label": "Font Awesome Solid",
            "name": "fontawesome-solid",
            "npmModule": "@fortawesome/fontawesome-free",
            "type": 0,
          },
          "iconColor": [Function],
          "styles": [Function],
        },
        "label": "SDK Default",
        "licenses": Array [
          "fonts/Raleway/OFL.txt",
          "fonts/Roboto/LICENSE.txt",
        ],
        "localFonts": Object {
          "fonts/Raleway/Raleway-Bold.woff2": [Function],
          "fonts/Raleway/Raleway-Regular.woff2": [Function],
          "fonts/Roboto/Roboto-Bold.woff2": [Function],
          "fonts/Roboto/Roboto-Light.woff2": [Function],
          "fonts/Roboto/Roboto-Regular.woff2": [Function],
        },
        "mixins": Object {
          "gutters": [Function],
          "toolbar": Object {
            "@media (min-width:0px) and (orientation: landscape)": Object {
              "minHeight": 48,
            },
            "@media (min-width:600px)": Object {
              "minHeight": 64,
            },
            "minHeight": 56,
          },
        },
        "name": "sdk-default",
        "overrides": Object {},
        "palette": Object {
          "action": Object {
            "activatedOpacity": 0.12,
            "active": "rgba(0, 0, 0, 0.54)",
            "disabled": "rgba(0, 0, 0, 0.26)",
            "disabledBackground": "rgba(0, 0, 0, 0.12)",
            "disabledOpacity": 0.38,
            "focus": "rgba(0, 0, 0, 0.12)",
            "focusOpacity": 0.12,
            "hover": "rgba(0, 0, 0, 0.04)",
            "hoverOpacity": 0.04,
            "selected": "rgba(0, 0, 0, 0.08)",
            "selectedOpacity": 0.08,
          },
          "adjustAlpha": [Function],
          "augmentColor": [Function],
          "background": Object {
            "default": "#FFFFFF",
            "paper": "#fff",
          },
          "common": Object {
            "black": "#000",
            "white": "#fff",
          },
          "contrastThreshold": 3,
          "divider": "rgba(0, 0, 0, 0.12)",
          "error": Object {
            "contrastText": "#fff",
            "dark": "#d32f2f",
            "light": "#e57373",
            "main": "#f44336",
          },
          "getContrastText": [Function],
          "grey": Object {
            "100": "#f5f5f5",
            "200": "#eeeeee",
            "300": "#e0e0e0",
            "400": "#bdbdbd",
            "50": "#fafafa",
            "500": "#9e9e9e",
            "600": "#757575",
            "700": "#616161",
            "800": "#424242",
            "900": "#212121",
            "A100": "#d5d5d5",
            "A200": "#aaaaaa",
            "A400": "#303030",
            "A700": "#616161",
          },
          "info": Object {
            "contrastText": "#fff",
            "dark": "#1976d2",
            "light": "#64b5f6",
            "main": "#2196f3",
          },
          "primary": Object {
            "contrastText": "#fff",
            "dark": "rgb(86, 53, 178)",
            "light": "rgb(150, 112, 255)",
            "main": "#7C4DFF",
          },
          "secondary": Object {
            "contrastText": "rgba(0, 0, 0, 0.87)",
            "dark": "#083575",
            "light": "#01C9EA",
            "main": "#18A9E6",
          },
          "success": Object {
            "contrastText": "rgba(0, 0, 0, 0.87)",
            "dark": "#388e3c",
            "light": "#81c784",
            "main": "#4caf50",
          },
          "text": Object {
            "disabled": "rgba(0, 0, 0, 0.38)",
            "hint": "rgba(0, 0, 0, 0.38)",
            "primary": "rgba(0, 0, 0, 0.87)",
            "secondary": "rgba(0, 0, 0, 0.54)",
          },
          "tonalOffset": 0.2,
          "type": "light",
          "warning": Object {
            "contrastText": "rgba(0, 0, 0, 0.87)",
            "dark": "#f57c00",
            "light": "#ffb74d",
            "main": "#ff9800",
          },
        },
        "props": Object {},
        "shadows": Array [
          "none",
          "0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12)",
          "0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12)",
          "0px 3px 3px -2px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 1px 8px 0px rgba(0,0,0,0.12)",
          "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
          "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
          "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
          "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
          "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
          "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
          "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
          "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
          "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
          "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
          "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
          "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
          "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
          "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
          "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
          "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
          "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
          "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
          "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
          "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
          "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
        ],
        "shape": Object {
          "borderRadius": 4,
        },
        "spacing": [Function],
        "stylesheets": Array [
          "https://fonts.googleapis.com/css?family=Raleway:400,700|Roboto:300,400,700&display=swap",
        ],
        "transitions": Object {
          "create": [Function],
          "duration": Object {
            "complex": 375,
            "enteringScreen": 225,
            "leavingScreen": 195,
            "short": 250,
            "shorter": 200,
            "shortest": 150,
            "standard": 300,
          },
          "easing": Object {
            "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
            "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
            "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
            "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
          },
          "getAutoHeightDuration": [Function],
        },
        "typography": Object {
          "body": Object {
            "fontFamily": "\\"Roboto\\", sans-serif",
            "fontSize": "0.875rem",
            "fontWeight": 300,
            "letterSpacing": "0.01071em",
            "lineHeight": 1.43,
          },
          "body1": Object {
            "fontFamily": "\\"Raleway\\", \\"Roboto\\", sans-serif",
            "fontSize": "1rem",
            "fontWeight": 300,
            "letterSpacing": "0.00938em",
            "lineHeight": 1.5,
          },
          "body2": Object {
            "fontFamily": "\\"Roboto\\", sans-serif",
            "fontSize": "0.875rem",
            "fontWeight": 300,
            "letterSpacing": "0.01071em",
            "lineHeight": 1.43,
          },
          "button": Object {
            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
            "fontSize": "0.875rem",
            "fontWeight": 400,
            "letterSpacing": "0.02857em",
            "lineHeight": 1.75,
            "textTransform": "uppercase",
          },
          "caption": Object {
            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
            "fontSize": "0.75rem",
            "fontWeight": 400,
            "letterSpacing": "0.03333em",
            "lineHeight": 1.66,
          },
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": 14,
          "fontWeightBold": 700,
          "fontWeightLight": 300,
          "fontWeightMedium": 400,
          "fontWeightRegular": 400,
          "h1": Object {
            "fontFamily": "\\"Raleway\\", \\"Roboto\\", sans-serif",
            "fontSize": "2.5rem",
            "fontWeight": 700,
            "letterSpacing": "-0.01562em",
            "lineHeight": 1,
          },
          "h2": Object {
            "fontFamily": "\\"Raleway\\", \\"Roboto\\", sans-serif",
            "fontSize": "2rem",
            "fontWeight": 300,
            "letterSpacing": "-0.00833em",
            "lineHeight": 1,
          },
          "h3": Object {
            "fontFamily": "\\"Roboto\\", sans-serif",
            "fontSize": "1.9rem",
            "fontWeight": 300,
            "letterSpacing": "0em",
            "lineHeight": 1,
          },
          "h4": Object {
            "fontFamily": "\\"Raleway\\", \\"Roboto\\", sans-serif",
            "fontSize": "1.25rem",
            "fontWeight": 700,
            "letterSpacing": "0.00735em",
            "lineHeight": 1,
            "textTransform": "uppercase",
          },
          "h5": Object {
            "fontFamily": "\\"Raleway\\", \\"Roboto\\", sans-serif",
            "fontSize": "1rem",
            "fontWeight": 400,
            "letterSpacing": "0em",
            "lineHeight": 1,
            "textTransform": "uppercase",
          },
          "h6": Object {
            "fontFamily": "\\"Roboto\\", sans-serif",
            "fontSize": "0.625rem",
            "fontWeight": 300,
            "letterSpacing": "0.0075em",
            "lineHeight": 1,
          },
          "heading": Object {
            "fontFamily": "\\"Raleway\\", \\"Roboto\\", sans-serif",
            "fontSize": "1rem",
            "fontWeight": 300,
            "letterSpacing": "0.00938em",
            "lineHeight": 1.5,
          },
          "htmlFontSize": 16,
          "overline": Object {
            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
            "fontSize": "0.75rem",
            "fontWeight": 400,
            "letterSpacing": "0.08333em",
            "lineHeight": 2.66,
            "textTransform": "uppercase",
          },
          "pxToRem": [Function],
          "round": [Function],
          "subtitle1": Object {
            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
            "fontSize": "1rem",
            "fontWeight": 400,
            "letterSpacing": "0.00938em",
            "lineHeight": 1.75,
          },
          "subtitle2": Object {
            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
            "fontSize": "0.875rem",
            "fontWeight": 400,
            "letterSpacing": "0.00714em",
            "lineHeight": 1.57,
          },
        },
        "zIndex": Object {
          "appBar": 1100,
          "drawer": 1200,
          "mobileStepper": 1000,
          "modal": 1300,
          "snackbar": 1400,
          "speedDial": 1050,
          "tooltip": 1500,
        },
        Symbol(mui.nested): false,
      }
    }
  >
    <ResourceSharing
      iri="iri"
      name="name"
      permissions={
        Array [
          Object {
            "acl": Object {
              "append": true,
              "control": true,
              "read": true,
              "write": true,
            },
            "alias": "Control",
            "profile": Object {
              "webId": "webId",
            },
            "webId": "webId",
          },
          Object {
            "acl": Object {
              "append": true,
              "control": true,
              "read": true,
              "write": true,
            },
            "alias": "Control",
            "profile": Object {
              "webId": "agentId",
            },
            "webId": "agentId",
          },
        ]
      }
    >
      <section
        className="makeStyles-headerSection-3"
      >
        <h3
          className="makeStyles-content-h3-14"
          title="iri"
        >
          name
        </h3>
        <WithStyles(ForwardRef(Button))
          onClick={[Function]}
          startIcon={<Memo(ChevronLeftIcon) />}
        >
          <ForwardRef(Button)
            classes={
              Object {
                "colorInherit": "MuiButton-colorInherit",
                "contained": "MuiButton-contained",
                "containedPrimary": "MuiButton-containedPrimary",
                "containedSecondary": "MuiButton-containedSecondary",
                "containedSizeLarge": "MuiButton-containedSizeLarge",
                "containedSizeSmall": "MuiButton-containedSizeSmall",
                "disableElevation": "MuiButton-disableElevation",
                "disabled": "Mui-disabled",
                "endIcon": "MuiButton-endIcon",
                "focusVisible": "Mui-focusVisible",
                "fullWidth": "MuiButton-fullWidth",
                "iconSizeLarge": "MuiButton-iconSizeLarge",
                "iconSizeMedium": "MuiButton-iconSizeMedium",
                "iconSizeSmall": "MuiButton-iconSizeSmall",
                "label": "MuiButton-label",
                "outlined": "MuiButton-outlined",
                "outlinedPrimary": "MuiButton-outlinedPrimary",
                "outlinedSecondary": "MuiButton-outlinedSecondary",
                "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                "root": "MuiButton-root",
                "sizeLarge": "MuiButton-sizeLarge",
                "sizeSmall": "MuiButton-sizeSmall",
                "startIcon": "MuiButton-startIcon",
                "text": "MuiButton-text",
                "textPrimary": "MuiButton-textPrimary",
                "textSecondary": "MuiButton-textSecondary",
                "textSizeLarge": "MuiButton-textSizeLarge",
                "textSizeSmall": "MuiButton-textSizeSmall",
              }
            }
            onClick={[Function]}
            startIcon={<Memo(ChevronLeftIcon) />}
          >
            <WithStyles(ForwardRef(ButtonBase))
              className="MuiButton-root MuiButton-text"
              component="button"
              disabled={false}
              focusRipple={true}
              focusVisibleClassName="Mui-focusVisible"
              onClick={[Function]}
              type="button"
            >
              <ForwardRef(ButtonBase)
                className="MuiButton-root MuiButton-text"
                classes={
                  Object {
                    "disabled": "Mui-disabled",
                    "focusVisible": "Mui-focusVisible",
                    "root": "MuiButtonBase-root",
                  }
                }
                component="button"
                disabled={false}
                focusRipple={true}
                focusVisibleClassName="Mui-focusVisible"
                onClick={[Function]}
                type="button"
              >
                <button
                  className="MuiButtonBase-root MuiButton-root MuiButton-text"
                  disabled={false}
                  onBlur={[Function]}
                  onClick={[Function]}
                  onDragLeave={[Function]}
                  onFocus={[Function]}
                  onKeyDown={[Function]}
                  onKeyUp={[Function]}
                  onMouseDown={[Function]}
                  onMouseLeave={[Function]}
                  onMouseUp={[Function]}
                  onTouchEnd={[Function]}
                  onTouchMove={[Function]}
                  onTouchStart={[Function]}
                  tabIndex={0}
                  type="button"
                >
                  <span
                    className="MuiButton-label"
                  >
                    <span
                      className="MuiButton-startIcon MuiButton-iconSizeMedium"
                    >
                      <ForwardRef>
                        <WithStyles(ForwardRef(SvgIcon))>
                          <ForwardRef(SvgIcon)
                            classes={
                              Object {
                                "colorAction": "MuiSvgIcon-colorAction",
                                "colorDisabled": "MuiSvgIcon-colorDisabled",
                                "colorError": "MuiSvgIcon-colorError",
                                "colorPrimary": "MuiSvgIcon-colorPrimary",
                                "colorSecondary": "MuiSvgIcon-colorSecondary",
                                "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                "root": "MuiSvgIcon-root",
                              }
                            }
                          >
                            <svg
                              aria-hidden={true}
                              className="MuiSvgIcon-root"
                              focusable="false"
                              viewBox="0 0 24 24"
                            >
                              <path
                                d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"
                              />
                            </svg>
                          </ForwardRef(SvgIcon)>
                        </WithStyles(ForwardRef(SvgIcon))>
                      </ForwardRef>
                    </span>
                    Details
                  </span>
                  <WithStyles(memo)
                    center={false}
                  >
                    <ForwardRef(TouchRipple)
                      center={false}
                      classes={
                        Object {
                          "child": "MuiTouchRipple-child",
                          "childLeaving": "MuiTouchRipple-childLeaving",
                          "childPulsate": "MuiTouchRipple-childPulsate",
                          "ripple": "MuiTouchRipple-ripple",
                          "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                          "rippleVisible": "MuiTouchRipple-rippleVisible",
                          "root": "MuiTouchRipple-root",
                        }
                      }
                    >
                      <span
                        className="MuiTouchRipple-root"
                      >
                        <TransitionGroup
                          childFactory={[Function]}
                          component={null}
                          exit={true}
                        />
                      </span>
                    </ForwardRef(TouchRipple)>
                  </WithStyles(memo)>
                </button>
              </ForwardRef(ButtonBase)>
            </WithStyles(ForwardRef(ButtonBase))>
          </ForwardRef(Button)>
        </WithStyles(ForwardRef(Button))>
      </section>
      <WithStyles(ForwardRef(Divider))>
        <ForwardRef(Divider)
          classes={
            Object {
              "absolute": "MuiDivider-absolute",
              "flexItem": "MuiDivider-flexItem",
              "inset": "MuiDivider-inset",
              "light": "MuiDivider-light",
              "middle": "MuiDivider-middle",
              "root": "MuiDivider-root",
              "vertical": "MuiDivider-vertical",
            }
          }
        >
          <hr
            className="MuiDivider-root"
          />
        </ForwardRef(Divider)>
      </WithStyles(ForwardRef(Divider))>
      <section
        className="makeStyles-centeredSection-2"
      >
        <h5
          className="makeStyles-content-h5-16"
        >
          My Access
        </h5>
        <WithStyles(ForwardRef(List))>
          <ForwardRef(List)
            classes={
              Object {
                "dense": "MuiList-dense",
                "padding": "MuiList-padding",
                "root": "MuiList-root",
                "subheader": "MuiList-subheader",
              }
            }
          >
            <ul
              className="MuiList-root MuiList-padding"
            >
              <Permission
                classes={
                  Object {
                    "agentInput": "makeStyles-agentInput-10",
                    "avatar": "makeStyles-avatar-1",
                    "centeredSection": "makeStyles-centeredSection-2",
                    "content": "makeStyles-content-22",
                    "content-blockquote": "makeStyles-content-blockquote-20",
                    "content-h1": "makeStyles-content-h1-12",
                    "content-h2": "makeStyles-content-h2-13",
                    "content-h3": "makeStyles-content-h3-14",
                    "content-h4": "makeStyles-content-h4-15",
                    "content-h5": "makeStyles-content-h5-16",
                    "content-h6": "makeStyles-content-h6-17",
                    "content-ol": "makeStyles-content-ol-19",
                    "content-p": "makeStyles-content-p-21",
                    "content-ul": "makeStyles-content-ul-18",
                    "detailText": "makeStyles-detailText-7",
                    "downloadButton": "makeStyles-downloadButton-9",
                    "formListItem": "makeStyles-formListItem-6",
                    "headerSection": "makeStyles-headerSection-3",
                    "image": "makeStyles-image-11",
                    "listItem": "makeStyles-listItem-5",
                    "raw": "makeStyles-raw-4",
                    "typeValue": "makeStyles-typeValue-8",
                  }
                }
                iri="iri"
                key="0"
                permission={
                  Object {
                    "acl": Object {
                      "append": true,
                      "control": true,
                      "read": true,
                      "write": true,
                    },
                    "alias": "Control",
                    "profile": Object {
                      "webId": "webId",
                    },
                    "webId": "webId",
                  }
                }
                setThirdPartyPermissions={[Function]}
                thirdPartyPermissions={
                  Array [
                    Object {
                      "acl": Object {
                        "append": true,
                        "control": true,
                        "read": true,
                        "write": true,
                      },
                      "alias": "Control",
                      "profile": Object {
                        "webId": "agentId",
                      },
                      "webId": "agentId",
                    },
                  ]
                }
                warnOnSubmit={true}
              >
                <WithStyles(ForwardRef(ListItem))
                  className="makeStyles-listItem-5"
                  key="webId"
                >
                  <ForwardRef(ListItem)
                    className="makeStyles-listItem-5"
                    classes={
                      Object {
                        "alignItemsFlexStart": "MuiListItem-alignItemsFlexStart",
                        "button": "MuiListItem-button",
                        "container": "MuiListItem-container",
                        "dense": "MuiListItem-dense",
                        "disabled": "Mui-disabled",
                        "divider": "MuiListItem-divider",
                        "focusVisible": "Mui-focusVisible",
                        "gutters": "MuiListItem-gutters",
                        "root": "MuiListItem-root",
                        "secondaryAction": "MuiListItem-secondaryAction",
                        "selected": "Mui-selected",
                      }
                    }
                  >
                    <li
                      className="MuiListItem-root makeStyles-listItem-5 MuiListItem-gutters"
                      disabled={false}
                    >
                      <WithStyles(ForwardRef(Avatar))
                        alt="webId"
                        className="makeStyles-avatar-1"
                        key=".0"
                      >
                        <ForwardRef(Avatar)
                          alt="webId"
                          className="makeStyles-avatar-1"
                          classes={
                            Object {
                              "circle": "MuiAvatar-circle",
                              "colorDefault": "MuiAvatar-colorDefault",
                              "fallback": "MuiAvatar-fallback",
                              "img": "MuiAvatar-img",
                              "root": "MuiAvatar-root",
                              "rounded": "MuiAvatar-rounded",
                              "square": "MuiAvatar-square",
                            }
                          }
                        >
                          <div
                            className="MuiAvatar-root MuiAvatar-circle makeStyles-avatar-1 MuiAvatar-colorDefault"
                          >
                            <ForwardRef(PersonIcon)
                              className="MuiAvatar-fallback"
                            >
                              <WithStyles(ForwardRef(SvgIcon))
                                className="MuiAvatar-fallback"
                              >
                                <ForwardRef(SvgIcon)
                                  className="MuiAvatar-fallback"
                                  classes={
                                    Object {
                                      "colorAction": "MuiSvgIcon-colorAction",
                                      "colorDisabled": "MuiSvgIcon-colorDisabled",
                                      "colorError": "MuiSvgIcon-colorError",
                                      "colorPrimary": "MuiSvgIcon-colorPrimary",
                                      "colorSecondary": "MuiSvgIcon-colorSecondary",
                                      "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                      "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                      "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                      "root": "MuiSvgIcon-root",
                                    }
                                  }
                                >
                                  <svg
                                    aria-hidden={true}
                                    className="MuiSvgIcon-root MuiAvatar-fallback"
                                    focusable="false"
                                    viewBox="0 0 24 24"
                                  >
                                    <path
                                      d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"
                                    />
                                  </svg>
                                </ForwardRef(SvgIcon)>
                              </WithStyles(ForwardRef(SvgIcon))>
                            </ForwardRef(PersonIcon)>
                          </div>
                        </ForwardRef(Avatar)>
                      </WithStyles(ForwardRef(Avatar))>
                      <WithStyles(ForwardRef(Typography))
                        className="makeStyles-detailText-7"
                        key=".1"
                      >
                        <ForwardRef(Typography)
                          className="makeStyles-detailText-7"
                          classes={
                            Object {
                              "alignCenter": "MuiTypography-alignCenter",
                              "alignJustify": "MuiTypography-alignJustify",
                              "alignLeft": "MuiTypography-alignLeft",
                              "alignRight": "MuiTypography-alignRight",
                              "body1": "MuiTypography-body1",
                              "body2": "MuiTypography-body2",
                              "button": "MuiTypography-button",
                              "caption": "MuiTypography-caption",
                              "colorError": "MuiTypography-colorError",
                              "colorInherit": "MuiTypography-colorInherit",
                              "colorPrimary": "MuiTypography-colorPrimary",
                              "colorSecondary": "MuiTypography-colorSecondary",
                              "colorTextPrimary": "MuiTypography-colorTextPrimary",
                              "colorTextSecondary": "MuiTypography-colorTextSecondary",
                              "displayBlock": "MuiTypography-displayBlock",
                              "displayInline": "MuiTypography-displayInline",
                              "gutterBottom": "MuiTypography-gutterBottom",
                              "h1": "MuiTypography-h1",
                              "h2": "MuiTypography-h2",
                              "h3": "MuiTypography-h3",
                              "h4": "MuiTypography-h4",
                              "h5": "MuiTypography-h5",
                              "h6": "MuiTypography-h6",
                              "noWrap": "MuiTypography-noWrap",
                              "overline": "MuiTypography-overline",
                              "paragraph": "MuiTypography-paragraph",
                              "root": "MuiTypography-root",
                              "srOnly": "MuiTypography-srOnly",
                              "subtitle1": "MuiTypography-subtitle1",
                              "subtitle2": "MuiTypography-subtitle2",
                            }
                          }
                        >
                          <p
                            className="MuiTypography-root makeStyles-detailText-7 MuiTypography-body1"
                          >
                            webId
                          </p>
                        </ForwardRef(Typography)>
                      </WithStyles(ForwardRef(Typography))>
                      <PermissionsForm
                        key=".2"
                        onSave={[Function]}
                        permission={
                          Object {
                            "acl": Object {
                              "append": true,
                              "control": true,
                              "read": true,
                              "write": true,
                            },
                            "alias": "Control",
                            "profile": Object {
                              "webId": "webId",
                            },
                            "webId": "webId",
                          }
                        }
                        warnOnSubmit={true}
                      >
                        <section>
                          <WithStyles(ForwardRef(Select))
                            id="demo-simple-select"
                            labelId="demo-simple-select-label"
                            onChange={[Function]}
                            value="Control"
                          >
                            <ForwardRef(Select)
                              classes={
                                Object {
                                  "disabled": "Mui-disabled",
                                  "filled": "MuiSelect-filled",
                                  "icon": "MuiSelect-icon",
                                  "iconFilled": "MuiSelect-iconFilled",
                                  "iconOpen": "MuiSelect-iconOpen",
                                  "iconOutlined": "MuiSelect-iconOutlined",
                                  "nativeInput": "MuiSelect-nativeInput",
                                  "outlined": "MuiSelect-outlined",
                                  "root": "MuiSelect-root",
                                  "select": "MuiSelect-select",
                                  "selectMenu": "MuiSelect-selectMenu",
                                }
                              }
                              id="demo-simple-select"
                              labelId="demo-simple-select-label"
                              onChange={[Function]}
                              value="Control"
                            >
                              <WithStyles(ForwardRef(Input))
                                inputComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "propTypes": Object {
                                      "IconComponent": [Function],
                                      "MenuProps": [Function],
                                      "SelectDisplayProps": [Function],
                                      "aria-label": [Function],
                                      "autoFocus": [Function],
                                      "autoWidth": [Function],
                                      "children": [Function],
                                      "className": [Function],
                                      "classes": [Function],
                                      "defaultValue": [Function],
                                      "disabled": [Function],
                                      "displayEmpty": [Function],
                                      "inputRef": [Function],
                                      "labelId": [Function],
                                      "multiple": [Function],
                                      "name": [Function],
                                      "onBlur": [Function],
                                      "onChange": [Function],
                                      "onClose": [Function],
                                      "onFocus": [Function],
                                      "onOpen": [Function],
                                      "open": [Function],
                                      "readOnly": [Function],
                                      "renderValue": [Function],
                                      "tabIndex": [Function],
                                      "type": [Function],
                                      "value": [Function],
                                      "variant": [Function],
                                    },
                                    "render": [Function],
                                  }
                                }
                                inputProps={
                                  Object {
                                    "IconComponent": Object {
                                      "$$typeof": Symbol(react.memo),
                                      "compare": null,
                                      "type": Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "render": [Function],
                                      },
                                    },
                                    "MenuProps": undefined,
                                    "SelectDisplayProps": Object {
                                      "id": "demo-simple-select",
                                    },
                                    "autoWidth": false,
                                    "children": Array [
                                      <WithStyles(ForwardRef(MenuItem))
                                        value="No access"
                                      >
                                        No access
                                      </WithStyles(ForwardRef(MenuItem))>,
                                      <WithStyles(ForwardRef(MenuItem))
                                        value="View"
                                      >
                                        View
                                      </WithStyles(ForwardRef(MenuItem))>,
                                      <WithStyles(ForwardRef(MenuItem))
                                        value="Edit"
                                      >
                                        Edit
                                      </WithStyles(ForwardRef(MenuItem))>,
                                      <WithStyles(ForwardRef(MenuItem))
                                        value="Append"
                                      >
                                        Append
                                      </WithStyles(ForwardRef(MenuItem))>,
                                      <WithStyles(ForwardRef(MenuItem))
                                        value="Control"
                                      >
                                        Control
                                      </WithStyles(ForwardRef(MenuItem))>,
                                    ],
                                    "classes": Object {
                                      "disabled": "Mui-disabled",
                                      "filled": "MuiSelect-filled",
                                      "icon": "MuiSelect-icon",
                                      "iconFilled": "MuiSelect-iconFilled",
                                      "iconOpen": "MuiSelect-iconOpen",
                                      "iconOutlined": "MuiSelect-iconOutlined",
                                      "nativeInput": "MuiSelect-nativeInput",
                                      "outlined": "MuiSelect-outlined",
                                      "root": "MuiSelect-root",
                                      "select": "MuiSelect-select",
                                      "selectMenu": "MuiSelect-selectMenu",
                                    },
                                    "displayEmpty": false,
                                    "labelId": "demo-simple-select-label",
                                    "multiple": false,
                                    "onClose": undefined,
                                    "onOpen": undefined,
                                    "open": undefined,
                                    "renderValue": undefined,
                                    "type": undefined,
                                    "variant": "standard",
                                  }
                                }
                                onChange={[Function]}
                                value="Control"
                              >
                                <ForwardRef(Input)
                                  classes={
                                    Object {
                                      "colorSecondary": "MuiInput-colorSecondary",
                                      "disabled": "Mui-disabled",
                                      "error": "Mui-error",
                                      "focused": "Mui-focused",
                                      "formControl": "MuiInput-formControl",
                                      "fullWidth": "MuiInput-fullWidth",
                                      "input": "MuiInput-input",
                                      "inputMarginDense": "MuiInput-inputMarginDense",
                                      "inputMultiline": "MuiInput-inputMultiline",
                                      "inputTypeSearch": "MuiInput-inputTypeSearch",
                                      "marginDense": "MuiInput-marginDense",
                                      "multiline": "MuiInput-multiline",
                                      "root": "MuiInput-root",
                                      "underline": "MuiInput-underline",
                                    }
                                  }
                                  inputComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "propTypes": Object {
                                        "IconComponent": [Function],
                                        "MenuProps": [Function],
                                        "SelectDisplayProps": [Function],
                                        "aria-label": [Function],
                                        "autoFocus": [Function],
                                        "autoWidth": [Function],
                                        "children": [Function],
                                        "className": [Function],
                                        "classes": [Function],
                                        "defaultValue": [Function],
                                        "disabled": [Function],
                                        "displayEmpty": [Function],
                                        "inputRef": [Function],
                                        "labelId": [Function],
                                        "multiple": [Function],
                                        "name": [Function],
                                        "onBlur": [Function],
                                        "onChange": [Function],
                                        "onClose": [Function],
                                        "onFocus": [Function],
                                        "onOpen": [Function],
                                        "open": [Function],
                                        "readOnly": [Function],
                                        "renderValue": [Function],
                                        "tabIndex": [Function],
                                        "type": [Function],
                                        "value": [Function],
                                        "variant": [Function],
                                      },
                                      "render": [Function],
                                    }
                                  }
                                  inputProps={
                                    Object {
                                      "IconComponent": Object {
                                        "$$typeof": Symbol(react.memo),
                                        "compare": null,
                                        "type": Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "render": [Function],
                                        },
                                      },
                                      "MenuProps": undefined,
                                      "SelectDisplayProps": Object {
                                        "id": "demo-simple-select",
                                      },
                                      "autoWidth": false,
                                      "children": Array [
                                        <WithStyles(ForwardRef(MenuItem))
                                          value="No access"
                                        >
                                          No access
                                        </WithStyles(ForwardRef(MenuItem))>,
                                        <WithStyles(ForwardRef(MenuItem))
                                          value="View"
                                        >
                                          View
                                        </WithStyles(ForwardRef(MenuItem))>,
                                        <WithStyles(ForwardRef(MenuItem))
                                          value="Edit"
                                        >
                                          Edit
                                        </WithStyles(ForwardRef(MenuItem))>,
                                        <WithStyles(ForwardRef(MenuItem))
                                          value="Append"
                                        >
                                          Append
                                        </WithStyles(ForwardRef(MenuItem))>,
                                        <WithStyles(ForwardRef(MenuItem))
                                          value="Control"
                                        >
                                          Control
                                        </WithStyles(ForwardRef(MenuItem))>,
                                      ],
                                      "classes": Object {
                                        "disabled": "Mui-disabled",
                                        "filled": "MuiSelect-filled",
                                        "icon": "MuiSelect-icon",
                                        "iconFilled": "MuiSelect-iconFilled",
                                        "iconOpen": "MuiSelect-iconOpen",
                                        "iconOutlined": "MuiSelect-iconOutlined",
                                        "nativeInput": "MuiSelect-nativeInput",
                                        "outlined": "MuiSelect-outlined",
                                        "root": "MuiSelect-root",
                                        "select": "MuiSelect-select",
                                        "selectMenu": "MuiSelect-selectMenu",
                                      },
                                      "displayEmpty": false,
                                      "labelId": "demo-simple-select-label",
                                      "multiple": false,
                                      "onClose": undefined,
                                      "onOpen": undefined,
                                      "open": undefined,
                                      "renderValue": undefined,
                                      "type": undefined,
                                      "variant": "standard",
                                    }
                                  }
                                  onChange={[Function]}
                                  value="Control"
                                >
                                  <WithStyles(ForwardRef(InputBase))
                                    classes={
                                      Object {
                                        "colorSecondary": "MuiInput-colorSecondary",
                                        "disabled": "Mui-disabled",
                                        "error": "Mui-error",
                                        "focused": "Mui-focused",
                                        "formControl": "MuiInput-formControl",
                                        "fullWidth": "MuiInput-fullWidth",
                                        "input": "MuiInput-input",
                                        "inputMarginDense": "MuiInput-inputMarginDense",
                                        "inputMultiline": "MuiInput-inputMultiline",
                                        "inputTypeSearch": "MuiInput-inputTypeSearch",
                                        "marginDense": "MuiInput-marginDense",
                                        "multiline": "MuiInput-multiline",
                                        "root": "MuiInput-root MuiInput-underline",
                                        "underline": null,
                                      }
                                    }
                                    fullWidth={false}
                                    inputComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "propTypes": Object {
                                          "IconComponent": [Function],
                                          "MenuProps": [Function],
                                          "SelectDisplayProps": [Function],
                                          "aria-label": [Function],
                                          "autoFocus": [Function],
                                          "autoWidth": [Function],
                                          "children": [Function],
                                          "className": [Function],
                                          "classes": [Function],
                                          "defaultValue": [Function],
                                          "disabled": [Function],
                                          "displayEmpty": [Function],
                                          "inputRef": [Function],
                                          "labelId": [Function],
                                          "multiple": [Function],
                                          "name": [Function],
                                          "onBlur": [Function],
                                          "onChange": [Function],
                                          "onClose": [Function],
                                          "onFocus": [Function],
                                          "onOpen": [Function],
                                          "open": [Function],
                                          "readOnly": [Function],
                                          "renderValue": [Function],
                                          "tabIndex": [Function],
                                          "type": [Function],
                                          "value": [Function],
                                          "variant": [Function],
                                        },
                                        "render": [Function],
                                      }
                                    }
                                    inputProps={
                                      Object {
                                        "IconComponent": Object {
                                          "$$typeof": Symbol(react.memo),
                                          "compare": null,
                                          "type": Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "render": [Function],
                                          },
                                        },
                                        "MenuProps": undefined,
                                        "SelectDisplayProps": Object {
                                          "id": "demo-simple-select",
                                        },
                                        "autoWidth": false,
                                        "children": Array [
                                          <WithStyles(ForwardRef(MenuItem))
                                            value="No access"
                                          >
                                            No access
                                          </WithStyles(ForwardRef(MenuItem))>,
                                          <WithStyles(ForwardRef(MenuItem))
                                            value="View"
                                          >
                                            View
                                          </WithStyles(ForwardRef(MenuItem))>,
                                          <WithStyles(ForwardRef(MenuItem))
                                            value="Edit"
                                          >
                                            Edit
                                          </WithStyles(ForwardRef(MenuItem))>,
                                          <WithStyles(ForwardRef(MenuItem))
                                            value="Append"
                                          >
                                            Append
                                          </WithStyles(ForwardRef(MenuItem))>,
                                          <WithStyles(ForwardRef(MenuItem))
                                            value="Control"
                                          >
                                            Control
                                          </WithStyles(ForwardRef(MenuItem))>,
                                        ],
                                        "classes": Object {
                                          "disabled": "Mui-disabled",
                                          "filled": "MuiSelect-filled",
                                          "icon": "MuiSelect-icon",
                                          "iconFilled": "MuiSelect-iconFilled",
                                          "iconOpen": "MuiSelect-iconOpen",
                                          "iconOutlined": "MuiSelect-iconOutlined",
                                          "nativeInput": "MuiSelect-nativeInput",
                                          "outlined": "MuiSelect-outlined",
                                          "root": "MuiSelect-root",
                                          "select": "MuiSelect-select",
                                          "selectMenu": "MuiSelect-selectMenu",
                                        },
                                        "displayEmpty": false,
                                        "labelId": "demo-simple-select-label",
                                        "multiple": false,
                                        "onClose": undefined,
                                        "onOpen": undefined,
                                        "open": undefined,
                                        "renderValue": undefined,
                                        "type": undefined,
                                        "variant": "standard",
                                      }
                                    }
                                    multiline={false}
                                    onChange={[Function]}
                                    type="text"
                                    value="Control"
                                  >
                                    <ForwardRef(InputBase)
                                      classes={
                                        Object {
                                          "adornedEnd": "MuiInputBase-adornedEnd",
                                          "adornedStart": "MuiInputBase-adornedStart",
                                          "colorSecondary": "MuiInputBase-colorSecondary MuiInput-colorSecondary",
                                          "disabled": "Mui-disabled Mui-disabled",
                                          "error": "Mui-error Mui-error",
                                          "focused": "Mui-focused Mui-focused",
                                          "formControl": "MuiInputBase-formControl MuiInput-formControl",
                                          "fullWidth": "MuiInputBase-fullWidth MuiInput-fullWidth",
                                          "input": "MuiInputBase-input MuiInput-input",
                                          "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
                                          "inputAdornedStart": "MuiInputBase-inputAdornedStart",
                                          "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                                          "inputMarginDense": "MuiInputBase-inputMarginDense MuiInput-inputMarginDense",
                                          "inputMultiline": "MuiInputBase-inputMultiline MuiInput-inputMultiline",
                                          "inputTypeSearch": "MuiInputBase-inputTypeSearch MuiInput-inputTypeSearch",
                                          "marginDense": "MuiInputBase-marginDense MuiInput-marginDense",
                                          "multiline": "MuiInputBase-multiline MuiInput-multiline",
                                          "root": "MuiInputBase-root MuiInput-root MuiInput-underline",
                                        }
                                      }
                                      fullWidth={false}
                                      inputComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "propTypes": Object {
                                            "IconComponent": [Function],
                                            "MenuProps": [Function],
                                            "SelectDisplayProps": [Function],
                                            "aria-label": [Function],
                                            "autoFocus": [Function],
                                            "autoWidth": [Function],
                                            "children": [Function],
                                            "className": [Function],
                                            "classes": [Function],
                                            "defaultValue": [Function],
                                            "disabled": [Function],
                                            "displayEmpty": [Function],
                                            "inputRef": [Function],
                                            "labelId": [Function],
                                            "multiple": [Function],
                                            "name": [Function],
                                            "onBlur": [Function],
                                            "onChange": [Function],
                                            "onClose": [Function],
                                            "onFocus": [Function],
                                            "onOpen": [Function],
                                            "open": [Function],
                                            "readOnly": [Function],
                                            "renderValue": [Function],
                                            "tabIndex": [Function],
                                            "type": [Function],
                                            "value": [Function],
                                            "variant": [Function],
                                          },
                                          "render": [Function],
                                        }
                                      }
                                      inputProps={
                                        Object {
                                          "IconComponent": Object {
                                            "$$typeof": Symbol(react.memo),
                                            "compare": null,
                                            "type": Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "render": [Function],
                                            },
                                          },
                                          "MenuProps": undefined,
                                          "SelectDisplayProps": Object {
                                            "id": "demo-simple-select",
                                          },
                                          "autoWidth": false,
                                          "children": Array [
                                            <WithStyles(ForwardRef(MenuItem))
                                              value="No access"
                                            >
                                              No access
                                            </WithStyles(ForwardRef(MenuItem))>,
                                            <WithStyles(ForwardRef(MenuItem))
                                              value="View"
                                            >
                                              View
                                            </WithStyles(ForwardRef(MenuItem))>,
                                            <WithStyles(ForwardRef(MenuItem))
                                              value="Edit"
                                            >
                                              Edit
                                            </WithStyles(ForwardRef(MenuItem))>,
                                            <WithStyles(ForwardRef(MenuItem))
                                              value="Append"
                                            >
                                              Append
                                            </WithStyles(ForwardRef(MenuItem))>,
                                            <WithStyles(ForwardRef(MenuItem))
                                              value="Control"
                                            >
                                              Control
                                            </WithStyles(ForwardRef(MenuItem))>,
                                          ],
                                          "classes": Object {
                                            "disabled": "Mui-disabled",
                                            "filled": "MuiSelect-filled",
                                            "icon": "MuiSelect-icon",
                                            "iconFilled": "MuiSelect-iconFilled",
                                            "iconOpen": "MuiSelect-iconOpen",
                                            "iconOutlined": "MuiSelect-iconOutlined",
                                            "nativeInput": "MuiSelect-nativeInput",
                                            "outlined": "MuiSelect-outlined",
                                            "root": "MuiSelect-root",
                                            "select": "MuiSelect-select",
                                            "selectMenu": "MuiSelect-selectMenu",
                                          },
                                          "displayEmpty": false,
                                          "labelId": "demo-simple-select-label",
                                          "multiple": false,
                                          "onClose": undefined,
                                          "onOpen": undefined,
                                          "open": undefined,
                                          "renderValue": undefined,
                                          "type": undefined,
                                          "variant": "standard",
                                        }
                                      }
                                      multiline={false}
                                      onChange={[Function]}
                                      type="text"
                                      value="Control"
                                    >
                                      <div
                                        className="MuiInputBase-root MuiInput-root MuiInput-underline"
                                        onClick={[Function]}
                                      >
                                        <ForwardRef(SelectInput)
                                          IconComponent={
                                            Object {
                                              "$$typeof": Symbol(react.memo),
                                              "compare": null,
                                              "type": Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "render": [Function],
                                              },
                                            }
                                          }
                                          SelectDisplayProps={
                                            Object {
                                              "id": "demo-simple-select",
                                            }
                                          }
                                          autoWidth={false}
                                          className="MuiInputBase-input MuiInput-input"
                                          classes={
                                            Object {
                                              "disabled": "Mui-disabled",
                                              "filled": "MuiSelect-filled",
                                              "icon": "MuiSelect-icon",
                                              "iconFilled": "MuiSelect-iconFilled",
                                              "iconOpen": "MuiSelect-iconOpen",
                                              "iconOutlined": "MuiSelect-iconOutlined",
                                              "nativeInput": "MuiSelect-nativeInput",
                                              "outlined": "MuiSelect-outlined",
                                              "root": "MuiSelect-root",
                                              "select": "MuiSelect-select",
                                              "selectMenu": "MuiSelect-selectMenu",
                                            }
                                          }
                                          displayEmpty={false}
                                          inputRef={[Function]}
                                          labelId="demo-simple-select-label"
                                          multiple={false}
                                          onAnimationStart={[Function]}
                                          onBlur={[Function]}
                                          onChange={[Function]}
                                          onFocus={[Function]}
                                          value="Control"
                                          variant="standard"
                                        >
                                          <div
                                            aria-haspopup="listbox"
                                            aria-labelledby="demo-simple-select-label demo-simple-select"
                                            className="MuiSelect-root MuiSelect-select MuiSelect-selectMenu MuiInputBase-input MuiInput-input"
                                            id="demo-simple-select"
                                            onBlur={[Function]}
                                            onFocus={[Function]}
                                            onKeyDown={[Function]}
                                            onMouseDown={[Function]}
                                            role="button"
                                            tabIndex={0}
                                          >
                                            Control
                                          </div>
                                          <input
                                            aria-hidden={true}
                                            className="MuiSelect-nativeInput"
                                            onAnimationStart={[Function]}
                                            onChange={[Function]}
                                            tabIndex={-1}
                                            value="Control"
                                          />
                                          <ForwardRef(ArrowDropDownIcon)
                                            className="MuiSelect-icon"
                                          >
                                            <WithStyles(ForwardRef(SvgIcon))
                                              className="MuiSelect-icon"
                                            >
                                              <ForwardRef(SvgIcon)
                                                className="MuiSelect-icon"
                                                classes={
                                                  Object {
                                                    "colorAction": "MuiSvgIcon-colorAction",
                                                    "colorDisabled": "MuiSvgIcon-colorDisabled",
                                                    "colorError": "MuiSvgIcon-colorError",
                                                    "colorPrimary": "MuiSvgIcon-colorPrimary",
                                                    "colorSecondary": "MuiSvgIcon-colorSecondary",
                                                    "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                                    "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                                    "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                                    "root": "MuiSvgIcon-root",
                                                  }
                                                }
                                              >
                                                <svg
                                                  aria-hidden={true}
                                                  className="MuiSvgIcon-root MuiSelect-icon"
                                                  focusable="false"
                                                  viewBox="0 0 24 24"
                                                >
                                                  <path
                                                    d="M7 10l5 5 5-5z"
                                                  />
                                                </svg>
                                              </ForwardRef(SvgIcon)>
                                            </WithStyles(ForwardRef(SvgIcon))>
                                          </ForwardRef(ArrowDropDownIcon)>
                                          <WithStyles(ForwardRef(Menu))
                                            MenuListProps={
                                              Object {
                                                "aria-labelledby": "demo-simple-select-label",
                                                "disableListWrap": true,
                                                "role": "listbox",
                                              }
                                            }
                                            PaperProps={
                                              Object {
                                                "style": Object {
                                                  "minWidth": undefined,
                                                },
                                              }
                                            }
                                            anchorEl={
                                              <div
                                                aria-haspopup="listbox"
                                                aria-labelledby="demo-simple-select-label demo-simple-select"
                                                class="MuiSelect-root MuiSelect-select MuiSelect-selectMenu MuiInputBase-input MuiInput-input"
                                                id="demo-simple-select"
                                                role="button"
                                                tabindex="0"
                                              >
                                                Control
                                              </div>
                                            }
                                            id="menu-"
                                            onClose={[Function]}
                                            open={false}
                                          >
                                            <ForwardRef(Menu)
                                              MenuListProps={
                                                Object {
                                                  "aria-labelledby": "demo-simple-select-label",
                                                  "disableListWrap": true,
                                                  "role": "listbox",
                                                }
                                              }
                                              PaperProps={
                                                Object {
                                                  "style": Object {
                                                    "minWidth": undefined,
                                                  },
                                                }
                                              }
                                              anchorEl={
                                                <div
                                                  aria-haspopup="listbox"
                                                  aria-labelledby="demo-simple-select-label demo-simple-select"
                                                  class="MuiSelect-root MuiSelect-select MuiSelect-selectMenu MuiInputBase-input MuiInput-input"
                                                  id="demo-simple-select"
                                                  role="button"
                                                  tabindex="0"
                                                >
                                                  Control
                                                </div>
                                              }
                                              classes={
                                                Object {
                                                  "list": "MuiMenu-list",
                                                  "paper": "MuiMenu-paper",
                                                }
                                              }
                                              id="menu-"
                                              onClose={[Function]}
                                              open={false}
                                            >
                                              <WithStyles(ForwardRef(Popover))
                                                PaperProps={
                                                  Object {
                                                    "classes": Object {
                                                      "root": "MuiMenu-paper",
                                                    },
                                                    "style": Object {
                                                      "minWidth": undefined,
                                                    },
                                                  }
                                                }
                                                anchorEl={
                                                  <div
                                                    aria-haspopup="listbox"
                                                    aria-labelledby="demo-simple-select-label demo-simple-select"
                                                    class="MuiSelect-root MuiSelect-select MuiSelect-selectMenu MuiInputBase-input MuiInput-input"
                                                    id="demo-simple-select"
                                                    role="button"
                                                    tabindex="0"
                                                  >
                                                    Control
                                                  </div>
                                                }
                                                anchorOrigin={
                                                  Object {
                                                    "horizontal": "left",
                                                    "vertical": "top",
                                                  }
                                                }
                                                getContentAnchorEl={[Function]}
                                                id="menu-"
                                                onClose={[Function]}
                                                onEntering={[Function]}
                                                open={false}
                                                transformOrigin={
                                                  Object {
                                                    "horizontal": "left",
                                                    "vertical": "top",
                                                  }
                                                }
                                                transitionDuration="auto"
                                              >
                                                <ForwardRef(Popover)
                                                  PaperProps={
                                                    Object {
                                                      "classes": Object {
                                                        "root": "MuiMenu-paper",
                                                      },
                                                      "style": Object {
                                                        "minWidth": undefined,
                                                      },
                                                    }
                                                  }
                                                  anchorEl={
                                                    <div
                                                      aria-haspopup="listbox"
                                                      aria-labelledby="demo-simple-select-label demo-simple-select"
                                                      class="MuiSelect-root MuiSelect-select MuiSelect-selectMenu MuiInputBase-input MuiInput-input"
                                                      id="demo-simple-select"
                                                      role="button"
                                                      tabindex="0"
                                                    >
                                                      Control
                                                    </div>
                                                  }
                                                  anchorOrigin={
                                                    Object {
                                                      "horizontal": "left",
                                                      "vertical": "top",
                                                    }
                                                  }
                                                  classes={
                                                    Object {
                                                      "paper": "MuiPopover-paper",
                                                      "root": "MuiPopover-root",
                                                    }
                                                  }
                                                  getContentAnchorEl={[Function]}
                                                  id="menu-"
                                                  onClose={[Function]}
                                                  onEntering={[Function]}
                                                  open={false}
                                                  transformOrigin={
                                                    Object {
                                                      "horizontal": "left",
                                                      "vertical": "top",
                                                    }
                                                  }
                                                  transitionDuration="auto"
                                                >
                                                  <ForwardRef(Modal)
                                                    BackdropProps={
                                                      Object {
                                                        "invisible": true,
                                                      }
                                                    }
                                                    className="MuiPopover-root"
                                                    container={<body />}
                                                    id="menu-"
                                                    onClose={[Function]}
                                                    open={false}
                                                  />
                                                </ForwardRef(Popover)>
                                              </WithStyles(ForwardRef(Popover))>
                                            </ForwardRef(Menu)>
                                          </WithStyles(ForwardRef(Menu))>
                                        </ForwardRef(SelectInput)>
                                      </div>
                                    </ForwardRef(InputBase)>
                                  </WithStyles(ForwardRef(InputBase))>
                                </ForwardRef(Input)>
                              </WithStyles(ForwardRef(Input))>
                            </ForwardRef(Select)>
                          </WithStyles(ForwardRef(Select))>
                        </section>
                      </PermissionsForm>
                    </li>
                  </ForwardRef(ListItem)>
                </WithStyles(ForwardRef(ListItem))>
              </Permission>
            </ul>
          </ForwardRef(List)>
        </WithStyles(ForwardRef(List))>
      </section>
      <ThirdPartyPermissions
        classes={
          Object {
            "agentInput": "makeStyles-agentInput-10",
            "avatar": "makeStyles-avatar-1",
            "centeredSection": "makeStyles-centeredSection-2",
            "content": "makeStyles-content-22",
            "content-blockquote": "makeStyles-content-blockquote-20",
            "content-h1": "makeStyles-content-h1-12",
            "content-h2": "makeStyles-content-h2-13",
            "content-h3": "makeStyles-content-h3-14",
            "content-h4": "makeStyles-content-h4-15",
            "content-h5": "makeStyles-content-h5-16",
            "content-h6": "makeStyles-content-h6-17",
            "content-ol": "makeStyles-content-ol-19",
            "content-p": "makeStyles-content-p-21",
            "content-ul": "makeStyles-content-ul-18",
            "detailText": "makeStyles-detailText-7",
            "downloadButton": "makeStyles-downloadButton-9",
            "formListItem": "makeStyles-formListItem-6",
            "headerSection": "makeStyles-headerSection-3",
            "image": "makeStyles-image-11",
            "listItem": "makeStyles-listItem-5",
            "raw": "makeStyles-raw-4",
            "typeValue": "makeStyles-typeValue-8",
          }
        }
        iri="iri"
        setThirdPartyPermissions={[Function]}
        thirdPartyPermissions={
          Array [
            Object {
              "acl": Object {
                "append": true,
                "control": true,
                "read": true,
                "write": true,
              },
              "alias": "Control",
              "profile": Object {
                "webId": "agentId",
              },
              "webId": "agentId",
            },
          ]
        }
      >
        <section
          className="makeStyles-centeredSection-2"
        >
          <h5
            className="makeStyles-content-h5-16"
          >
            Sharing
          </h5>
          <WithStyles(ForwardRef(List))>
            <ForwardRef(List)
              classes={
                Object {
                  "dense": "MuiList-dense",
                  "padding": "MuiList-padding",
                  "root": "MuiList-root",
                  "subheader": "MuiList-subheader",
                }
              }
            >
              <ul
                className="MuiList-root MuiList-padding"
              >
                <WithStyles(ForwardRef(ListItem))
                  className="makeStyles-listItem-5"
                  key="0"
                >
                  <ForwardRef(ListItem)
                    className="makeStyles-listItem-5"
                    classes={
                      Object {
                        "alignItemsFlexStart": "MuiListItem-alignItemsFlexStart",
                        "button": "MuiListItem-button",
                        "container": "MuiListItem-container",
                        "dense": "MuiListItem-dense",
                        "disabled": "Mui-disabled",
                        "divider": "MuiListItem-divider",
                        "focusVisible": "Mui-focusVisible",
                        "gutters": "MuiListItem-gutters",
                        "root": "MuiListItem-root",
                        "secondaryAction": "MuiListItem-secondaryAction",
                        "selected": "Mui-selected",
                      }
                    }
                  >
                    <li
                      className="MuiListItem-root makeStyles-listItem-5 MuiListItem-gutters"
                      disabled={false}
                    >
                      <WithStyles(ForwardRef(ListItemIcon))
                        key=".0"
                      >
                        <ForwardRef(ListItemIcon)
                          classes={
                            Object {
                              "alignItemsFlexStart": "MuiListItemIcon-alignItemsFlexStart",
                              "root": "MuiListItemIcon-root",
                            }
                          }
                        >
                          <div
                            className="MuiListItemIcon-root"
                          >
                            <ForwardRef>
                              <WithStyles(ForwardRef(SvgIcon))>
                                <ForwardRef(SvgIcon)
                                  classes={
                                    Object {
                                      "colorAction": "MuiSvgIcon-colorAction",
                                      "colorDisabled": "MuiSvgIcon-colorDisabled",
                                      "colorError": "MuiSvgIcon-colorError",
                                      "colorPrimary": "MuiSvgIcon-colorPrimary",
                                      "colorSecondary": "MuiSvgIcon-colorSecondary",
                                      "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                      "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                      "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                      "root": "MuiSvgIcon-root",
                                    }
                                  }
                                >
                                  <svg
                                    aria-hidden={true}
                                    className="MuiSvgIcon-root"
                                    focusable="false"
                                    viewBox="0 0 24 24"
                                  >
                                    <path
                                      d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"
                                    />
                                  </svg>
                                </ForwardRef(SvgIcon)>
                              </WithStyles(ForwardRef(SvgIcon))>
                            </ForwardRef>
                            People
                          </div>
                        </ForwardRef(ListItemIcon)>
                      </WithStyles(ForwardRef(ListItemIcon))>
                    </li>
                  </ForwardRef(ListItem)>
                </WithStyles(ForwardRef(ListItem))>
                <WithStyles(ForwardRef(Divider))>
                  <ForwardRef(Divider)
                    classes={
                      Object {
                        "absolute": "MuiDivider-absolute",
                        "flexItem": "MuiDivider-flexItem",
                        "inset": "MuiDivider-inset",
                        "light": "MuiDivider-light",
                        "middle": "MuiDivider-middle",
                        "root": "MuiDivider-root",
                        "vertical": "MuiDivider-vertical",
                      }
                    }
                  >
                    <hr
                      className="MuiDivider-root"
                    />
                  </ForwardRef(Divider)>
                </WithStyles(ForwardRef(Divider))>
                <ThirdPartyPermissionsList
                  classes={
                    Object {
                      "agentInput": "makeStyles-agentInput-10",
                      "avatar": "makeStyles-avatar-1",
                      "centeredSection": "makeStyles-centeredSection-2",
                      "content": "makeStyles-content-22",
                      "content-blockquote": "makeStyles-content-blockquote-20",
                      "content-h1": "makeStyles-content-h1-12",
                      "content-h2": "makeStyles-content-h2-13",
                      "content-h3": "makeStyles-content-h3-14",
                      "content-h4": "makeStyles-content-h4-15",
                      "content-h5": "makeStyles-content-h5-16",
                      "content-h6": "makeStyles-content-h6-17",
                      "content-ol": "makeStyles-content-ol-19",
                      "content-p": "makeStyles-content-p-21",
                      "content-ul": "makeStyles-content-ul-18",
                      "detailText": "makeStyles-detailText-7",
                      "downloadButton": "makeStyles-downloadButton-9",
                      "formListItem": "makeStyles-formListItem-6",
                      "headerSection": "makeStyles-headerSection-3",
                      "image": "makeStyles-image-11",
                      "listItem": "makeStyles-listItem-5",
                      "raw": "makeStyles-raw-4",
                      "typeValue": "makeStyles-typeValue-8",
                    }
                  }
                  iri="iri"
                  setThirdPartyPermissions={[Function]}
                  thirdPartyPermissions={
                    Array [
                      Object {
                        "acl": Object {
                          "append": true,
                          "control": true,
                          "read": true,
                          "write": true,
                        },
                        "alias": "Control",
                        "profile": Object {
                          "webId": "agentId",
                        },
                        "webId": "agentId",
                      },
                    ]
                  }
                >
                  <Permission
                    classes={
                      Object {
                        "agentInput": "makeStyles-agentInput-10",
                        "avatar": "makeStyles-avatar-1",
                        "centeredSection": "makeStyles-centeredSection-2",
                        "content": "makeStyles-content-22",
                        "content-blockquote": "makeStyles-content-blockquote-20",
                        "content-h1": "makeStyles-content-h1-12",
                        "content-h2": "makeStyles-content-h2-13",
                        "content-h3": "makeStyles-content-h3-14",
                        "content-h4": "makeStyles-content-h4-15",
                        "content-h5": "makeStyles-content-h5-16",
                        "content-h6": "makeStyles-content-h6-17",
                        "content-ol": "makeStyles-content-ol-19",
                        "content-p": "makeStyles-content-p-21",
                        "content-ul": "makeStyles-content-ul-18",
                        "detailText": "makeStyles-detailText-7",
                        "downloadButton": "makeStyles-downloadButton-9",
                        "formListItem": "makeStyles-formListItem-6",
                        "headerSection": "makeStyles-headerSection-3",
                        "image": "makeStyles-image-11",
                        "listItem": "makeStyles-listItem-5",
                        "raw": "makeStyles-raw-4",
                        "typeValue": "makeStyles-typeValue-8",
                      }
                    }
                    iri="iri"
                    key="agentId"
                    permission={
                      Object {
                        "acl": Object {
                          "append": true,
                          "control": true,
                          "read": true,
                          "write": true,
                        },
                        "alias": "Control",
                        "profile": Object {
                          "webId": "agentId",
                        },
                        "webId": "agentId",
                      }
                    }
                    setThirdPartyPermissions={[Function]}
                    thirdPartyPermissions={
                      Array [
                        Object {
                          "acl": Object {
                            "append": true,
                            "control": true,
                            "read": true,
                            "write": true,
                          },
                          "alias": "Control",
                          "profile": Object {
                            "webId": "agentId",
                          },
                          "webId": "agentId",
                        },
                      ]
                    }
                    warnOnSubmit={false}
                  >
                    <WithStyles(ForwardRef(ListItem))
                      className="makeStyles-listItem-5"
                      key="agentId"
                    >
                      <ForwardRef(ListItem)
                        className="makeStyles-listItem-5"
                        classes={
                          Object {
                            "alignItemsFlexStart": "MuiListItem-alignItemsFlexStart",
                            "button": "MuiListItem-button",
                            "container": "MuiListItem-container",
                            "dense": "MuiListItem-dense",
                            "disabled": "Mui-disabled",
                            "divider": "MuiListItem-divider",
                            "focusVisible": "Mui-focusVisible",
                            "gutters": "MuiListItem-gutters",
                            "root": "MuiListItem-root",
                            "secondaryAction": "MuiListItem-secondaryAction",
                            "selected": "Mui-selected",
                          }
                        }
                      >
                        <li
                          className="MuiListItem-root makeStyles-listItem-5 MuiListItem-gutters"
                          disabled={false}
                        >
                          <WithStyles(ForwardRef(Avatar))
                            alt="agentId"
                            className="makeStyles-avatar-1"
                            key=".0"
                          >
                            <ForwardRef(Avatar)
                              alt="agentId"
                              className="makeStyles-avatar-1"
                              classes={
                                Object {
                                  "circle": "MuiAvatar-circle",
                                  "colorDefault": "MuiAvatar-colorDefault",
                                  "fallback": "MuiAvatar-fallback",
                                  "img": "MuiAvatar-img",
                                  "root": "MuiAvatar-root",
                                  "rounded": "MuiAvatar-rounded",
                                  "square": "MuiAvatar-square",
                                }
                              }
                            >
                              <div
                                className="MuiAvatar-root MuiAvatar-circle makeStyles-avatar-1 MuiAvatar-colorDefault"
                              >
                                <ForwardRef(PersonIcon)
                                  className="MuiAvatar-fallback"
                                >
                                  <WithStyles(ForwardRef(SvgIcon))
                                    className="MuiAvatar-fallback"
                                  >
                                    <ForwardRef(SvgIcon)
                                      className="MuiAvatar-fallback"
                                      classes={
                                        Object {
                                          "colorAction": "MuiSvgIcon-colorAction",
                                          "colorDisabled": "MuiSvgIcon-colorDisabled",
                                          "colorError": "MuiSvgIcon-colorError",
                                          "colorPrimary": "MuiSvgIcon-colorPrimary",
                                          "colorSecondary": "MuiSvgIcon-colorSecondary",
                                          "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                          "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                          "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                          "root": "MuiSvgIcon-root",
                                        }
                                      }
                                    >
                                      <svg
                                        aria-hidden={true}
                                        className="MuiSvgIcon-root MuiAvatar-fallback"
                                        focusable="false"
                                        viewBox="0 0 24 24"
                                      >
                                        <path
                                          d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"
                                        />
                                      </svg>
                                    </ForwardRef(SvgIcon)>
                                  </WithStyles(ForwardRef(SvgIcon))>
                                </ForwardRef(PersonIcon)>
                              </div>
                            </ForwardRef(Avatar)>
                          </WithStyles(ForwardRef(Avatar))>
                          <WithStyles(ForwardRef(Typography))
                            className="makeStyles-detailText-7"
                            key=".1"
                          >
                            <ForwardRef(Typography)
                              className="makeStyles-detailText-7"
                              classes={
                                Object {
                                  "alignCenter": "MuiTypography-alignCenter",
                                  "alignJustify": "MuiTypography-alignJustify",
                                  "alignLeft": "MuiTypography-alignLeft",
                                  "alignRight": "MuiTypography-alignRight",
                                  "body1": "MuiTypography-body1",
                                  "body2": "MuiTypography-body2",
                                  "button": "MuiTypography-button",
                                  "caption": "MuiTypography-caption",
                                  "colorError": "MuiTypography-colorError",
                                  "colorInherit": "MuiTypography-colorInherit",
                                  "colorPrimary": "MuiTypography-colorPrimary",
                                  "colorSecondary": "MuiTypography-colorSecondary",
                                  "colorTextPrimary": "MuiTypography-colorTextPrimary",
                                  "colorTextSecondary": "MuiTypography-colorTextSecondary",
                                  "displayBlock": "MuiTypography-displayBlock",
                                  "displayInline": "MuiTypography-displayInline",
                                  "gutterBottom": "MuiTypography-gutterBottom",
                                  "h1": "MuiTypography-h1",
                                  "h2": "MuiTypography-h2",
                                  "h3": "MuiTypography-h3",
                                  "h4": "MuiTypography-h4",
                                  "h5": "MuiTypography-h5",
                                  "h6": "MuiTypography-h6",
                                  "noWrap": "MuiTypography-noWrap",
                                  "overline": "MuiTypography-overline",
                                  "paragraph": "MuiTypography-paragraph",
                                  "root": "MuiTypography-root",
                                  "srOnly": "MuiTypography-srOnly",
                                  "subtitle1": "MuiTypography-subtitle1",
                                  "subtitle2": "MuiTypography-subtitle2",
                                }
                              }
                            >
                              <p
                                className="MuiTypography-root makeStyles-detailText-7 MuiTypography-body1"
                              >
                                agentId
                              </p>
                            </ForwardRef(Typography)>
                          </WithStyles(ForwardRef(Typography))>
                          <PermissionsForm
                            key=".2"
                            onSave={[Function]}
                            permission={
                              Object {
                                "acl": Object {
                                  "append": true,
                                  "control": true,
                                  "read": true,
                                  "write": true,
                                },
                                "alias": "Control",
                                "profile": Object {
                                  "webId": "agentId",
                                },
                                "webId": "agentId",
                              }
                            }
                            warnOnSubmit={false}
                          >
                            <section>
                              <WithStyles(ForwardRef(Select))
                                id="demo-simple-select"
                                labelId="demo-simple-select-label"
                                onChange={[Function]}
                                value="Control"
                              >
                                <ForwardRef(Select)
                                  classes={
                                    Object {
                                      "disabled": "Mui-disabled",
                                      "filled": "MuiSelect-filled",
                                      "icon": "MuiSelect-icon",
                                      "iconFilled": "MuiSelect-iconFilled",
                                      "iconOpen": "MuiSelect-iconOpen",
                                      "iconOutlined": "MuiSelect-iconOutlined",
                                      "nativeInput": "MuiSelect-nativeInput",
                                      "outlined": "MuiSelect-outlined",
                                      "root": "MuiSelect-root",
                                      "select": "MuiSelect-select",
                                      "selectMenu": "MuiSelect-selectMenu",
                                    }
                                  }
                                  id="demo-simple-select"
                                  labelId="demo-simple-select-label"
                                  onChange={[Function]}
                                  value="Control"
                                >
                                  <WithStyles(ForwardRef(Input))
                                    inputComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "propTypes": Object {
                                          "IconComponent": [Function],
                                          "MenuProps": [Function],
                                          "SelectDisplayProps": [Function],
                                          "aria-label": [Function],
                                          "autoFocus": [Function],
                                          "autoWidth": [Function],
                                          "children": [Function],
                                          "className": [Function],
                                          "classes": [Function],
                                          "defaultValue": [Function],
                                          "disabled": [Function],
                                          "displayEmpty": [Function],
                                          "inputRef": [Function],
                                          "labelId": [Function],
                                          "multiple": [Function],
                                          "name": [Function],
                                          "onBlur": [Function],
                                          "onChange": [Function],
                                          "onClose": [Function],
                                          "onFocus": [Function],
                                          "onOpen": [Function],
                                          "open": [Function],
                                          "readOnly": [Function],
                                          "renderValue": [Function],
                                          "tabIndex": [Function],
                                          "type": [Function],
                                          "value": [Function],
                                          "variant": [Function],
                                        },
                                        "render": [Function],
                                      }
                                    }
                                    inputProps={
                                      Object {
                                        "IconComponent": Object {
                                          "$$typeof": Symbol(react.memo),
                                          "compare": null,
                                          "type": Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "render": [Function],
                                          },
                                        },
                                        "MenuProps": undefined,
                                        "SelectDisplayProps": Object {
                                          "id": "demo-simple-select",
                                        },
                                        "autoWidth": false,
                                        "children": Array [
                                          <WithStyles(ForwardRef(MenuItem))
                                            value="No access"
                                          >
                                            No access
                                          </WithStyles(ForwardRef(MenuItem))>,
                                          <WithStyles(ForwardRef(MenuItem))
                                            value="View"
                                          >
                                            View
                                          </WithStyles(ForwardRef(MenuItem))>,
                                          <WithStyles(ForwardRef(MenuItem))
                                            value="Edit"
                                          >
                                            Edit
                                          </WithStyles(ForwardRef(MenuItem))>,
                                          <WithStyles(ForwardRef(MenuItem))
                                            value="Append"
                                          >
                                            Append
                                          </WithStyles(ForwardRef(MenuItem))>,
                                          <WithStyles(ForwardRef(MenuItem))
                                            value="Control"
                                          >
                                            Control
                                          </WithStyles(ForwardRef(MenuItem))>,
                                        ],
                                        "classes": Object {
                                          "disabled": "Mui-disabled",
                                          "filled": "MuiSelect-filled",
                                          "icon": "MuiSelect-icon",
                                          "iconFilled": "MuiSelect-iconFilled",
                                          "iconOpen": "MuiSelect-iconOpen",
                                          "iconOutlined": "MuiSelect-iconOutlined",
                                          "nativeInput": "MuiSelect-nativeInput",
                                          "outlined": "MuiSelect-outlined",
                                          "root": "MuiSelect-root",
                                          "select": "MuiSelect-select",
                                          "selectMenu": "MuiSelect-selectMenu",
                                        },
                                        "displayEmpty": false,
                                        "labelId": "demo-simple-select-label",
                                        "multiple": false,
                                        "onClose": undefined,
                                        "onOpen": undefined,
                                        "open": undefined,
                                        "renderValue": undefined,
                                        "type": undefined,
                                        "variant": "standard",
                                      }
                                    }
                                    onChange={[Function]}
                                    value="Control"
                                  >
                                    <ForwardRef(Input)
                                      classes={
                                        Object {
                                          "colorSecondary": "MuiInput-colorSecondary",
                                          "disabled": "Mui-disabled",
                                          "error": "Mui-error",
                                          "focused": "Mui-focused",
                                          "formControl": "MuiInput-formControl",
                                          "fullWidth": "MuiInput-fullWidth",
                                          "input": "MuiInput-input",
                                          "inputMarginDense": "MuiInput-inputMarginDense",
                                          "inputMultiline": "MuiInput-inputMultiline",
                                          "inputTypeSearch": "MuiInput-inputTypeSearch",
                                          "marginDense": "MuiInput-marginDense",
                                          "multiline": "MuiInput-multiline",
                                          "root": "MuiInput-root",
                                          "underline": "MuiInput-underline",
                                        }
                                      }
                                      inputComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "propTypes": Object {
                                            "IconComponent": [Function],
                                            "MenuProps": [Function],
                                            "SelectDisplayProps": [Function],
                                            "aria-label": [Function],
                                            "autoFocus": [Function],
                                            "autoWidth": [Function],
                                            "children": [Function],
                                            "className": [Function],
                                            "classes": [Function],
                                            "defaultValue": [Function],
                                            "disabled": [Function],
                                            "displayEmpty": [Function],
                                            "inputRef": [Function],
                                            "labelId": [Function],
                                            "multiple": [Function],
                                            "name": [Function],
                                            "onBlur": [Function],
                                            "onChange": [Function],
                                            "onClose": [Function],
                                            "onFocus": [Function],
                                            "onOpen": [Function],
                                            "open": [Function],
                                            "readOnly": [Function],
                                            "renderValue": [Function],
                                            "tabIndex": [Function],
                                            "type": [Function],
                                            "value": [Function],
                                            "variant": [Function],
                                          },
                                          "render": [Function],
                                        }
                                      }
                                      inputProps={
                                        Object {
                                          "IconComponent": Object {
                                            "$$typeof": Symbol(react.memo),
                                            "compare": null,
                                            "type": Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "render": [Function],
                                            },
                                          },
                                          "MenuProps": undefined,
                                          "SelectDisplayProps": Object {
                                            "id": "demo-simple-select",
                                          },
                                          "autoWidth": false,
                                          "children": Array [
                                            <WithStyles(ForwardRef(MenuItem))
                                              value="No access"
                                            >
                                              No access
                                            </WithStyles(ForwardRef(MenuItem))>,
                                            <WithStyles(ForwardRef(MenuItem))
                                              value="View"
                                            >
                                              View
                                            </WithStyles(ForwardRef(MenuItem))>,
                                            <WithStyles(ForwardRef(MenuItem))
                                              value="Edit"
                                            >
                                              Edit
                                            </WithStyles(ForwardRef(MenuItem))>,
                                            <WithStyles(ForwardRef(MenuItem))
                                              value="Append"
                                            >
                                              Append
                                            </WithStyles(ForwardRef(MenuItem))>,
                                            <WithStyles(ForwardRef(MenuItem))
                                              value="Control"
                                            >
                                              Control
                                            </WithStyles(ForwardRef(MenuItem))>,
                                          ],
                                          "classes": Object {
                                            "disabled": "Mui-disabled",
                                            "filled": "MuiSelect-filled",
                                            "icon": "MuiSelect-icon",
                                            "iconFilled": "MuiSelect-iconFilled",
                                            "iconOpen": "MuiSelect-iconOpen",
                                            "iconOutlined": "MuiSelect-iconOutlined",
                                            "nativeInput": "MuiSelect-nativeInput",
                                            "outlined": "MuiSelect-outlined",
                                            "root": "MuiSelect-root",
                                            "select": "MuiSelect-select",
                                            "selectMenu": "MuiSelect-selectMenu",
                                          },
                                          "displayEmpty": false,
                                          "labelId": "demo-simple-select-label",
                                          "multiple": false,
                                          "onClose": undefined,
                                          "onOpen": undefined,
                                          "open": undefined,
                                          "renderValue": undefined,
                                          "type": undefined,
                                          "variant": "standard",
                                        }
                                      }
                                      onChange={[Function]}
                                      value="Control"
                                    >
                                      <WithStyles(ForwardRef(InputBase))
                                        classes={
                                          Object {
                                            "colorSecondary": "MuiInput-colorSecondary",
                                            "disabled": "Mui-disabled",
                                            "error": "Mui-error",
                                            "focused": "Mui-focused",
                                            "formControl": "MuiInput-formControl",
                                            "fullWidth": "MuiInput-fullWidth",
                                            "input": "MuiInput-input",
                                            "inputMarginDense": "MuiInput-inputMarginDense",
                                            "inputMultiline": "MuiInput-inputMultiline",
                                            "inputTypeSearch": "MuiInput-inputTypeSearch",
                                            "marginDense": "MuiInput-marginDense",
                                            "multiline": "MuiInput-multiline",
                                            "root": "MuiInput-root MuiInput-underline",
                                            "underline": null,
                                          }
                                        }
                                        fullWidth={false}
                                        inputComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "propTypes": Object {
                                              "IconComponent": [Function],
                                              "MenuProps": [Function],
                                              "SelectDisplayProps": [Function],
                                              "aria-label": [Function],
                                              "autoFocus": [Function],
                                              "autoWidth": [Function],
                                              "children": [Function],
                                              "className": [Function],
                                              "classes": [Function],
                                              "defaultValue": [Function],
                                              "disabled": [Function],
                                              "displayEmpty": [Function],
                                              "inputRef": [Function],
                                              "labelId": [Function],
                                              "multiple": [Function],
                                              "name": [Function],
                                              "onBlur": [Function],
                                              "onChange": [Function],
                                              "onClose": [Function],
                                              "onFocus": [Function],
                                              "onOpen": [Function],
                                              "open": [Function],
                                              "readOnly": [Function],
                                              "renderValue": [Function],
                                              "tabIndex": [Function],
                                              "type": [Function],
                                              "value": [Function],
                                              "variant": [Function],
                                            },
                                            "render": [Function],
                                          }
                                        }
                                        inputProps={
                                          Object {
                                            "IconComponent": Object {
                                              "$$typeof": Symbol(react.memo),
                                              "compare": null,
                                              "type": Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "render": [Function],
                                              },
                                            },
                                            "MenuProps": undefined,
                                            "SelectDisplayProps": Object {
                                              "id": "demo-simple-select",
                                            },
                                            "autoWidth": false,
                                            "children": Array [
                                              <WithStyles(ForwardRef(MenuItem))
                                                value="No access"
                                              >
                                                No access
                                              </WithStyles(ForwardRef(MenuItem))>,
                                              <WithStyles(ForwardRef(MenuItem))
                                                value="View"
                                              >
                                                View
                                              </WithStyles(ForwardRef(MenuItem))>,
                                              <WithStyles(ForwardRef(MenuItem))
                                                value="Edit"
                                              >
                                                Edit
                                              </WithStyles(ForwardRef(MenuItem))>,
                                              <WithStyles(ForwardRef(MenuItem))
                                                value="Append"
                                              >
                                                Append
                                              </WithStyles(ForwardRef(MenuItem))>,
                                              <WithStyles(ForwardRef(MenuItem))
                                                value="Control"
                                              >
                                                Control
                                              </WithStyles(ForwardRef(MenuItem))>,
                                            ],
                                            "classes": Object {
                                              "disabled": "Mui-disabled",
                                              "filled": "MuiSelect-filled",
                                              "icon": "MuiSelect-icon",
                                              "iconFilled": "MuiSelect-iconFilled",
                                              "iconOpen": "MuiSelect-iconOpen",
                                              "iconOutlined": "MuiSelect-iconOutlined",
                                              "nativeInput": "MuiSelect-nativeInput",
                                              "outlined": "MuiSelect-outlined",
                                              "root": "MuiSelect-root",
                                              "select": "MuiSelect-select",
                                              "selectMenu": "MuiSelect-selectMenu",
                                            },
                                            "displayEmpty": false,
                                            "labelId": "demo-simple-select-label",
                                            "multiple": false,
                                            "onClose": undefined,
                                            "onOpen": undefined,
                                            "open": undefined,
                                            "renderValue": undefined,
                                            "type": undefined,
                                            "variant": "standard",
                                          }
                                        }
                                        multiline={false}
                                        onChange={[Function]}
                                        type="text"
                                        value="Control"
                                      >
                                        <ForwardRef(InputBase)
                                          classes={
                                            Object {
                                              "adornedEnd": "MuiInputBase-adornedEnd",
                                              "adornedStart": "MuiInputBase-adornedStart",
                                              "colorSecondary": "MuiInputBase-colorSecondary MuiInput-colorSecondary",
                                              "disabled": "Mui-disabled Mui-disabled",
                                              "error": "Mui-error Mui-error",
                                              "focused": "Mui-focused Mui-focused",
                                              "formControl": "MuiInputBase-formControl MuiInput-formControl",
                                              "fullWidth": "MuiInputBase-fullWidth MuiInput-fullWidth",
                                              "input": "MuiInputBase-input MuiInput-input",
                                              "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
                                              "inputAdornedStart": "MuiInputBase-inputAdornedStart",
                                              "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                                              "inputMarginDense": "MuiInputBase-inputMarginDense MuiInput-inputMarginDense",
                                              "inputMultiline": "MuiInputBase-inputMultiline MuiInput-inputMultiline",
                                              "inputTypeSearch": "MuiInputBase-inputTypeSearch MuiInput-inputTypeSearch",
                                              "marginDense": "MuiInputBase-marginDense MuiInput-marginDense",
                                              "multiline": "MuiInputBase-multiline MuiInput-multiline",
                                              "root": "MuiInputBase-root MuiInput-root MuiInput-underline",
                                            }
                                          }
                                          fullWidth={false}
                                          inputComponent={
                                            Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "propTypes": Object {
                                                "IconComponent": [Function],
                                                "MenuProps": [Function],
                                                "SelectDisplayProps": [Function],
                                                "aria-label": [Function],
                                                "autoFocus": [Function],
                                                "autoWidth": [Function],
                                                "children": [Function],
                                                "className": [Function],
                                                "classes": [Function],
                                                "defaultValue": [Function],
                                                "disabled": [Function],
                                                "displayEmpty": [Function],
                                                "inputRef": [Function],
                                                "labelId": [Function],
                                                "multiple": [Function],
                                                "name": [Function],
                                                "onBlur": [Function],
                                                "onChange": [Function],
                                                "onClose": [Function],
                                                "onFocus": [Function],
                                                "onOpen": [Function],
                                                "open": [Function],
                                                "readOnly": [Function],
                                                "renderValue": [Function],
                                                "tabIndex": [Function],
                                                "type": [Function],
                                                "value": [Function],
                                                "variant": [Function],
                                              },
                                              "render": [Function],
                                            }
                                          }
                                          inputProps={
                                            Object {
                                              "IconComponent": Object {
                                                "$$typeof": Symbol(react.memo),
                                                "compare": null,
                                                "type": Object {
                                                  "$$typeof": Symbol(react.forward_ref),
                                                  "render": [Function],
                                                },
                                              },
                                              "MenuProps": undefined,
                                              "SelectDisplayProps": Object {
                                                "id": "demo-simple-select",
                                              },
                                              "autoWidth": false,
                                              "children": Array [
                                                <WithStyles(ForwardRef(MenuItem))
                                                  value="No access"
                                                >
                                                  No access
                                                </WithStyles(ForwardRef(MenuItem))>,
                                                <WithStyles(ForwardRef(MenuItem))
                                                  value="View"
                                                >
                                                  View
                                                </WithStyles(ForwardRef(MenuItem))>,
                                                <WithStyles(ForwardRef(MenuItem))
                                                  value="Edit"
                                                >
                                                  Edit
                                                </WithStyles(ForwardRef(MenuItem))>,
                                                <WithStyles(ForwardRef(MenuItem))
                                                  value="Append"
                                                >
                                                  Append
                                                </WithStyles(ForwardRef(MenuItem))>,
                                                <WithStyles(ForwardRef(MenuItem))
                                                  value="Control"
                                                >
                                                  Control
                                                </WithStyles(ForwardRef(MenuItem))>,
                                              ],
                                              "classes": Object {
                                                "disabled": "Mui-disabled",
                                                "filled": "MuiSelect-filled",
                                                "icon": "MuiSelect-icon",
                                                "iconFilled": "MuiSelect-iconFilled",
                                                "iconOpen": "MuiSelect-iconOpen",
                                                "iconOutlined": "MuiSelect-iconOutlined",
                                                "nativeInput": "MuiSelect-nativeInput",
                                                "outlined": "MuiSelect-outlined",
                                                "root": "MuiSelect-root",
                                                "select": "MuiSelect-select",
                                                "selectMenu": "MuiSelect-selectMenu",
                                              },
                                              "displayEmpty": false,
                                              "labelId": "demo-simple-select-label",
                                              "multiple": false,
                                              "onClose": undefined,
                                              "onOpen": undefined,
                                              "open": undefined,
                                              "renderValue": undefined,
                                              "type": undefined,
                                              "variant": "standard",
                                            }
                                          }
                                          multiline={false}
                                          onChange={[Function]}
                                          type="text"
                                          value="Control"
                                        >
                                          <div
                                            className="MuiInputBase-root MuiInput-root MuiInput-underline"
                                            onClick={[Function]}
                                          >
                                            <ForwardRef(SelectInput)
                                              IconComponent={
                                                Object {
                                                  "$$typeof": Symbol(react.memo),
                                                  "compare": null,
                                                  "type": Object {
                                                    "$$typeof": Symbol(react.forward_ref),
                                                    "render": [Function],
                                                  },
                                                }
                                              }
                                              SelectDisplayProps={
                                                Object {
                                                  "id": "demo-simple-select",
                                                }
                                              }
                                              autoWidth={false}
                                              className="MuiInputBase-input MuiInput-input"
                                              classes={
                                                Object {
                                                  "disabled": "Mui-disabled",
                                                  "filled": "MuiSelect-filled",
                                                  "icon": "MuiSelect-icon",
                                                  "iconFilled": "MuiSelect-iconFilled",
                                                  "iconOpen": "MuiSelect-iconOpen",
                                                  "iconOutlined": "MuiSelect-iconOutlined",
                                                  "nativeInput": "MuiSelect-nativeInput",
                                                  "outlined": "MuiSelect-outlined",
                                                  "root": "MuiSelect-root",
                                                  "select": "MuiSelect-select",
                                                  "selectMenu": "MuiSelect-selectMenu",
                                                }
                                              }
                                              displayEmpty={false}
                                              inputRef={[Function]}
                                              labelId="demo-simple-select-label"
                                              multiple={false}
                                              onAnimationStart={[Function]}
                                              onBlur={[Function]}
                                              onChange={[Function]}
                                              onFocus={[Function]}
                                              value="Control"
                                              variant="standard"
                                            >
                                              <div
                                                aria-haspopup="listbox"
                                                aria-labelledby="demo-simple-select-label demo-simple-select"
                                                className="MuiSelect-root MuiSelect-select MuiSelect-selectMenu MuiInputBase-input MuiInput-input"
                                                id="demo-simple-select"
                                                onBlur={[Function]}
                                                onFocus={[Function]}
                                                onKeyDown={[Function]}
                                                onMouseDown={[Function]}
                                                role="button"
                                                tabIndex={0}
                                              >
                                                Control
                                              </div>
                                              <input
                                                aria-hidden={true}
                                                className="MuiSelect-nativeInput"
                                                onAnimationStart={[Function]}
                                                onChange={[Function]}
                                                tabIndex={-1}
                                                value="Control"
                                              />
                                              <ForwardRef(ArrowDropDownIcon)
                                                className="MuiSelect-icon"
                                              >
                                                <WithStyles(ForwardRef(SvgIcon))
                                                  className="MuiSelect-icon"
                                                >
                                                  <ForwardRef(SvgIcon)
                                                    className="MuiSelect-icon"
                                                    classes={
                                                      Object {
                                                        "colorAction": "MuiSvgIcon-colorAction",
                                                        "colorDisabled": "MuiSvgIcon-colorDisabled",
                                                        "colorError": "MuiSvgIcon-colorError",
                                                        "colorPrimary": "MuiSvgIcon-colorPrimary",
                                                        "colorSecondary": "MuiSvgIcon-colorSecondary",
                                                        "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                                        "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                                        "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                                        "root": "MuiSvgIcon-root",
                                                      }
                                                    }
                                                  >
                                                    <svg
                                                      aria-hidden={true}
                                                      className="MuiSvgIcon-root MuiSelect-icon"
                                                      focusable="false"
                                                      viewBox="0 0 24 24"
                                                    >
                                                      <path
                                                        d="M7 10l5 5 5-5z"
                                                      />
                                                    </svg>
                                                  </ForwardRef(SvgIcon)>
                                                </WithStyles(ForwardRef(SvgIcon))>
                                              </ForwardRef(ArrowDropDownIcon)>
                                              <WithStyles(ForwardRef(Menu))
                                                MenuListProps={
                                                  Object {
                                                    "aria-labelledby": "demo-simple-select-label",
                                                    "disableListWrap": true,
                                                    "role": "listbox",
                                                  }
                                                }
                                                PaperProps={
                                                  Object {
                                                    "style": Object {
                                                      "minWidth": undefined,
                                                    },
                                                  }
                                                }
                                                anchorEl={
                                                  <div
                                                    aria-haspopup="listbox"
                                                    aria-labelledby="demo-simple-select-label demo-simple-select"
                                                    class="MuiSelect-root MuiSelect-select MuiSelect-selectMenu MuiInputBase-input MuiInput-input"
                                                    id="demo-simple-select"
                                                    role="button"
                                                    tabindex="0"
                                                  >
                                                    Control
                                                  </div>
                                                }
                                                id="menu-"
                                                onClose={[Function]}
                                                open={false}
                                              >
                                                <ForwardRef(Menu)
                                                  MenuListProps={
                                                    Object {
                                                      "aria-labelledby": "demo-simple-select-label",
                                                      "disableListWrap": true,
                                                      "role": "listbox",
                                                    }
                                                  }
                                                  PaperProps={
                                                    Object {
                                                      "style": Object {
                                                        "minWidth": undefined,
                                                      },
                                                    }
                                                  }
                                                  anchorEl={
                                                    <div
                                                      aria-haspopup="listbox"
                                                      aria-labelledby="demo-simple-select-label demo-simple-select"
                                                      class="MuiSelect-root MuiSelect-select MuiSelect-selectMenu MuiInputBase-input MuiInput-input"
                                                      id="demo-simple-select"
                                                      role="button"
                                                      tabindex="0"
                                                    >
                                                      Control
                                                    </div>
                                                  }
                                                  classes={
                                                    Object {
                                                      "list": "MuiMenu-list",
                                                      "paper": "MuiMenu-paper",
                                                    }
                                                  }
                                                  id="menu-"
                                                  onClose={[Function]}
                                                  open={false}
                                                >
                                                  <WithStyles(ForwardRef(Popover))
                                                    PaperProps={
                                                      Object {
                                                        "classes": Object {
                                                          "root": "MuiMenu-paper",
                                                        },
                                                        "style": Object {
                                                          "minWidth": undefined,
                                                        },
                                                      }
                                                    }
                                                    anchorEl={
                                                      <div
                                                        aria-haspopup="listbox"
                                                        aria-labelledby="demo-simple-select-label demo-simple-select"
                                                        class="MuiSelect-root MuiSelect-select MuiSelect-selectMenu MuiInputBase-input MuiInput-input"
                                                        id="demo-simple-select"
                                                        role="button"
                                                        tabindex="0"
                                                      >
                                                        Control
                                                      </div>
                                                    }
                                                    anchorOrigin={
                                                      Object {
                                                        "horizontal": "left",
                                                        "vertical": "top",
                                                      }
                                                    }
                                                    getContentAnchorEl={[Function]}
                                                    id="menu-"
                                                    onClose={[Function]}
                                                    onEntering={[Function]}
                                                    open={false}
                                                    transformOrigin={
                                                      Object {
                                                        "horizontal": "left",
                                                        "vertical": "top",
                                                      }
                                                    }
                                                    transitionDuration="auto"
                                                  >
                                                    <ForwardRef(Popover)
                                                      PaperProps={
                                                        Object {
                                                          "classes": Object {
                                                            "root": "MuiMenu-paper",
                                                          },
                                                          "style": Object {
                                                            "minWidth": undefined,
                                                          },
                                                        }
                                                      }
                                                      anchorEl={
                                                        <div
                                                          aria-haspopup="listbox"
                                                          aria-labelledby="demo-simple-select-label demo-simple-select"
                                                          class="MuiSelect-root MuiSelect-select MuiSelect-selectMenu MuiInputBase-input MuiInput-input"
                                                          id="demo-simple-select"
                                                          role="button"
                                                          tabindex="0"
                                                        >
                                                          Control
                                                        </div>
                                                      }
                                                      anchorOrigin={
                                                        Object {
                                                          "horizontal": "left",
                                                          "vertical": "top",
                                                        }
                                                      }
                                                      classes={
                                                        Object {
                                                          "paper": "MuiPopover-paper",
                                                          "root": "MuiPopover-root",
                                                        }
                                                      }
                                                      getContentAnchorEl={[Function]}
                                                      id="menu-"
                                                      onClose={[Function]}
                                                      onEntering={[Function]}
                                                      open={false}
                                                      transformOrigin={
                                                        Object {
                                                          "horizontal": "left",
                                                          "vertical": "top",
                                                        }
                                                      }
                                                      transitionDuration="auto"
                                                    >
                                                      <ForwardRef(Modal)
                                                        BackdropProps={
                                                          Object {
                                                            "invisible": true,
                                                          }
                                                        }
                                                        className="MuiPopover-root"
                                                        container={<body />}
                                                        id="menu-"
                                                        onClose={[Function]}
                                                        open={false}
                                                      />
                                                    </ForwardRef(Popover)>
                                                  </WithStyles(ForwardRef(Popover))>
                                                </ForwardRef(Menu)>
                                              </WithStyles(ForwardRef(Menu))>
                                            </ForwardRef(SelectInput)>
                                          </div>
                                        </ForwardRef(InputBase)>
                                      </WithStyles(ForwardRef(InputBase))>
                                    </ForwardRef(Input)>
                                  </WithStyles(ForwardRef(Input))>
                                </ForwardRef(Select)>
                              </WithStyles(ForwardRef(Select))>
                            </section>
                          </PermissionsForm>
                        </li>
                      </ForwardRef(ListItem)>
                    </WithStyles(ForwardRef(ListItem))>
                  </Permission>
                </ThirdPartyPermissionsList>
              </ul>
            </ForwardRef(List)>
          </WithStyles(ForwardRef(List))>
        </section>
      </ThirdPartyPermissions>
      <WithStyles(ForwardRef(Divider))>
        <ForwardRef(Divider)
          classes={
            Object {
              "absolute": "MuiDivider-absolute",
              "flexItem": "MuiDivider-flexItem",
              "inset": "MuiDivider-inset",
              "light": "MuiDivider-light",
              "middle": "MuiDivider-middle",
              "root": "MuiDivider-root",
              "vertical": "MuiDivider-vertical",
            }
          }
        >
          <hr
            className="MuiDivider-root"
          />
        </ForwardRef(Divider)>
      </WithStyles(ForwardRef(Divider))>
      <section
        className="makeStyles-centeredSection-2"
      >
        <h5
          className="makeStyles-content-h5-16"
          title="iri"
        >
          Grant Permission
        </h5>
        <WithStyles(ForwardRef(FormControl))
          className="makeStyles-agentInput-10"
        >
          <ForwardRef(FormControl)
            className="makeStyles-agentInput-10"
            classes={
              Object {
                "fullWidth": "MuiFormControl-fullWidth",
                "marginDense": "MuiFormControl-marginDense",
                "marginNormal": "MuiFormControl-marginNormal",
                "root": "MuiFormControl-root",
              }
            }
          >
            <div
              className="MuiFormControl-root makeStyles-agentInput-10"
            >
              <WithStyles(ForwardRef(InputLabel))
                htmlFor="agent-web-id"
              >
                <ForwardRef(InputLabel)
                  classes={
                    Object {
                      "animated": "MuiInputLabel-animated",
                      "asterisk": "MuiInputLabel-asterisk",
                      "disabled": "Mui-disabled",
                      "error": "Mui-error",
                      "filled": "MuiInputLabel-filled",
                      "focused": "Mui-focused",
                      "formControl": "MuiInputLabel-formControl",
                      "marginDense": "MuiInputLabel-marginDense",
                      "outlined": "MuiInputLabel-outlined",
                      "required": "Mui-required",
                      "root": "MuiInputLabel-root",
                      "shrink": "MuiInputLabel-shrink",
                    }
                  }
                  htmlFor="agent-web-id"
                >
                  <WithStyles(ForwardRef(FormLabel))
                    className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink"
                    classes={
                      Object {
                        "asterisk": "MuiInputLabel-asterisk",
                        "disabled": "Mui-disabled",
                        "error": "Mui-error",
                        "focused": "Mui-focused",
                        "required": "Mui-required",
                      }
                    }
                    data-shrink={true}
                    htmlFor="agent-web-id"
                  >
                    <ForwardRef(FormLabel)
                      className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink"
                      classes={
                        Object {
                          "asterisk": "MuiFormLabel-asterisk MuiInputLabel-asterisk",
                          "colorSecondary": "MuiFormLabel-colorSecondary",
                          "disabled": "Mui-disabled Mui-disabled",
                          "error": "Mui-error Mui-error",
                          "filled": "MuiFormLabel-filled",
                          "focused": "Mui-focused Mui-focused",
                          "required": "Mui-required Mui-required",
                          "root": "MuiFormLabel-root",
                        }
                      }
                      data-shrink={true}
                      htmlFor="agent-web-id"
                    >
                      <label
                        className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink"
                        data-shrink={true}
                        htmlFor="agent-web-id"
                      >
                        Web ID
                      </label>
                    </ForwardRef(FormLabel)>
                  </WithStyles(ForwardRef(FormLabel))>
                </ForwardRef(InputLabel)>
              </WithStyles(ForwardRef(InputLabel))>
              <WithStyles(ForwardRef(Input))
                id="agent-web-id"
                onChange={[Function]}
                startAdornment={
                  <WithStyles(ForwardRef(InputAdornment))
                    position="start"
                  >
                    <Memo(AccountCircleIcon) />
                  </WithStyles(ForwardRef(InputAdornment))>
                }
                value=""
              >
                <ForwardRef(Input)
                  classes={
                    Object {
                      "colorSecondary": "MuiInput-colorSecondary",
                      "disabled": "Mui-disabled",
                      "error": "Mui-error",
                      "focused": "Mui-focused",
                      "formControl": "MuiInput-formControl",
                      "fullWidth": "MuiInput-fullWidth",
                      "input": "MuiInput-input",
                      "inputMarginDense": "MuiInput-inputMarginDense",
                      "inputMultiline": "MuiInput-inputMultiline",
                      "inputTypeSearch": "MuiInput-inputTypeSearch",
                      "marginDense": "MuiInput-marginDense",
                      "multiline": "MuiInput-multiline",
                      "root": "MuiInput-root",
                      "underline": "MuiInput-underline",
                    }
                  }
                  id="agent-web-id"
                  onChange={[Function]}
                  startAdornment={
                    <WithStyles(ForwardRef(InputAdornment))
                      position="start"
                    >
                      <Memo(AccountCircleIcon) />
                    </WithStyles(ForwardRef(InputAdornment))>
                  }
                  value=""
                >
                  <WithStyles(ForwardRef(InputBase))
                    classes={
                      Object {
                        "colorSecondary": "MuiInput-colorSecondary",
                        "disabled": "Mui-disabled",
                        "error": "Mui-error",
                        "focused": "Mui-focused",
                        "formControl": "MuiInput-formControl",
                        "fullWidth": "MuiInput-fullWidth",
                        "input": "MuiInput-input",
                        "inputMarginDense": "MuiInput-inputMarginDense",
                        "inputMultiline": "MuiInput-inputMultiline",
                        "inputTypeSearch": "MuiInput-inputTypeSearch",
                        "marginDense": "MuiInput-marginDense",
                        "multiline": "MuiInput-multiline",
                        "root": "MuiInput-root MuiInput-underline",
                        "underline": null,
                      }
                    }
                    fullWidth={false}
                    id="agent-web-id"
                    inputComponent="input"
                    multiline={false}
                    onChange={[Function]}
                    startAdornment={
                      <WithStyles(ForwardRef(InputAdornment))
                        position="start"
                      >
                        <Memo(AccountCircleIcon) />
                      </WithStyles(ForwardRef(InputAdornment))>
                    }
                    type="text"
                    value=""
                  >
                    <ForwardRef(InputBase)
                      classes={
                        Object {
                          "adornedEnd": "MuiInputBase-adornedEnd",
                          "adornedStart": "MuiInputBase-adornedStart",
                          "colorSecondary": "MuiInputBase-colorSecondary MuiInput-colorSecondary",
                          "disabled": "Mui-disabled Mui-disabled",
                          "error": "Mui-error Mui-error",
                          "focused": "Mui-focused Mui-focused",
                          "formControl": "MuiInputBase-formControl MuiInput-formControl",
                          "fullWidth": "MuiInputBase-fullWidth MuiInput-fullWidth",
                          "input": "MuiInputBase-input MuiInput-input",
                          "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
                          "inputAdornedStart": "MuiInputBase-inputAdornedStart",
                          "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                          "inputMarginDense": "MuiInputBase-inputMarginDense MuiInput-inputMarginDense",
                          "inputMultiline": "MuiInputBase-inputMultiline MuiInput-inputMultiline",
                          "inputTypeSearch": "MuiInputBase-inputTypeSearch MuiInput-inputTypeSearch",
                          "marginDense": "MuiInputBase-marginDense MuiInput-marginDense",
                          "multiline": "MuiInputBase-multiline MuiInput-multiline",
                          "root": "MuiInputBase-root MuiInput-root MuiInput-underline",
                        }
                      }
                      fullWidth={false}
                      id="agent-web-id"
                      inputComponent="input"
                      multiline={false}
                      onChange={[Function]}
                      startAdornment={
                        <WithStyles(ForwardRef(InputAdornment))
                          position="start"
                        >
                          <Memo(AccountCircleIcon) />
                        </WithStyles(ForwardRef(InputAdornment))>
                      }
                      type="text"
                      value=""
                    >
                      <div
                        className="MuiInputBase-root MuiInput-root MuiInput-underline MuiInputBase-formControl MuiInput-formControl MuiInputBase-adornedStart"
                        onClick={[Function]}
                      >
                        <WithStyles(ForwardRef(InputAdornment))
                          position="start"
                        >
                          <ForwardRef(InputAdornment)
                            classes={
                              Object {
                                "disablePointerEvents": "MuiInputAdornment-disablePointerEvents",
                                "filled": "MuiInputAdornment-filled",
                                "hiddenLabel": "MuiInputAdornment-hiddenLabel",
                                "marginDense": "MuiInputAdornment-marginDense",
                                "positionEnd": "MuiInputAdornment-positionEnd",
                                "positionStart": "MuiInputAdornment-positionStart",
                                "root": "MuiInputAdornment-root",
                              }
                            }
                            position="start"
                          >
                            <div
                              className="MuiInputAdornment-root MuiInputAdornment-positionStart"
                            >
                              <ForwardRef>
                                <WithStyles(ForwardRef(SvgIcon))>
                                  <ForwardRef(SvgIcon)
                                    classes={
                                      Object {
                                        "colorAction": "MuiSvgIcon-colorAction",
                                        "colorDisabled": "MuiSvgIcon-colorDisabled",
                                        "colorError": "MuiSvgIcon-colorError",
                                        "colorPrimary": "MuiSvgIcon-colorPrimary",
                                        "colorSecondary": "MuiSvgIcon-colorSecondary",
                                        "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                        "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                        "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                        "root": "MuiSvgIcon-root",
                                      }
                                    }
                                  >
                                    <svg
                                      aria-hidden={true}
                                      className="MuiSvgIcon-root"
                                      focusable="false"
                                      viewBox="0 0 24 24"
                                    >
                                      <path
                                        d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 3c1.66 0 3 1.34 3 3s-1.34 3-3 3-3-1.34-3-3 1.34-3 3-3zm0 14.2c-2.5 0-4.71-1.28-6-3.22.03-1.99 4-3.08 6-3.08 1.99 0 5.97 1.09 6 3.08-1.29 1.94-3.5 3.22-6 3.22z"
                                      />
                                    </svg>
                                  </ForwardRef(SvgIcon)>
                                </WithStyles(ForwardRef(SvgIcon))>
                              </ForwardRef>
                            </div>
                          </ForwardRef(InputAdornment)>
                        </WithStyles(ForwardRef(InputAdornment))>
                        <input
                          aria-invalid={false}
                          className="MuiInputBase-input MuiInput-input MuiInputBase-inputAdornedStart"
                          disabled={false}
                          id="agent-web-id"
                          onAnimationStart={[Function]}
                          onBlur={[Function]}
                          onChange={[Function]}
                          onFocus={[Function]}
                          required={false}
                          type="text"
                          value=""
                        />
                      </div>
                    </ForwardRef(InputBase)>
                  </WithStyles(ForwardRef(InputBase))>
                </ForwardRef(Input)>
              </WithStyles(ForwardRef(Input))>
            </div>
          </ForwardRef(FormControl)>
        </WithStyles(ForwardRef(FormControl))>
        <WithStyles(ForwardRef(Button))
          onClick={[Function]}
          variant="contained"
        >
          <ForwardRef(Button)
            classes={
              Object {
                "colorInherit": "MuiButton-colorInherit",
                "contained": "MuiButton-contained",
                "containedPrimary": "MuiButton-containedPrimary",
                "containedSecondary": "MuiButton-containedSecondary",
                "containedSizeLarge": "MuiButton-containedSizeLarge",
                "containedSizeSmall": "MuiButton-containedSizeSmall",
                "disableElevation": "MuiButton-disableElevation",
                "disabled": "Mui-disabled",
                "endIcon": "MuiButton-endIcon",
                "focusVisible": "Mui-focusVisible",
                "fullWidth": "MuiButton-fullWidth",
                "iconSizeLarge": "MuiButton-iconSizeLarge",
                "iconSizeMedium": "MuiButton-iconSizeMedium",
                "iconSizeSmall": "MuiButton-iconSizeSmall",
                "label": "MuiButton-label",
                "outlined": "MuiButton-outlined",
                "outlinedPrimary": "MuiButton-outlinedPrimary",
                "outlinedSecondary": "MuiButton-outlinedSecondary",
                "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                "root": "MuiButton-root",
                "sizeLarge": "MuiButton-sizeLarge",
                "sizeSmall": "MuiButton-sizeSmall",
                "startIcon": "MuiButton-startIcon",
                "text": "MuiButton-text",
                "textPrimary": "MuiButton-textPrimary",
                "textSecondary": "MuiButton-textSecondary",
                "textSizeLarge": "MuiButton-textSizeLarge",
                "textSizeSmall": "MuiButton-textSizeSmall",
              }
            }
            onClick={[Function]}
            variant="contained"
          >
            <WithStyles(ForwardRef(ButtonBase))
              className="MuiButton-root MuiButton-contained"
              component="button"
              disabled={false}
              focusRipple={true}
              focusVisibleClassName="Mui-focusVisible"
              onClick={[Function]}
              type="button"
            >
              <ForwardRef(ButtonBase)
                className="MuiButton-root MuiButton-contained"
                classes={
                  Object {
                    "disabled": "Mui-disabled",
                    "focusVisible": "Mui-focusVisible",
                    "root": "MuiButtonBase-root",
                  }
                }
                component="button"
                disabled={false}
                focusRipple={true}
                focusVisibleClassName="Mui-focusVisible"
                onClick={[Function]}
                type="button"
              >
                <button
                  className="MuiButtonBase-root MuiButton-root MuiButton-contained"
                  disabled={false}
                  onBlur={[Function]}
                  onClick={[Function]}
                  onDragLeave={[Function]}
                  onFocus={[Function]}
                  onKeyDown={[Function]}
                  onKeyUp={[Function]}
                  onMouseDown={[Function]}
                  onMouseLeave={[Function]}
                  onMouseUp={[Function]}
                  onTouchEnd={[Function]}
                  onTouchMove={[Function]}
                  onTouchStart={[Function]}
                  tabIndex={0}
                  type="button"
                >
                  <span
                    className="MuiButton-label"
                  >
                    Add
                  </span>
                  <WithStyles(memo)
                    center={false}
                  >
                    <ForwardRef(TouchRipple)
                      center={false}
                      classes={
                        Object {
                          "child": "MuiTouchRipple-child",
                          "childLeaving": "MuiTouchRipple-childLeaving",
                          "childPulsate": "MuiTouchRipple-childPulsate",
                          "ripple": "MuiTouchRipple-ripple",
                          "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                          "rippleVisible": "MuiTouchRipple-rippleVisible",
                          "root": "MuiTouchRipple-root",
                        }
                      }
                    >
                      <span
                        className="MuiTouchRipple-root"
                      >
                        <TransitionGroup
                          childFactory={[Function]}
                          component={null}
                          exit={true}
                        />
                      </span>
                    </ForwardRef(TouchRipple)>
                  </WithStyles(memo)>
                </button>
              </ForwardRef(ButtonBase)>
            </WithStyles(ForwardRef(ButtonBase))>
          </ForwardRef(Button)>
        </WithStyles(ForwardRef(Button))>
      </section>
      <section
        className="makeStyles-centeredSection-2"
      >
        <AddedAgents
          addedAgents={Array []}
          classes={
            Object {
              "agentInput": "makeStyles-agentInput-10",
              "avatar": "makeStyles-avatar-1",
              "centeredSection": "makeStyles-centeredSection-2",
              "content": "makeStyles-content-22",
              "content-blockquote": "makeStyles-content-blockquote-20",
              "content-h1": "makeStyles-content-h1-12",
              "content-h2": "makeStyles-content-h2-13",
              "content-h3": "makeStyles-content-h3-14",
              "content-h4": "makeStyles-content-h4-15",
              "content-h5": "makeStyles-content-h5-16",
              "content-h6": "makeStyles-content-h6-17",
              "content-ol": "makeStyles-content-ol-19",
              "content-p": "makeStyles-content-p-21",
              "content-ul": "makeStyles-content-ul-18",
              "detailText": "makeStyles-detailText-7",
              "downloadButton": "makeStyles-downloadButton-9",
              "formListItem": "makeStyles-formListItem-6",
              "headerSection": "makeStyles-headerSection-3",
              "image": "makeStyles-image-11",
              "listItem": "makeStyles-listItem-5",
              "raw": "makeStyles-raw-4",
              "typeValue": "makeStyles-typeValue-8",
            }
          }
          iri="iri"
          setAddedAgents={[Function]}
          setThirdPartyPermissions={[Function]}
          thirdPartyPermissions={
            Array [
              Object {
                "acl": Object {
                  "append": true,
                  "control": true,
                  "read": true,
                  "write": true,
                },
                "alias": "Control",
                "profile": Object {
                  "webId": "agentId",
                },
                "webId": "agentId",
              },
            ]
          }
        />
      </section>
    </ResourceSharing>
  </ThemeProvider>
</WithTheme>
`;

exports[`ThirdPartyPermissions it renders NoThirdPartyPermissions when the list is empty 1`] = `
<WithTheme
  theme={
    Object {
      "breakpoints": Object {
        "between": [Function],
        "down": [Function],
        "keys": Array [
          "xs",
          "sm",
          "md",
          "lg",
          "xl",
        ],
        "only": [Function],
        "up": [Function],
        "values": Object {
          "lg": 1280,
          "md": 960,
          "sm": 600,
          "xl": 1920,
          "xs": 0,
        },
        "width": [Function],
      },
      "direction": "ltr",
      "iconSet": Object {
        "config": Object {
          "cssFiles": Array [
            "css/all.css",
          ],
          "fonts": Array [
            Object {
              "fontFace": "
font-family: 'Font Awesome 5 Free';
font-style: normal;
font-weight: 900;
font-display: block;",
              "fontsPath": "./webfonts",
              "licensePath": "./LICENSE.txt",
              "source": "fa-solid-900.eot",
              "sources": Array [
                Object {
                  "format": "embedded-opentype",
                  "path": "fa-solid-900.eot",
                  "urlAddition": "?#iefix",
                },
                Object {
                  "format": "woff2",
                  "path": "fa-solid-900.woff2",
                },
                Object {
                  "format": "woff",
                  "path": "fa-solid-900.woff",
                },
                Object {
                  "format": "truetype",
                  "path": "fa-solid-900.ttf",
                },
                Object {
                  "format": "svg",
                  "path": "fa-solid-900.svg",
                  "urlAddition": "#fontawesome",
                },
              ],
            },
          ],
          "label": "Font Awesome Solid",
          "name": "fontawesome-solid",
          "npmModule": "@fortawesome/fontawesome-free",
          "type": 0,
        },
        "iconColor": [Function],
        "styles": [Function],
      },
      "icons": Object {
        "config": Object {
          "cssFiles": Array [
            "css/all.css",
          ],
          "fonts": Array [
            Object {
              "fontFace": "
font-family: 'Font Awesome 5 Free';
font-style: normal;
font-weight: 900;
font-display: block;",
              "fontsPath": "./webfonts",
              "licensePath": "./LICENSE.txt",
              "source": "fa-solid-900.eot",
              "sources": Array [
                Object {
                  "format": "embedded-opentype",
                  "path": "fa-solid-900.eot",
                  "urlAddition": "?#iefix",
                },
                Object {
                  "format": "woff2",
                  "path": "fa-solid-900.woff2",
                },
                Object {
                  "format": "woff",
                  "path": "fa-solid-900.woff",
                },
                Object {
                  "format": "truetype",
                  "path": "fa-solid-900.ttf",
                },
                Object {
                  "format": "svg",
                  "path": "fa-solid-900.svg",
                  "urlAddition": "#fontawesome",
                },
              ],
            },
          ],
          "label": "Font Awesome Solid",
          "name": "fontawesome-solid",
          "npmModule": "@fortawesome/fontawesome-free",
          "type": 0,
        },
        "iconColor": [Function],
        "styles": [Function],
      },
      "label": "SDK Default",
      "licenses": Array [
        "fonts/Raleway/OFL.txt",
        "fonts/Roboto/LICENSE.txt",
      ],
      "localFonts": Object {
        "fonts/Raleway/Raleway-Bold.woff2": [Function],
        "fonts/Raleway/Raleway-Regular.woff2": [Function],
        "fonts/Roboto/Roboto-Bold.woff2": [Function],
        "fonts/Roboto/Roboto-Light.woff2": [Function],
        "fonts/Roboto/Roboto-Regular.woff2": [Function],
      },
      "mixins": Object {
        "gutters": [Function],
        "toolbar": Object {
          "@media (min-width:0px) and (orientation: landscape)": Object {
            "minHeight": 48,
          },
          "@media (min-width:600px)": Object {
            "minHeight": 64,
          },
          "minHeight": 56,
        },
      },
      "name": "sdk-default",
      "overrides": Object {},
      "palette": Object {
        "action": Object {
          "activatedOpacity": 0.12,
          "active": "rgba(0, 0, 0, 0.54)",
          "disabled": "rgba(0, 0, 0, 0.26)",
          "disabledBackground": "rgba(0, 0, 0, 0.12)",
          "disabledOpacity": 0.38,
          "focus": "rgba(0, 0, 0, 0.12)",
          "focusOpacity": 0.12,
          "hover": "rgba(0, 0, 0, 0.04)",
          "hoverOpacity": 0.04,
          "selected": "rgba(0, 0, 0, 0.08)",
          "selectedOpacity": 0.08,
        },
        "adjustAlpha": [Function],
        "augmentColor": [Function],
        "background": Object {
          "default": "#FFFFFF",
          "paper": "#fff",
        },
        "common": Object {
          "black": "#000",
          "white": "#fff",
        },
        "contrastThreshold": 3,
        "divider": "rgba(0, 0, 0, 0.12)",
        "error": Object {
          "contrastText": "#fff",
          "dark": "#d32f2f",
          "light": "#e57373",
          "main": "#f44336",
        },
        "getContrastText": [Function],
        "grey": Object {
          "100": "#f5f5f5",
          "200": "#eeeeee",
          "300": "#e0e0e0",
          "400": "#bdbdbd",
          "50": "#fafafa",
          "500": "#9e9e9e",
          "600": "#757575",
          "700": "#616161",
          "800": "#424242",
          "900": "#212121",
          "A100": "#d5d5d5",
          "A200": "#aaaaaa",
          "A400": "#303030",
          "A700": "#616161",
        },
        "info": Object {
          "contrastText": "#fff",
          "dark": "#1976d2",
          "light": "#64b5f6",
          "main": "#2196f3",
        },
        "primary": Object {
          "contrastText": "#fff",
          "dark": "rgb(86, 53, 178)",
          "light": "rgb(150, 112, 255)",
          "main": "#7C4DFF",
        },
        "secondary": Object {
          "contrastText": "rgba(0, 0, 0, 0.87)",
          "dark": "#083575",
          "light": "#01C9EA",
          "main": "#18A9E6",
        },
        "success": Object {
          "contrastText": "rgba(0, 0, 0, 0.87)",
          "dark": "#388e3c",
          "light": "#81c784",
          "main": "#4caf50",
        },
        "text": Object {
          "disabled": "rgba(0, 0, 0, 0.38)",
          "hint": "rgba(0, 0, 0, 0.38)",
          "primary": "rgba(0, 0, 0, 0.87)",
          "secondary": "rgba(0, 0, 0, 0.54)",
        },
        "tonalOffset": 0.2,
        "type": "light",
        "warning": Object {
          "contrastText": "rgba(0, 0, 0, 0.87)",
          "dark": "#f57c00",
          "light": "#ffb74d",
          "main": "#ff9800",
        },
      },
      "props": Object {},
      "shadows": Array [
        "none",
        "0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12)",
        "0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12)",
        "0px 3px 3px -2px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 1px 8px 0px rgba(0,0,0,0.12)",
        "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
        "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
        "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
        "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
        "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
        "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
        "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
        "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
        "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
        "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
        "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
        "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
        "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
        "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
        "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
        "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
        "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
        "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
        "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
        "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
        "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
      ],
      "shape": Object {
        "borderRadius": 4,
      },
      "spacing": [Function],
      "stylesheets": Array [
        "https://fonts.googleapis.com/css?family=Raleway:400,700|Roboto:300,400,700&display=swap",
      ],
      "transitions": Object {
        "create": [Function],
        "duration": Object {
          "complex": 375,
          "enteringScreen": 225,
          "leavingScreen": 195,
          "short": 250,
          "shorter": 200,
          "shortest": 150,
          "standard": 300,
        },
        "easing": Object {
          "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
          "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
          "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
          "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
        },
        "getAutoHeightDuration": [Function],
      },
      "typography": Object {
        "body": Object {
          "fontFamily": "\\"Roboto\\", sans-serif",
          "fontSize": "0.875rem",
          "fontWeight": 300,
          "letterSpacing": "0.01071em",
          "lineHeight": 1.43,
        },
        "body1": Object {
          "fontFamily": "\\"Raleway\\", \\"Roboto\\", sans-serif",
          "fontSize": "1rem",
          "fontWeight": 300,
          "letterSpacing": "0.00938em",
          "lineHeight": 1.5,
        },
        "body2": Object {
          "fontFamily": "\\"Roboto\\", sans-serif",
          "fontSize": "0.875rem",
          "fontWeight": 300,
          "letterSpacing": "0.01071em",
          "lineHeight": 1.43,
        },
        "button": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "0.875rem",
          "fontWeight": 400,
          "letterSpacing": "0.02857em",
          "lineHeight": 1.75,
          "textTransform": "uppercase",
        },
        "caption": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "0.75rem",
          "fontWeight": 400,
          "letterSpacing": "0.03333em",
          "lineHeight": 1.66,
        },
        "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
        "fontSize": 14,
        "fontWeightBold": 700,
        "fontWeightLight": 300,
        "fontWeightMedium": 400,
        "fontWeightRegular": 400,
        "h1": Object {
          "fontFamily": "\\"Raleway\\", \\"Roboto\\", sans-serif",
          "fontSize": "2.5rem",
          "fontWeight": 700,
          "letterSpacing": "-0.01562em",
          "lineHeight": 1,
        },
        "h2": Object {
          "fontFamily": "\\"Raleway\\", \\"Roboto\\", sans-serif",
          "fontSize": "2rem",
          "fontWeight": 300,
          "letterSpacing": "-0.00833em",
          "lineHeight": 1,
        },
        "h3": Object {
          "fontFamily": "\\"Roboto\\", sans-serif",
          "fontSize": "1.9rem",
          "fontWeight": 300,
          "letterSpacing": "0em",
          "lineHeight": 1,
        },
        "h4": Object {
          "fontFamily": "\\"Raleway\\", \\"Roboto\\", sans-serif",
          "fontSize": "1.25rem",
          "fontWeight": 700,
          "letterSpacing": "0.00735em",
          "lineHeight": 1,
          "textTransform": "uppercase",
        },
        "h5": Object {
          "fontFamily": "\\"Raleway\\", \\"Roboto\\", sans-serif",
          "fontSize": "1rem",
          "fontWeight": 400,
          "letterSpacing": "0em",
          "lineHeight": 1,
          "textTransform": "uppercase",
        },
        "h6": Object {
          "fontFamily": "\\"Roboto\\", sans-serif",
          "fontSize": "0.625rem",
          "fontWeight": 300,
          "letterSpacing": "0.0075em",
          "lineHeight": 1,
        },
        "heading": Object {
          "fontFamily": "\\"Raleway\\", \\"Roboto\\", sans-serif",
          "fontSize": "1rem",
          "fontWeight": 300,
          "letterSpacing": "0.00938em",
          "lineHeight": 1.5,
        },
        "htmlFontSize": 16,
        "overline": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "0.75rem",
          "fontWeight": 400,
          "letterSpacing": "0.08333em",
          "lineHeight": 2.66,
          "textTransform": "uppercase",
        },
        "pxToRem": [Function],
        "round": [Function],
        "subtitle1": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "1rem",
          "fontWeight": 400,
          "letterSpacing": "0.00938em",
          "lineHeight": 1.75,
        },
        "subtitle2": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "0.875rem",
          "fontWeight": 400,
          "letterSpacing": "0.00714em",
          "lineHeight": 1.57,
        },
      },
      "zIndex": Object {
        "appBar": 1100,
        "drawer": 1200,
        "mobileStepper": 1000,
        "modal": 1300,
        "snackbar": 1400,
        "speedDial": 1050,
        "tooltip": 1500,
      },
      Symbol(mui.nested): false,
    }
  }
>
  <ThemeProvider
    theme={
      Object {
        "breakpoints": Object {
          "between": [Function],
          "down": [Function],
          "keys": Array [
            "xs",
            "sm",
            "md",
            "lg",
            "xl",
          ],
          "only": [Function],
          "up": [Function],
          "values": Object {
            "lg": 1280,
            "md": 960,
            "sm": 600,
            "xl": 1920,
            "xs": 0,
          },
          "width": [Function],
        },
        "direction": "ltr",
        "iconSet": Object {
          "config": Object {
            "cssFiles": Array [
              "css/all.css",
            ],
            "fonts": Array [
              Object {
                "fontFace": "
font-family: 'Font Awesome 5 Free';
font-style: normal;
font-weight: 900;
font-display: block;",
                "fontsPath": "./webfonts",
                "licensePath": "./LICENSE.txt",
                "source": "fa-solid-900.eot",
                "sources": Array [
                  Object {
                    "format": "embedded-opentype",
                    "path": "fa-solid-900.eot",
                    "urlAddition": "?#iefix",
                  },
                  Object {
                    "format": "woff2",
                    "path": "fa-solid-900.woff2",
                  },
                  Object {
                    "format": "woff",
                    "path": "fa-solid-900.woff",
                  },
                  Object {
                    "format": "truetype",
                    "path": "fa-solid-900.ttf",
                  },
                  Object {
                    "format": "svg",
                    "path": "fa-solid-900.svg",
                    "urlAddition": "#fontawesome",
                  },
                ],
              },
            ],
            "label": "Font Awesome Solid",
            "name": "fontawesome-solid",
            "npmModule": "@fortawesome/fontawesome-free",
            "type": 0,
          },
          "iconColor": [Function],
          "styles": [Function],
        },
        "icons": Object {
          "config": Object {
            "cssFiles": Array [
              "css/all.css",
            ],
            "fonts": Array [
              Object {
                "fontFace": "
font-family: 'Font Awesome 5 Free';
font-style: normal;
font-weight: 900;
font-display: block;",
                "fontsPath": "./webfonts",
                "licensePath": "./LICENSE.txt",
                "source": "fa-solid-900.eot",
                "sources": Array [
                  Object {
                    "format": "embedded-opentype",
                    "path": "fa-solid-900.eot",
                    "urlAddition": "?#iefix",
                  },
                  Object {
                    "format": "woff2",
                    "path": "fa-solid-900.woff2",
                  },
                  Object {
                    "format": "woff",
                    "path": "fa-solid-900.woff",
                  },
                  Object {
                    "format": "truetype",
                    "path": "fa-solid-900.ttf",
                  },
                  Object {
                    "format": "svg",
                    "path": "fa-solid-900.svg",
                    "urlAddition": "#fontawesome",
                  },
                ],
              },
            ],
            "label": "Font Awesome Solid",
            "name": "fontawesome-solid",
            "npmModule": "@fortawesome/fontawesome-free",
            "type": 0,
          },
          "iconColor": [Function],
          "styles": [Function],
        },
        "label": "SDK Default",
        "licenses": Array [
          "fonts/Raleway/OFL.txt",
          "fonts/Roboto/LICENSE.txt",
        ],
        "localFonts": Object {
          "fonts/Raleway/Raleway-Bold.woff2": [Function],
          "fonts/Raleway/Raleway-Regular.woff2": [Function],
          "fonts/Roboto/Roboto-Bold.woff2": [Function],
          "fonts/Roboto/Roboto-Light.woff2": [Function],
          "fonts/Roboto/Roboto-Regular.woff2": [Function],
        },
        "mixins": Object {
          "gutters": [Function],
          "toolbar": Object {
            "@media (min-width:0px) and (orientation: landscape)": Object {
              "minHeight": 48,
            },
            "@media (min-width:600px)": Object {
              "minHeight": 64,
            },
            "minHeight": 56,
          },
        },
        "name": "sdk-default",
        "overrides": Object {},
        "palette": Object {
          "action": Object {
            "activatedOpacity": 0.12,
            "active": "rgba(0, 0, 0, 0.54)",
            "disabled": "rgba(0, 0, 0, 0.26)",
            "disabledBackground": "rgba(0, 0, 0, 0.12)",
            "disabledOpacity": 0.38,
            "focus": "rgba(0, 0, 0, 0.12)",
            "focusOpacity": 0.12,
            "hover": "rgba(0, 0, 0, 0.04)",
            "hoverOpacity": 0.04,
            "selected": "rgba(0, 0, 0, 0.08)",
            "selectedOpacity": 0.08,
          },
          "adjustAlpha": [Function],
          "augmentColor": [Function],
          "background": Object {
            "default": "#FFFFFF",
            "paper": "#fff",
          },
          "common": Object {
            "black": "#000",
            "white": "#fff",
          },
          "contrastThreshold": 3,
          "divider": "rgba(0, 0, 0, 0.12)",
          "error": Object {
            "contrastText": "#fff",
            "dark": "#d32f2f",
            "light": "#e57373",
            "main": "#f44336",
          },
          "getContrastText": [Function],
          "grey": Object {
            "100": "#f5f5f5",
            "200": "#eeeeee",
            "300": "#e0e0e0",
            "400": "#bdbdbd",
            "50": "#fafafa",
            "500": "#9e9e9e",
            "600": "#757575",
            "700": "#616161",
            "800": "#424242",
            "900": "#212121",
            "A100": "#d5d5d5",
            "A200": "#aaaaaa",
            "A400": "#303030",
            "A700": "#616161",
          },
          "info": Object {
            "contrastText": "#fff",
            "dark": "#1976d2",
            "light": "#64b5f6",
            "main": "#2196f3",
          },
          "primary": Object {
            "contrastText": "#fff",
            "dark": "rgb(86, 53, 178)",
            "light": "rgb(150, 112, 255)",
            "main": "#7C4DFF",
          },
          "secondary": Object {
            "contrastText": "rgba(0, 0, 0, 0.87)",
            "dark": "#083575",
            "light": "#01C9EA",
            "main": "#18A9E6",
          },
          "success": Object {
            "contrastText": "rgba(0, 0, 0, 0.87)",
            "dark": "#388e3c",
            "light": "#81c784",
            "main": "#4caf50",
          },
          "text": Object {
            "disabled": "rgba(0, 0, 0, 0.38)",
            "hint": "rgba(0, 0, 0, 0.38)",
            "primary": "rgba(0, 0, 0, 0.87)",
            "secondary": "rgba(0, 0, 0, 0.54)",
          },
          "tonalOffset": 0.2,
          "type": "light",
          "warning": Object {
            "contrastText": "rgba(0, 0, 0, 0.87)",
            "dark": "#f57c00",
            "light": "#ffb74d",
            "main": "#ff9800",
          },
        },
        "props": Object {},
        "shadows": Array [
          "none",
          "0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12)",
          "0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12)",
          "0px 3px 3px -2px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 1px 8px 0px rgba(0,0,0,0.12)",
          "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
          "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
          "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
          "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
          "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
          "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
          "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
          "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
          "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
          "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
          "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
          "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
          "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
          "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
          "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
          "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
          "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
          "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
          "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
          "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
          "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
        ],
        "shape": Object {
          "borderRadius": 4,
        },
        "spacing": [Function],
        "stylesheets": Array [
          "https://fonts.googleapis.com/css?family=Raleway:400,700|Roboto:300,400,700&display=swap",
        ],
        "transitions": Object {
          "create": [Function],
          "duration": Object {
            "complex": 375,
            "enteringScreen": 225,
            "leavingScreen": 195,
            "short": 250,
            "shorter": 200,
            "shortest": 150,
            "standard": 300,
          },
          "easing": Object {
            "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
            "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
            "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
            "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
          },
          "getAutoHeightDuration": [Function],
        },
        "typography": Object {
          "body": Object {
            "fontFamily": "\\"Roboto\\", sans-serif",
            "fontSize": "0.875rem",
            "fontWeight": 300,
            "letterSpacing": "0.01071em",
            "lineHeight": 1.43,
          },
          "body1": Object {
            "fontFamily": "\\"Raleway\\", \\"Roboto\\", sans-serif",
            "fontSize": "1rem",
            "fontWeight": 300,
            "letterSpacing": "0.00938em",
            "lineHeight": 1.5,
          },
          "body2": Object {
            "fontFamily": "\\"Roboto\\", sans-serif",
            "fontSize": "0.875rem",
            "fontWeight": 300,
            "letterSpacing": "0.01071em",
            "lineHeight": 1.43,
          },
          "button": Object {
            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
            "fontSize": "0.875rem",
            "fontWeight": 400,
            "letterSpacing": "0.02857em",
            "lineHeight": 1.75,
            "textTransform": "uppercase",
          },
          "caption": Object {
            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
            "fontSize": "0.75rem",
            "fontWeight": 400,
            "letterSpacing": "0.03333em",
            "lineHeight": 1.66,
          },
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": 14,
          "fontWeightBold": 700,
          "fontWeightLight": 300,
          "fontWeightMedium": 400,
          "fontWeightRegular": 400,
          "h1": Object {
            "fontFamily": "\\"Raleway\\", \\"Roboto\\", sans-serif",
            "fontSize": "2.5rem",
            "fontWeight": 700,
            "letterSpacing": "-0.01562em",
            "lineHeight": 1,
          },
          "h2": Object {
            "fontFamily": "\\"Raleway\\", \\"Roboto\\", sans-serif",
            "fontSize": "2rem",
            "fontWeight": 300,
            "letterSpacing": "-0.00833em",
            "lineHeight": 1,
          },
          "h3": Object {
            "fontFamily": "\\"Roboto\\", sans-serif",
            "fontSize": "1.9rem",
            "fontWeight": 300,
            "letterSpacing": "0em",
            "lineHeight": 1,
          },
          "h4": Object {
            "fontFamily": "\\"Raleway\\", \\"Roboto\\", sans-serif",
            "fontSize": "1.25rem",
            "fontWeight": 700,
            "letterSpacing": "0.00735em",
            "lineHeight": 1,
            "textTransform": "uppercase",
          },
          "h5": Object {
            "fontFamily": "\\"Raleway\\", \\"Roboto\\", sans-serif",
            "fontSize": "1rem",
            "fontWeight": 400,
            "letterSpacing": "0em",
            "lineHeight": 1,
            "textTransform": "uppercase",
          },
          "h6": Object {
            "fontFamily": "\\"Roboto\\", sans-serif",
            "fontSize": "0.625rem",
            "fontWeight": 300,
            "letterSpacing": "0.0075em",
            "lineHeight": 1,
          },
          "heading": Object {
            "fontFamily": "\\"Raleway\\", \\"Roboto\\", sans-serif",
            "fontSize": "1rem",
            "fontWeight": 300,
            "letterSpacing": "0.00938em",
            "lineHeight": 1.5,
          },
          "htmlFontSize": 16,
          "overline": Object {
            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
            "fontSize": "0.75rem",
            "fontWeight": 400,
            "letterSpacing": "0.08333em",
            "lineHeight": 2.66,
            "textTransform": "uppercase",
          },
          "pxToRem": [Function],
          "round": [Function],
          "subtitle1": Object {
            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
            "fontSize": "1rem",
            "fontWeight": 400,
            "letterSpacing": "0.00938em",
            "lineHeight": 1.75,
          },
          "subtitle2": Object {
            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
            "fontSize": "0.875rem",
            "fontWeight": 400,
            "letterSpacing": "0.00714em",
            "lineHeight": 1.57,
          },
        },
        "zIndex": Object {
          "appBar": 1100,
          "drawer": 1200,
          "mobileStepper": 1000,
          "modal": 1300,
          "snackbar": 1400,
          "speedDial": 1050,
          "tooltip": 1500,
        },
        Symbol(mui.nested): false,
      }
    }
  >
    <ThirdPartyPermissions
      classes={
        Object {
          "centeredSection": "centeredSection",
          "listItem": "listItem",
          "thirdPartyPermissions": Array [],
        }
      }
      iri="iri"
      setThirdPartyPermissions={[MockFunction]}
      thirdPartyPermissions={null}
    />
  </ThemeProvider>
</WithTheme>
`;

exports[`ThirdPartyPermissions it renders a list of Permissions if there are permissions in the list 1`] = `
<WithTheme
  theme={
    Object {
      "breakpoints": Object {
        "between": [Function],
        "down": [Function],
        "keys": Array [
          "xs",
          "sm",
          "md",
          "lg",
          "xl",
        ],
        "only": [Function],
        "up": [Function],
        "values": Object {
          "lg": 1280,
          "md": 960,
          "sm": 600,
          "xl": 1920,
          "xs": 0,
        },
        "width": [Function],
      },
      "direction": "ltr",
      "iconSet": Object {
        "config": Object {
          "cssFiles": Array [
            "css/all.css",
          ],
          "fonts": Array [
            Object {
              "fontFace": "
font-family: 'Font Awesome 5 Free';
font-style: normal;
font-weight: 900;
font-display: block;",
              "fontsPath": "./webfonts",
              "licensePath": "./LICENSE.txt",
              "source": "fa-solid-900.eot",
              "sources": Array [
                Object {
                  "format": "embedded-opentype",
                  "path": "fa-solid-900.eot",
                  "urlAddition": "?#iefix",
                },
                Object {
                  "format": "woff2",
                  "path": "fa-solid-900.woff2",
                },
                Object {
                  "format": "woff",
                  "path": "fa-solid-900.woff",
                },
                Object {
                  "format": "truetype",
                  "path": "fa-solid-900.ttf",
                },
                Object {
                  "format": "svg",
                  "path": "fa-solid-900.svg",
                  "urlAddition": "#fontawesome",
                },
              ],
            },
          ],
          "label": "Font Awesome Solid",
          "name": "fontawesome-solid",
          "npmModule": "@fortawesome/fontawesome-free",
          "type": 0,
        },
        "iconColor": [Function],
        "styles": [Function],
      },
      "icons": Object {
        "config": Object {
          "cssFiles": Array [
            "css/all.css",
          ],
          "fonts": Array [
            Object {
              "fontFace": "
font-family: 'Font Awesome 5 Free';
font-style: normal;
font-weight: 900;
font-display: block;",
              "fontsPath": "./webfonts",
              "licensePath": "./LICENSE.txt",
              "source": "fa-solid-900.eot",
              "sources": Array [
                Object {
                  "format": "embedded-opentype",
                  "path": "fa-solid-900.eot",
                  "urlAddition": "?#iefix",
                },
                Object {
                  "format": "woff2",
                  "path": "fa-solid-900.woff2",
                },
                Object {
                  "format": "woff",
                  "path": "fa-solid-900.woff",
                },
                Object {
                  "format": "truetype",
                  "path": "fa-solid-900.ttf",
                },
                Object {
                  "format": "svg",
                  "path": "fa-solid-900.svg",
                  "urlAddition": "#fontawesome",
                },
              ],
            },
          ],
          "label": "Font Awesome Solid",
          "name": "fontawesome-solid",
          "npmModule": "@fortawesome/fontawesome-free",
          "type": 0,
        },
        "iconColor": [Function],
        "styles": [Function],
      },
      "label": "SDK Default",
      "licenses": Array [
        "fonts/Raleway/OFL.txt",
        "fonts/Roboto/LICENSE.txt",
      ],
      "localFonts": Object {
        "fonts/Raleway/Raleway-Bold.woff2": [Function],
        "fonts/Raleway/Raleway-Regular.woff2": [Function],
        "fonts/Roboto/Roboto-Bold.woff2": [Function],
        "fonts/Roboto/Roboto-Light.woff2": [Function],
        "fonts/Roboto/Roboto-Regular.woff2": [Function],
      },
      "mixins": Object {
        "gutters": [Function],
        "toolbar": Object {
          "@media (min-width:0px) and (orientation: landscape)": Object {
            "minHeight": 48,
          },
          "@media (min-width:600px)": Object {
            "minHeight": 64,
          },
          "minHeight": 56,
        },
      },
      "name": "sdk-default",
      "overrides": Object {},
      "palette": Object {
        "action": Object {
          "activatedOpacity": 0.12,
          "active": "rgba(0, 0, 0, 0.54)",
          "disabled": "rgba(0, 0, 0, 0.26)",
          "disabledBackground": "rgba(0, 0, 0, 0.12)",
          "disabledOpacity": 0.38,
          "focus": "rgba(0, 0, 0, 0.12)",
          "focusOpacity": 0.12,
          "hover": "rgba(0, 0, 0, 0.04)",
          "hoverOpacity": 0.04,
          "selected": "rgba(0, 0, 0, 0.08)",
          "selectedOpacity": 0.08,
        },
        "adjustAlpha": [Function],
        "augmentColor": [Function],
        "background": Object {
          "default": "#FFFFFF",
          "paper": "#fff",
        },
        "common": Object {
          "black": "#000",
          "white": "#fff",
        },
        "contrastThreshold": 3,
        "divider": "rgba(0, 0, 0, 0.12)",
        "error": Object {
          "contrastText": "#fff",
          "dark": "#d32f2f",
          "light": "#e57373",
          "main": "#f44336",
        },
        "getContrastText": [Function],
        "grey": Object {
          "100": "#f5f5f5",
          "200": "#eeeeee",
          "300": "#e0e0e0",
          "400": "#bdbdbd",
          "50": "#fafafa",
          "500": "#9e9e9e",
          "600": "#757575",
          "700": "#616161",
          "800": "#424242",
          "900": "#212121",
          "A100": "#d5d5d5",
          "A200": "#aaaaaa",
          "A400": "#303030",
          "A700": "#616161",
        },
        "info": Object {
          "contrastText": "#fff",
          "dark": "#1976d2",
          "light": "#64b5f6",
          "main": "#2196f3",
        },
        "primary": Object {
          "contrastText": "#fff",
          "dark": "rgb(86, 53, 178)",
          "light": "rgb(150, 112, 255)",
          "main": "#7C4DFF",
        },
        "secondary": Object {
          "contrastText": "rgba(0, 0, 0, 0.87)",
          "dark": "#083575",
          "light": "#01C9EA",
          "main": "#18A9E6",
        },
        "success": Object {
          "contrastText": "rgba(0, 0, 0, 0.87)",
          "dark": "#388e3c",
          "light": "#81c784",
          "main": "#4caf50",
        },
        "text": Object {
          "disabled": "rgba(0, 0, 0, 0.38)",
          "hint": "rgba(0, 0, 0, 0.38)",
          "primary": "rgba(0, 0, 0, 0.87)",
          "secondary": "rgba(0, 0, 0, 0.54)",
        },
        "tonalOffset": 0.2,
        "type": "light",
        "warning": Object {
          "contrastText": "rgba(0, 0, 0, 0.87)",
          "dark": "#f57c00",
          "light": "#ffb74d",
          "main": "#ff9800",
        },
      },
      "props": Object {},
      "shadows": Array [
        "none",
        "0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12)",
        "0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12)",
        "0px 3px 3px -2px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 1px 8px 0px rgba(0,0,0,0.12)",
        "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
        "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
        "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
        "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
        "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
        "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
        "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
        "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
        "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
        "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
        "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
        "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
        "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
        "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
        "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
        "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
        "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
        "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
        "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
        "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
        "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
      ],
      "shape": Object {
        "borderRadius": 4,
      },
      "spacing": [Function],
      "stylesheets": Array [
        "https://fonts.googleapis.com/css?family=Raleway:400,700|Roboto:300,400,700&display=swap",
      ],
      "transitions": Object {
        "create": [Function],
        "duration": Object {
          "complex": 375,
          "enteringScreen": 225,
          "leavingScreen": 195,
          "short": 250,
          "shorter": 200,
          "shortest": 150,
          "standard": 300,
        },
        "easing": Object {
          "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
          "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
          "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
          "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
        },
        "getAutoHeightDuration": [Function],
      },
      "typography": Object {
        "body": Object {
          "fontFamily": "\\"Roboto\\", sans-serif",
          "fontSize": "0.875rem",
          "fontWeight": 300,
          "letterSpacing": "0.01071em",
          "lineHeight": 1.43,
        },
        "body1": Object {
          "fontFamily": "\\"Raleway\\", \\"Roboto\\", sans-serif",
          "fontSize": "1rem",
          "fontWeight": 300,
          "letterSpacing": "0.00938em",
          "lineHeight": 1.5,
        },
        "body2": Object {
          "fontFamily": "\\"Roboto\\", sans-serif",
          "fontSize": "0.875rem",
          "fontWeight": 300,
          "letterSpacing": "0.01071em",
          "lineHeight": 1.43,
        },
        "button": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "0.875rem",
          "fontWeight": 400,
          "letterSpacing": "0.02857em",
          "lineHeight": 1.75,
          "textTransform": "uppercase",
        },
        "caption": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "0.75rem",
          "fontWeight": 400,
          "letterSpacing": "0.03333em",
          "lineHeight": 1.66,
        },
        "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
        "fontSize": 14,
        "fontWeightBold": 700,
        "fontWeightLight": 300,
        "fontWeightMedium": 400,
        "fontWeightRegular": 400,
        "h1": Object {
          "fontFamily": "\\"Raleway\\", \\"Roboto\\", sans-serif",
          "fontSize": "2.5rem",
          "fontWeight": 700,
          "letterSpacing": "-0.01562em",
          "lineHeight": 1,
        },
        "h2": Object {
          "fontFamily": "\\"Raleway\\", \\"Roboto\\", sans-serif",
          "fontSize": "2rem",
          "fontWeight": 300,
          "letterSpacing": "-0.00833em",
          "lineHeight": 1,
        },
        "h3": Object {
          "fontFamily": "\\"Roboto\\", sans-serif",
          "fontSize": "1.9rem",
          "fontWeight": 300,
          "letterSpacing": "0em",
          "lineHeight": 1,
        },
        "h4": Object {
          "fontFamily": "\\"Raleway\\", \\"Roboto\\", sans-serif",
          "fontSize": "1.25rem",
          "fontWeight": 700,
          "letterSpacing": "0.00735em",
          "lineHeight": 1,
          "textTransform": "uppercase",
        },
        "h5": Object {
          "fontFamily": "\\"Raleway\\", \\"Roboto\\", sans-serif",
          "fontSize": "1rem",
          "fontWeight": 400,
          "letterSpacing": "0em",
          "lineHeight": 1,
          "textTransform": "uppercase",
        },
        "h6": Object {
          "fontFamily": "\\"Roboto\\", sans-serif",
          "fontSize": "0.625rem",
          "fontWeight": 300,
          "letterSpacing": "0.0075em",
          "lineHeight": 1,
        },
        "heading": Object {
          "fontFamily": "\\"Raleway\\", \\"Roboto\\", sans-serif",
          "fontSize": "1rem",
          "fontWeight": 300,
          "letterSpacing": "0.00938em",
          "lineHeight": 1.5,
        },
        "htmlFontSize": 16,
        "overline": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "0.75rem",
          "fontWeight": 400,
          "letterSpacing": "0.08333em",
          "lineHeight": 2.66,
          "textTransform": "uppercase",
        },
        "pxToRem": [Function],
        "round": [Function],
        "subtitle1": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "1rem",
          "fontWeight": 400,
          "letterSpacing": "0.00938em",
          "lineHeight": 1.75,
        },
        "subtitle2": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "0.875rem",
          "fontWeight": 400,
          "letterSpacing": "0.00714em",
          "lineHeight": 1.57,
        },
      },
      "zIndex": Object {
        "appBar": 1100,
        "drawer": 1200,
        "mobileStepper": 1000,
        "modal": 1300,
        "snackbar": 1400,
        "speedDial": 1050,
        "tooltip": 1500,
      },
      Symbol(mui.nested): false,
    }
  }
>
  <ThemeProvider
    theme={
      Object {
        "breakpoints": Object {
          "between": [Function],
          "down": [Function],
          "keys": Array [
            "xs",
            "sm",
            "md",
            "lg",
            "xl",
          ],
          "only": [Function],
          "up": [Function],
          "values": Object {
            "lg": 1280,
            "md": 960,
            "sm": 600,
            "xl": 1920,
            "xs": 0,
          },
          "width": [Function],
        },
        "direction": "ltr",
        "iconSet": Object {
          "config": Object {
            "cssFiles": Array [
              "css/all.css",
            ],
            "fonts": Array [
              Object {
                "fontFace": "
font-family: 'Font Awesome 5 Free';
font-style: normal;
font-weight: 900;
font-display: block;",
                "fontsPath": "./webfonts",
                "licensePath": "./LICENSE.txt",
                "source": "fa-solid-900.eot",
                "sources": Array [
                  Object {
                    "format": "embedded-opentype",
                    "path": "fa-solid-900.eot",
                    "urlAddition": "?#iefix",
                  },
                  Object {
                    "format": "woff2",
                    "path": "fa-solid-900.woff2",
                  },
                  Object {
                    "format": "woff",
                    "path": "fa-solid-900.woff",
                  },
                  Object {
                    "format": "truetype",
                    "path": "fa-solid-900.ttf",
                  },
                  Object {
                    "format": "svg",
                    "path": "fa-solid-900.svg",
                    "urlAddition": "#fontawesome",
                  },
                ],
              },
            ],
            "label": "Font Awesome Solid",
            "name": "fontawesome-solid",
            "npmModule": "@fortawesome/fontawesome-free",
            "type": 0,
          },
          "iconColor": [Function],
          "styles": [Function],
        },
        "icons": Object {
          "config": Object {
            "cssFiles": Array [
              "css/all.css",
            ],
            "fonts": Array [
              Object {
                "fontFace": "
font-family: 'Font Awesome 5 Free';
font-style: normal;
font-weight: 900;
font-display: block;",
                "fontsPath": "./webfonts",
                "licensePath": "./LICENSE.txt",
                "source": "fa-solid-900.eot",
                "sources": Array [
                  Object {
                    "format": "embedded-opentype",
                    "path": "fa-solid-900.eot",
                    "urlAddition": "?#iefix",
                  },
                  Object {
                    "format": "woff2",
                    "path": "fa-solid-900.woff2",
                  },
                  Object {
                    "format": "woff",
                    "path": "fa-solid-900.woff",
                  },
                  Object {
                    "format": "truetype",
                    "path": "fa-solid-900.ttf",
                  },
                  Object {
                    "format": "svg",
                    "path": "fa-solid-900.svg",
                    "urlAddition": "#fontawesome",
                  },
                ],
              },
            ],
            "label": "Font Awesome Solid",
            "name": "fontawesome-solid",
            "npmModule": "@fortawesome/fontawesome-free",
            "type": 0,
          },
          "iconColor": [Function],
          "styles": [Function],
        },
        "label": "SDK Default",
        "licenses": Array [
          "fonts/Raleway/OFL.txt",
          "fonts/Roboto/LICENSE.txt",
        ],
        "localFonts": Object {
          "fonts/Raleway/Raleway-Bold.woff2": [Function],
          "fonts/Raleway/Raleway-Regular.woff2": [Function],
          "fonts/Roboto/Roboto-Bold.woff2": [Function],
          "fonts/Roboto/Roboto-Light.woff2": [Function],
          "fonts/Roboto/Roboto-Regular.woff2": [Function],
        },
        "mixins": Object {
          "gutters": [Function],
          "toolbar": Object {
            "@media (min-width:0px) and (orientation: landscape)": Object {
              "minHeight": 48,
            },
            "@media (min-width:600px)": Object {
              "minHeight": 64,
            },
            "minHeight": 56,
          },
        },
        "name": "sdk-default",
        "overrides": Object {},
        "palette": Object {
          "action": Object {
            "activatedOpacity": 0.12,
            "active": "rgba(0, 0, 0, 0.54)",
            "disabled": "rgba(0, 0, 0, 0.26)",
            "disabledBackground": "rgba(0, 0, 0, 0.12)",
            "disabledOpacity": 0.38,
            "focus": "rgba(0, 0, 0, 0.12)",
            "focusOpacity": 0.12,
            "hover": "rgba(0, 0, 0, 0.04)",
            "hoverOpacity": 0.04,
            "selected": "rgba(0, 0, 0, 0.08)",
            "selectedOpacity": 0.08,
          },
          "adjustAlpha": [Function],
          "augmentColor": [Function],
          "background": Object {
            "default": "#FFFFFF",
            "paper": "#fff",
          },
          "common": Object {
            "black": "#000",
            "white": "#fff",
          },
          "contrastThreshold": 3,
          "divider": "rgba(0, 0, 0, 0.12)",
          "error": Object {
            "contrastText": "#fff",
            "dark": "#d32f2f",
            "light": "#e57373",
            "main": "#f44336",
          },
          "getContrastText": [Function],
          "grey": Object {
            "100": "#f5f5f5",
            "200": "#eeeeee",
            "300": "#e0e0e0",
            "400": "#bdbdbd",
            "50": "#fafafa",
            "500": "#9e9e9e",
            "600": "#757575",
            "700": "#616161",
            "800": "#424242",
            "900": "#212121",
            "A100": "#d5d5d5",
            "A200": "#aaaaaa",
            "A400": "#303030",
            "A700": "#616161",
          },
          "info": Object {
            "contrastText": "#fff",
            "dark": "#1976d2",
            "light": "#64b5f6",
            "main": "#2196f3",
          },
          "primary": Object {
            "contrastText": "#fff",
            "dark": "rgb(86, 53, 178)",
            "light": "rgb(150, 112, 255)",
            "main": "#7C4DFF",
          },
          "secondary": Object {
            "contrastText": "rgba(0, 0, 0, 0.87)",
            "dark": "#083575",
            "light": "#01C9EA",
            "main": "#18A9E6",
          },
          "success": Object {
            "contrastText": "rgba(0, 0, 0, 0.87)",
            "dark": "#388e3c",
            "light": "#81c784",
            "main": "#4caf50",
          },
          "text": Object {
            "disabled": "rgba(0, 0, 0, 0.38)",
            "hint": "rgba(0, 0, 0, 0.38)",
            "primary": "rgba(0, 0, 0, 0.87)",
            "secondary": "rgba(0, 0, 0, 0.54)",
          },
          "tonalOffset": 0.2,
          "type": "light",
          "warning": Object {
            "contrastText": "rgba(0, 0, 0, 0.87)",
            "dark": "#f57c00",
            "light": "#ffb74d",
            "main": "#ff9800",
          },
        },
        "props": Object {},
        "shadows": Array [
          "none",
          "0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12)",
          "0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12)",
          "0px 3px 3px -2px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 1px 8px 0px rgba(0,0,0,0.12)",
          "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
          "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
          "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
          "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
          "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
          "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
          "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
          "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
          "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
          "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
          "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
          "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
          "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
          "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
          "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
          "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
          "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
          "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
          "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
          "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
          "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
        ],
        "shape": Object {
          "borderRadius": 4,
        },
        "spacing": [Function],
        "stylesheets": Array [
          "https://fonts.googleapis.com/css?family=Raleway:400,700|Roboto:300,400,700&display=swap",
        ],
        "transitions": Object {
          "create": [Function],
          "duration": Object {
            "complex": 375,
            "enteringScreen": 225,
            "leavingScreen": 195,
            "short": 250,
            "shorter": 200,
            "shortest": 150,
            "standard": 300,
          },
          "easing": Object {
            "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
            "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
            "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
            "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
          },
          "getAutoHeightDuration": [Function],
        },
        "typography": Object {
          "body": Object {
            "fontFamily": "\\"Roboto\\", sans-serif",
            "fontSize": "0.875rem",
            "fontWeight": 300,
            "letterSpacing": "0.01071em",
            "lineHeight": 1.43,
          },
          "body1": Object {
            "fontFamily": "\\"Raleway\\", \\"Roboto\\", sans-serif",
            "fontSize": "1rem",
            "fontWeight": 300,
            "letterSpacing": "0.00938em",
            "lineHeight": 1.5,
          },
          "body2": Object {
            "fontFamily": "\\"Roboto\\", sans-serif",
            "fontSize": "0.875rem",
            "fontWeight": 300,
            "letterSpacing": "0.01071em",
            "lineHeight": 1.43,
          },
          "button": Object {
            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
            "fontSize": "0.875rem",
            "fontWeight": 400,
            "letterSpacing": "0.02857em",
            "lineHeight": 1.75,
            "textTransform": "uppercase",
          },
          "caption": Object {
            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
            "fontSize": "0.75rem",
            "fontWeight": 400,
            "letterSpacing": "0.03333em",
            "lineHeight": 1.66,
          },
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": 14,
          "fontWeightBold": 700,
          "fontWeightLight": 300,
          "fontWeightMedium": 400,
          "fontWeightRegular": 400,
          "h1": Object {
            "fontFamily": "\\"Raleway\\", \\"Roboto\\", sans-serif",
            "fontSize": "2.5rem",
            "fontWeight": 700,
            "letterSpacing": "-0.01562em",
            "lineHeight": 1,
          },
          "h2": Object {
            "fontFamily": "\\"Raleway\\", \\"Roboto\\", sans-serif",
            "fontSize": "2rem",
            "fontWeight": 300,
            "letterSpacing": "-0.00833em",
            "lineHeight": 1,
          },
          "h3": Object {
            "fontFamily": "\\"Roboto\\", sans-serif",
            "fontSize": "1.9rem",
            "fontWeight": 300,
            "letterSpacing": "0em",
            "lineHeight": 1,
          },
          "h4": Object {
            "fontFamily": "\\"Raleway\\", \\"Roboto\\", sans-serif",
            "fontSize": "1.25rem",
            "fontWeight": 700,
            "letterSpacing": "0.00735em",
            "lineHeight": 1,
            "textTransform": "uppercase",
          },
          "h5": Object {
            "fontFamily": "\\"Raleway\\", \\"Roboto\\", sans-serif",
            "fontSize": "1rem",
            "fontWeight": 400,
            "letterSpacing": "0em",
            "lineHeight": 1,
            "textTransform": "uppercase",
          },
          "h6": Object {
            "fontFamily": "\\"Roboto\\", sans-serif",
            "fontSize": "0.625rem",
            "fontWeight": 300,
            "letterSpacing": "0.0075em",
            "lineHeight": 1,
          },
          "heading": Object {
            "fontFamily": "\\"Raleway\\", \\"Roboto\\", sans-serif",
            "fontSize": "1rem",
            "fontWeight": 300,
            "letterSpacing": "0.00938em",
            "lineHeight": 1.5,
          },
          "htmlFontSize": 16,
          "overline": Object {
            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
            "fontSize": "0.75rem",
            "fontWeight": 400,
            "letterSpacing": "0.08333em",
            "lineHeight": 2.66,
            "textTransform": "uppercase",
          },
          "pxToRem": [Function],
          "round": [Function],
          "subtitle1": Object {
            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
            "fontSize": "1rem",
            "fontWeight": 400,
            "letterSpacing": "0.00938em",
            "lineHeight": 1.75,
          },
          "subtitle2": Object {
            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
            "fontSize": "0.875rem",
            "fontWeight": 400,
            "letterSpacing": "0.00714em",
            "lineHeight": 1.57,
          },
        },
        "zIndex": Object {
          "appBar": 1100,
          "drawer": 1200,
          "mobileStepper": 1000,
          "modal": 1300,
          "snackbar": 1400,
          "speedDial": 1050,
          "tooltip": 1500,
        },
        Symbol(mui.nested): false,
      }
    }
  >
    <ThirdPartyPermissions
      classes={
        Object {
          "centeredSection": "centeredSection",
          "listItem": "listItem",
          "thirdPartyPermissions": Array [
            Object {
              "acl": Object {
                "append": true,
                "control": true,
                "read": true,
                "write": true,
              },
              "alias": "Control",
              "profile": Object {
                "avatar": "avatar",
                "name": "name",
                "webId": "webId",
              },
            },
          ],
        }
      }
      iri="iri"
      setThirdPartyPermissions={[MockFunction]}
      thirdPartyPermissions={null}
    />
  </ThemeProvider>
</WithTheme>
`;

exports[`ThirdPartyPermissionsList it renders the third party permissions 1`] = `
<WithTheme
  theme={
    Object {
      "breakpoints": Object {
        "between": [Function],
        "down": [Function],
        "keys": Array [
          "xs",
          "sm",
          "md",
          "lg",
          "xl",
        ],
        "only": [Function],
        "up": [Function],
        "values": Object {
          "lg": 1280,
          "md": 960,
          "sm": 600,
          "xl": 1920,
          "xs": 0,
        },
        "width": [Function],
      },
      "direction": "ltr",
      "iconSet": Object {
        "config": Object {
          "cssFiles": Array [
            "css/all.css",
          ],
          "fonts": Array [
            Object {
              "fontFace": "
font-family: 'Font Awesome 5 Free';
font-style: normal;
font-weight: 900;
font-display: block;",
              "fontsPath": "./webfonts",
              "licensePath": "./LICENSE.txt",
              "source": "fa-solid-900.eot",
              "sources": Array [
                Object {
                  "format": "embedded-opentype",
                  "path": "fa-solid-900.eot",
                  "urlAddition": "?#iefix",
                },
                Object {
                  "format": "woff2",
                  "path": "fa-solid-900.woff2",
                },
                Object {
                  "format": "woff",
                  "path": "fa-solid-900.woff",
                },
                Object {
                  "format": "truetype",
                  "path": "fa-solid-900.ttf",
                },
                Object {
                  "format": "svg",
                  "path": "fa-solid-900.svg",
                  "urlAddition": "#fontawesome",
                },
              ],
            },
          ],
          "label": "Font Awesome Solid",
          "name": "fontawesome-solid",
          "npmModule": "@fortawesome/fontawesome-free",
          "type": 0,
        },
        "iconColor": [Function],
        "styles": [Function],
      },
      "icons": Object {
        "config": Object {
          "cssFiles": Array [
            "css/all.css",
          ],
          "fonts": Array [
            Object {
              "fontFace": "
font-family: 'Font Awesome 5 Free';
font-style: normal;
font-weight: 900;
font-display: block;",
              "fontsPath": "./webfonts",
              "licensePath": "./LICENSE.txt",
              "source": "fa-solid-900.eot",
              "sources": Array [
                Object {
                  "format": "embedded-opentype",
                  "path": "fa-solid-900.eot",
                  "urlAddition": "?#iefix",
                },
                Object {
                  "format": "woff2",
                  "path": "fa-solid-900.woff2",
                },
                Object {
                  "format": "woff",
                  "path": "fa-solid-900.woff",
                },
                Object {
                  "format": "truetype",
                  "path": "fa-solid-900.ttf",
                },
                Object {
                  "format": "svg",
                  "path": "fa-solid-900.svg",
                  "urlAddition": "#fontawesome",
                },
              ],
            },
          ],
          "label": "Font Awesome Solid",
          "name": "fontawesome-solid",
          "npmModule": "@fortawesome/fontawesome-free",
          "type": 0,
        },
        "iconColor": [Function],
        "styles": [Function],
      },
      "label": "SDK Default",
      "licenses": Array [
        "fonts/Raleway/OFL.txt",
        "fonts/Roboto/LICENSE.txt",
      ],
      "localFonts": Object {
        "fonts/Raleway/Raleway-Bold.woff2": [Function],
        "fonts/Raleway/Raleway-Regular.woff2": [Function],
        "fonts/Roboto/Roboto-Bold.woff2": [Function],
        "fonts/Roboto/Roboto-Light.woff2": [Function],
        "fonts/Roboto/Roboto-Regular.woff2": [Function],
      },
      "mixins": Object {
        "gutters": [Function],
        "toolbar": Object {
          "@media (min-width:0px) and (orientation: landscape)": Object {
            "minHeight": 48,
          },
          "@media (min-width:600px)": Object {
            "minHeight": 64,
          },
          "minHeight": 56,
        },
      },
      "name": "sdk-default",
      "overrides": Object {},
      "palette": Object {
        "action": Object {
          "activatedOpacity": 0.12,
          "active": "rgba(0, 0, 0, 0.54)",
          "disabled": "rgba(0, 0, 0, 0.26)",
          "disabledBackground": "rgba(0, 0, 0, 0.12)",
          "disabledOpacity": 0.38,
          "focus": "rgba(0, 0, 0, 0.12)",
          "focusOpacity": 0.12,
          "hover": "rgba(0, 0, 0, 0.04)",
          "hoverOpacity": 0.04,
          "selected": "rgba(0, 0, 0, 0.08)",
          "selectedOpacity": 0.08,
        },
        "adjustAlpha": [Function],
        "augmentColor": [Function],
        "background": Object {
          "default": "#FFFFFF",
          "paper": "#fff",
        },
        "common": Object {
          "black": "#000",
          "white": "#fff",
        },
        "contrastThreshold": 3,
        "divider": "rgba(0, 0, 0, 0.12)",
        "error": Object {
          "contrastText": "#fff",
          "dark": "#d32f2f",
          "light": "#e57373",
          "main": "#f44336",
        },
        "getContrastText": [Function],
        "grey": Object {
          "100": "#f5f5f5",
          "200": "#eeeeee",
          "300": "#e0e0e0",
          "400": "#bdbdbd",
          "50": "#fafafa",
          "500": "#9e9e9e",
          "600": "#757575",
          "700": "#616161",
          "800": "#424242",
          "900": "#212121",
          "A100": "#d5d5d5",
          "A200": "#aaaaaa",
          "A400": "#303030",
          "A700": "#616161",
        },
        "info": Object {
          "contrastText": "#fff",
          "dark": "#1976d2",
          "light": "#64b5f6",
          "main": "#2196f3",
        },
        "primary": Object {
          "contrastText": "#fff",
          "dark": "rgb(86, 53, 178)",
          "light": "rgb(150, 112, 255)",
          "main": "#7C4DFF",
        },
        "secondary": Object {
          "contrastText": "rgba(0, 0, 0, 0.87)",
          "dark": "#083575",
          "light": "#01C9EA",
          "main": "#18A9E6",
        },
        "success": Object {
          "contrastText": "rgba(0, 0, 0, 0.87)",
          "dark": "#388e3c",
          "light": "#81c784",
          "main": "#4caf50",
        },
        "text": Object {
          "disabled": "rgba(0, 0, 0, 0.38)",
          "hint": "rgba(0, 0, 0, 0.38)",
          "primary": "rgba(0, 0, 0, 0.87)",
          "secondary": "rgba(0, 0, 0, 0.54)",
        },
        "tonalOffset": 0.2,
        "type": "light",
        "warning": Object {
          "contrastText": "rgba(0, 0, 0, 0.87)",
          "dark": "#f57c00",
          "light": "#ffb74d",
          "main": "#ff9800",
        },
      },
      "props": Object {},
      "shadows": Array [
        "none",
        "0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12)",
        "0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12)",
        "0px 3px 3px -2px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 1px 8px 0px rgba(0,0,0,0.12)",
        "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
        "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
        "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
        "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
        "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
        "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
        "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
        "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
        "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
        "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
        "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
        "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
        "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
        "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
        "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
        "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
        "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
        "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
        "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
        "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
        "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
      ],
      "shape": Object {
        "borderRadius": 4,
      },
      "spacing": [Function],
      "stylesheets": Array [
        "https://fonts.googleapis.com/css?family=Raleway:400,700|Roboto:300,400,700&display=swap",
      ],
      "transitions": Object {
        "create": [Function],
        "duration": Object {
          "complex": 375,
          "enteringScreen": 225,
          "leavingScreen": 195,
          "short": 250,
          "shorter": 200,
          "shortest": 150,
          "standard": 300,
        },
        "easing": Object {
          "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
          "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
          "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
          "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
        },
        "getAutoHeightDuration": [Function],
      },
      "typography": Object {
        "body": Object {
          "fontFamily": "\\"Roboto\\", sans-serif",
          "fontSize": "0.875rem",
          "fontWeight": 300,
          "letterSpacing": "0.01071em",
          "lineHeight": 1.43,
        },
        "body1": Object {
          "fontFamily": "\\"Raleway\\", \\"Roboto\\", sans-serif",
          "fontSize": "1rem",
          "fontWeight": 300,
          "letterSpacing": "0.00938em",
          "lineHeight": 1.5,
        },
        "body2": Object {
          "fontFamily": "\\"Roboto\\", sans-serif",
          "fontSize": "0.875rem",
          "fontWeight": 300,
          "letterSpacing": "0.01071em",
          "lineHeight": 1.43,
        },
        "button": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "0.875rem",
          "fontWeight": 400,
          "letterSpacing": "0.02857em",
          "lineHeight": 1.75,
          "textTransform": "uppercase",
        },
        "caption": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "0.75rem",
          "fontWeight": 400,
          "letterSpacing": "0.03333em",
          "lineHeight": 1.66,
        },
        "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
        "fontSize": 14,
        "fontWeightBold": 700,
        "fontWeightLight": 300,
        "fontWeightMedium": 400,
        "fontWeightRegular": 400,
        "h1": Object {
          "fontFamily": "\\"Raleway\\", \\"Roboto\\", sans-serif",
          "fontSize": "2.5rem",
          "fontWeight": 700,
          "letterSpacing": "-0.01562em",
          "lineHeight": 1,
        },
        "h2": Object {
          "fontFamily": "\\"Raleway\\", \\"Roboto\\", sans-serif",
          "fontSize": "2rem",
          "fontWeight": 300,
          "letterSpacing": "-0.00833em",
          "lineHeight": 1,
        },
        "h3": Object {
          "fontFamily": "\\"Roboto\\", sans-serif",
          "fontSize": "1.9rem",
          "fontWeight": 300,
          "letterSpacing": "0em",
          "lineHeight": 1,
        },
        "h4": Object {
          "fontFamily": "\\"Raleway\\", \\"Roboto\\", sans-serif",
          "fontSize": "1.25rem",
          "fontWeight": 700,
          "letterSpacing": "0.00735em",
          "lineHeight": 1,
          "textTransform": "uppercase",
        },
        "h5": Object {
          "fontFamily": "\\"Raleway\\", \\"Roboto\\", sans-serif",
          "fontSize": "1rem",
          "fontWeight": 400,
          "letterSpacing": "0em",
          "lineHeight": 1,
          "textTransform": "uppercase",
        },
        "h6": Object {
          "fontFamily": "\\"Roboto\\", sans-serif",
          "fontSize": "0.625rem",
          "fontWeight": 300,
          "letterSpacing": "0.0075em",
          "lineHeight": 1,
        },
        "heading": Object {
          "fontFamily": "\\"Raleway\\", \\"Roboto\\", sans-serif",
          "fontSize": "1rem",
          "fontWeight": 300,
          "letterSpacing": "0.00938em",
          "lineHeight": 1.5,
        },
        "htmlFontSize": 16,
        "overline": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "0.75rem",
          "fontWeight": 400,
          "letterSpacing": "0.08333em",
          "lineHeight": 2.66,
          "textTransform": "uppercase",
        },
        "pxToRem": [Function],
        "round": [Function],
        "subtitle1": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "1rem",
          "fontWeight": 400,
          "letterSpacing": "0.00938em",
          "lineHeight": 1.75,
        },
        "subtitle2": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "0.875rem",
          "fontWeight": 400,
          "letterSpacing": "0.00714em",
          "lineHeight": 1.57,
        },
      },
      "zIndex": Object {
        "appBar": 1100,
        "drawer": 1200,
        "mobileStepper": 1000,
        "modal": 1300,
        "snackbar": 1400,
        "speedDial": 1050,
        "tooltip": 1500,
      },
      Symbol(mui.nested): false,
    }
  }
>
  <ThemeProvider
    theme={
      Object {
        "breakpoints": Object {
          "between": [Function],
          "down": [Function],
          "keys": Array [
            "xs",
            "sm",
            "md",
            "lg",
            "xl",
          ],
          "only": [Function],
          "up": [Function],
          "values": Object {
            "lg": 1280,
            "md": 960,
            "sm": 600,
            "xl": 1920,
            "xs": 0,
          },
          "width": [Function],
        },
        "direction": "ltr",
        "iconSet": Object {
          "config": Object {
            "cssFiles": Array [
              "css/all.css",
            ],
            "fonts": Array [
              Object {
                "fontFace": "
font-family: 'Font Awesome 5 Free';
font-style: normal;
font-weight: 900;
font-display: block;",
                "fontsPath": "./webfonts",
                "licensePath": "./LICENSE.txt",
                "source": "fa-solid-900.eot",
                "sources": Array [
                  Object {
                    "format": "embedded-opentype",
                    "path": "fa-solid-900.eot",
                    "urlAddition": "?#iefix",
                  },
                  Object {
                    "format": "woff2",
                    "path": "fa-solid-900.woff2",
                  },
                  Object {
                    "format": "woff",
                    "path": "fa-solid-900.woff",
                  },
                  Object {
                    "format": "truetype",
                    "path": "fa-solid-900.ttf",
                  },
                  Object {
                    "format": "svg",
                    "path": "fa-solid-900.svg",
                    "urlAddition": "#fontawesome",
                  },
                ],
              },
            ],
            "label": "Font Awesome Solid",
            "name": "fontawesome-solid",
            "npmModule": "@fortawesome/fontawesome-free",
            "type": 0,
          },
          "iconColor": [Function],
          "styles": [Function],
        },
        "icons": Object {
          "config": Object {
            "cssFiles": Array [
              "css/all.css",
            ],
            "fonts": Array [
              Object {
                "fontFace": "
font-family: 'Font Awesome 5 Free';
font-style: normal;
font-weight: 900;
font-display: block;",
                "fontsPath": "./webfonts",
                "licensePath": "./LICENSE.txt",
                "source": "fa-solid-900.eot",
                "sources": Array [
                  Object {
                    "format": "embedded-opentype",
                    "path": "fa-solid-900.eot",
                    "urlAddition": "?#iefix",
                  },
                  Object {
                    "format": "woff2",
                    "path": "fa-solid-900.woff2",
                  },
                  Object {
                    "format": "woff",
                    "path": "fa-solid-900.woff",
                  },
                  Object {
                    "format": "truetype",
                    "path": "fa-solid-900.ttf",
                  },
                  Object {
                    "format": "svg",
                    "path": "fa-solid-900.svg",
                    "urlAddition": "#fontawesome",
                  },
                ],
              },
            ],
            "label": "Font Awesome Solid",
            "name": "fontawesome-solid",
            "npmModule": "@fortawesome/fontawesome-free",
            "type": 0,
          },
          "iconColor": [Function],
          "styles": [Function],
        },
        "label": "SDK Default",
        "licenses": Array [
          "fonts/Raleway/OFL.txt",
          "fonts/Roboto/LICENSE.txt",
        ],
        "localFonts": Object {
          "fonts/Raleway/Raleway-Bold.woff2": [Function],
          "fonts/Raleway/Raleway-Regular.woff2": [Function],
          "fonts/Roboto/Roboto-Bold.woff2": [Function],
          "fonts/Roboto/Roboto-Light.woff2": [Function],
          "fonts/Roboto/Roboto-Regular.woff2": [Function],
        },
        "mixins": Object {
          "gutters": [Function],
          "toolbar": Object {
            "@media (min-width:0px) and (orientation: landscape)": Object {
              "minHeight": 48,
            },
            "@media (min-width:600px)": Object {
              "minHeight": 64,
            },
            "minHeight": 56,
          },
        },
        "name": "sdk-default",
        "overrides": Object {},
        "palette": Object {
          "action": Object {
            "activatedOpacity": 0.12,
            "active": "rgba(0, 0, 0, 0.54)",
            "disabled": "rgba(0, 0, 0, 0.26)",
            "disabledBackground": "rgba(0, 0, 0, 0.12)",
            "disabledOpacity": 0.38,
            "focus": "rgba(0, 0, 0, 0.12)",
            "focusOpacity": 0.12,
            "hover": "rgba(0, 0, 0, 0.04)",
            "hoverOpacity": 0.04,
            "selected": "rgba(0, 0, 0, 0.08)",
            "selectedOpacity": 0.08,
          },
          "adjustAlpha": [Function],
          "augmentColor": [Function],
          "background": Object {
            "default": "#FFFFFF",
            "paper": "#fff",
          },
          "common": Object {
            "black": "#000",
            "white": "#fff",
          },
          "contrastThreshold": 3,
          "divider": "rgba(0, 0, 0, 0.12)",
          "error": Object {
            "contrastText": "#fff",
            "dark": "#d32f2f",
            "light": "#e57373",
            "main": "#f44336",
          },
          "getContrastText": [Function],
          "grey": Object {
            "100": "#f5f5f5",
            "200": "#eeeeee",
            "300": "#e0e0e0",
            "400": "#bdbdbd",
            "50": "#fafafa",
            "500": "#9e9e9e",
            "600": "#757575",
            "700": "#616161",
            "800": "#424242",
            "900": "#212121",
            "A100": "#d5d5d5",
            "A200": "#aaaaaa",
            "A400": "#303030",
            "A700": "#616161",
          },
          "info": Object {
            "contrastText": "#fff",
            "dark": "#1976d2",
            "light": "#64b5f6",
            "main": "#2196f3",
          },
          "primary": Object {
            "contrastText": "#fff",
            "dark": "rgb(86, 53, 178)",
            "light": "rgb(150, 112, 255)",
            "main": "#7C4DFF",
          },
          "secondary": Object {
            "contrastText": "rgba(0, 0, 0, 0.87)",
            "dark": "#083575",
            "light": "#01C9EA",
            "main": "#18A9E6",
          },
          "success": Object {
            "contrastText": "rgba(0, 0, 0, 0.87)",
            "dark": "#388e3c",
            "light": "#81c784",
            "main": "#4caf50",
          },
          "text": Object {
            "disabled": "rgba(0, 0, 0, 0.38)",
            "hint": "rgba(0, 0, 0, 0.38)",
            "primary": "rgba(0, 0, 0, 0.87)",
            "secondary": "rgba(0, 0, 0, 0.54)",
          },
          "tonalOffset": 0.2,
          "type": "light",
          "warning": Object {
            "contrastText": "rgba(0, 0, 0, 0.87)",
            "dark": "#f57c00",
            "light": "#ffb74d",
            "main": "#ff9800",
          },
        },
        "props": Object {},
        "shadows": Array [
          "none",
          "0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12)",
          "0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12)",
          "0px 3px 3px -2px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 1px 8px 0px rgba(0,0,0,0.12)",
          "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
          "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
          "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
          "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
          "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
          "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
          "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
          "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
          "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
          "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
          "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
          "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
          "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
          "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
          "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
          "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
          "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
          "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
          "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
          "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
          "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
        ],
        "shape": Object {
          "borderRadius": 4,
        },
        "spacing": [Function],
        "stylesheets": Array [
          "https://fonts.googleapis.com/css?family=Raleway:400,700|Roboto:300,400,700&display=swap",
        ],
        "transitions": Object {
          "create": [Function],
          "duration": Object {
            "complex": 375,
            "enteringScreen": 225,
            "leavingScreen": 195,
            "short": 250,
            "shorter": 200,
            "shortest": 150,
            "standard": 300,
          },
          "easing": Object {
            "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
            "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
            "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
            "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
          },
          "getAutoHeightDuration": [Function],
        },
        "typography": Object {
          "body": Object {
            "fontFamily": "\\"Roboto\\", sans-serif",
            "fontSize": "0.875rem",
            "fontWeight": 300,
            "letterSpacing": "0.01071em",
            "lineHeight": 1.43,
          },
          "body1": Object {
            "fontFamily": "\\"Raleway\\", \\"Roboto\\", sans-serif",
            "fontSize": "1rem",
            "fontWeight": 300,
            "letterSpacing": "0.00938em",
            "lineHeight": 1.5,
          },
          "body2": Object {
            "fontFamily": "\\"Roboto\\", sans-serif",
            "fontSize": "0.875rem",
            "fontWeight": 300,
            "letterSpacing": "0.01071em",
            "lineHeight": 1.43,
          },
          "button": Object {
            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
            "fontSize": "0.875rem",
            "fontWeight": 400,
            "letterSpacing": "0.02857em",
            "lineHeight": 1.75,
            "textTransform": "uppercase",
          },
          "caption": Object {
            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
            "fontSize": "0.75rem",
            "fontWeight": 400,
            "letterSpacing": "0.03333em",
            "lineHeight": 1.66,
          },
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": 14,
          "fontWeightBold": 700,
          "fontWeightLight": 300,
          "fontWeightMedium": 400,
          "fontWeightRegular": 400,
          "h1": Object {
            "fontFamily": "\\"Raleway\\", \\"Roboto\\", sans-serif",
            "fontSize": "2.5rem",
            "fontWeight": 700,
            "letterSpacing": "-0.01562em",
            "lineHeight": 1,
          },
          "h2": Object {
            "fontFamily": "\\"Raleway\\", \\"Roboto\\", sans-serif",
            "fontSize": "2rem",
            "fontWeight": 300,
            "letterSpacing": "-0.00833em",
            "lineHeight": 1,
          },
          "h3": Object {
            "fontFamily": "\\"Roboto\\", sans-serif",
            "fontSize": "1.9rem",
            "fontWeight": 300,
            "letterSpacing": "0em",
            "lineHeight": 1,
          },
          "h4": Object {
            "fontFamily": "\\"Raleway\\", \\"Roboto\\", sans-serif",
            "fontSize": "1.25rem",
            "fontWeight": 700,
            "letterSpacing": "0.00735em",
            "lineHeight": 1,
            "textTransform": "uppercase",
          },
          "h5": Object {
            "fontFamily": "\\"Raleway\\", \\"Roboto\\", sans-serif",
            "fontSize": "1rem",
            "fontWeight": 400,
            "letterSpacing": "0em",
            "lineHeight": 1,
            "textTransform": "uppercase",
          },
          "h6": Object {
            "fontFamily": "\\"Roboto\\", sans-serif",
            "fontSize": "0.625rem",
            "fontWeight": 300,
            "letterSpacing": "0.0075em",
            "lineHeight": 1,
          },
          "heading": Object {
            "fontFamily": "\\"Raleway\\", \\"Roboto\\", sans-serif",
            "fontSize": "1rem",
            "fontWeight": 300,
            "letterSpacing": "0.00938em",
            "lineHeight": 1.5,
          },
          "htmlFontSize": 16,
          "overline": Object {
            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
            "fontSize": "0.75rem",
            "fontWeight": 400,
            "letterSpacing": "0.08333em",
            "lineHeight": 2.66,
            "textTransform": "uppercase",
          },
          "pxToRem": [Function],
          "round": [Function],
          "subtitle1": Object {
            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
            "fontSize": "1rem",
            "fontWeight": 400,
            "letterSpacing": "0.00938em",
            "lineHeight": 1.75,
          },
          "subtitle2": Object {
            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
            "fontSize": "0.875rem",
            "fontWeight": 400,
            "letterSpacing": "0.00714em",
            "lineHeight": 1.57,
          },
        },
        "zIndex": Object {
          "appBar": 1100,
          "drawer": 1200,
          "mobileStepper": 1000,
          "modal": 1300,
          "snackbar": 1400,
          "speedDial": 1050,
          "tooltip": 1500,
        },
        Symbol(mui.nested): false,
      }
    }
  >
    <ThirdPartyPermissionsList
      classes={
        Object {
          "centeredSection": "centeredSection",
          "listItem": "listItem",
        }
      }
      iri="iri"
      setThirdPartyPermissions={[MockFunction]}
      thirdPartyPermissions={
        Array [
          Object {
            "acl": Object {
              "append": true,
              "control": true,
              "read": true,
              "write": true,
            },
            "alias": "Control",
            "profile": Object {
              "webId": "webId",
            },
            "webId": "webId",
          },
        ]
      }
    >
      <Permission
        classes={
          Object {
            "centeredSection": "centeredSection",
            "listItem": "listItem",
          }
        }
        iri="iri"
        key="webId"
        permission={
          Object {
            "acl": Object {
              "append": true,
              "control": true,
              "read": true,
              "write": true,
            },
            "alias": "Control",
            "profile": Object {
              "webId": "webId",
            },
            "webId": "webId",
          }
        }
        setThirdPartyPermissions={[MockFunction]}
        thirdPartyPermissions={
          Array [
            Object {
              "acl": Object {
                "append": true,
                "control": true,
                "read": true,
                "write": true,
              },
              "alias": "Control",
              "profile": Object {
                "webId": "webId",
              },
              "webId": "webId",
            },
          ]
        }
        warnOnSubmit={false}
      >
        <WithStyles(ForwardRef(ListItem))
          className="listItem"
          key="webId"
        >
          <ForwardRef(ListItem)
            className="listItem"
            classes={
              Object {
                "alignItemsFlexStart": "MuiListItem-alignItemsFlexStart",
                "button": "MuiListItem-button",
                "container": "MuiListItem-container",
                "dense": "MuiListItem-dense",
                "disabled": "Mui-disabled",
                "divider": "MuiListItem-divider",
                "focusVisible": "Mui-focusVisible",
                "gutters": "MuiListItem-gutters",
                "root": "MuiListItem-root",
                "secondaryAction": "MuiListItem-secondaryAction",
                "selected": "Mui-selected",
              }
            }
          >
            <li
              className="MuiListItem-root listItem MuiListItem-gutters"
              disabled={false}
            >
              <WithStyles(ForwardRef(Avatar))
                alt="webId"
                key=".0"
              >
                <ForwardRef(Avatar)
                  alt="webId"
                  classes={
                    Object {
                      "circle": "MuiAvatar-circle",
                      "colorDefault": "MuiAvatar-colorDefault",
                      "fallback": "MuiAvatar-fallback",
                      "img": "MuiAvatar-img",
                      "root": "MuiAvatar-root",
                      "rounded": "MuiAvatar-rounded",
                      "square": "MuiAvatar-square",
                    }
                  }
                >
                  <div
                    className="MuiAvatar-root MuiAvatar-circle MuiAvatar-colorDefault"
                  >
                    <ForwardRef(PersonIcon)
                      className="MuiAvatar-fallback"
                    >
                      <WithStyles(ForwardRef(SvgIcon))
                        className="MuiAvatar-fallback"
                      >
                        <ForwardRef(SvgIcon)
                          className="MuiAvatar-fallback"
                          classes={
                            Object {
                              "colorAction": "MuiSvgIcon-colorAction",
                              "colorDisabled": "MuiSvgIcon-colorDisabled",
                              "colorError": "MuiSvgIcon-colorError",
                              "colorPrimary": "MuiSvgIcon-colorPrimary",
                              "colorSecondary": "MuiSvgIcon-colorSecondary",
                              "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                              "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                              "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                              "root": "MuiSvgIcon-root",
                            }
                          }
                        >
                          <svg
                            aria-hidden={true}
                            className="MuiSvgIcon-root MuiAvatar-fallback"
                            focusable="false"
                            viewBox="0 0 24 24"
                          >
                            <path
                              d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"
                            />
                          </svg>
                        </ForwardRef(SvgIcon)>
                      </WithStyles(ForwardRef(SvgIcon))>
                    </ForwardRef(PersonIcon)>
                  </div>
                </ForwardRef(Avatar)>
              </WithStyles(ForwardRef(Avatar))>
              <WithStyles(ForwardRef(Typography))
                key=".1"
              >
                <ForwardRef(Typography)
                  classes={
                    Object {
                      "alignCenter": "MuiTypography-alignCenter",
                      "alignJustify": "MuiTypography-alignJustify",
                      "alignLeft": "MuiTypography-alignLeft",
                      "alignRight": "MuiTypography-alignRight",
                      "body1": "MuiTypography-body1",
                      "body2": "MuiTypography-body2",
                      "button": "MuiTypography-button",
                      "caption": "MuiTypography-caption",
                      "colorError": "MuiTypography-colorError",
                      "colorInherit": "MuiTypography-colorInherit",
                      "colorPrimary": "MuiTypography-colorPrimary",
                      "colorSecondary": "MuiTypography-colorSecondary",
                      "colorTextPrimary": "MuiTypography-colorTextPrimary",
                      "colorTextSecondary": "MuiTypography-colorTextSecondary",
                      "displayBlock": "MuiTypography-displayBlock",
                      "displayInline": "MuiTypography-displayInline",
                      "gutterBottom": "MuiTypography-gutterBottom",
                      "h1": "MuiTypography-h1",
                      "h2": "MuiTypography-h2",
                      "h3": "MuiTypography-h3",
                      "h4": "MuiTypography-h4",
                      "h5": "MuiTypography-h5",
                      "h6": "MuiTypography-h6",
                      "noWrap": "MuiTypography-noWrap",
                      "overline": "MuiTypography-overline",
                      "paragraph": "MuiTypography-paragraph",
                      "root": "MuiTypography-root",
                      "srOnly": "MuiTypography-srOnly",
                      "subtitle1": "MuiTypography-subtitle1",
                      "subtitle2": "MuiTypography-subtitle2",
                    }
                  }
                >
                  <p
                    className="MuiTypography-root MuiTypography-body1"
                  >
                    webId
                  </p>
                </ForwardRef(Typography)>
              </WithStyles(ForwardRef(Typography))>
              <PermissionsForm
                key=".2"
                onSave={[Function]}
                permission={
                  Object {
                    "acl": Object {
                      "append": true,
                      "control": true,
                      "read": true,
                      "write": true,
                    },
                    "alias": "Control",
                    "profile": Object {
                      "webId": "webId",
                    },
                    "webId": "webId",
                  }
                }
                warnOnSubmit={false}
              >
                <section>
                  <WithStyles(ForwardRef(Select))
                    id="demo-simple-select"
                    labelId="demo-simple-select-label"
                    onChange={[Function]}
                    value="Control"
                  >
                    <ForwardRef(Select)
                      classes={
                        Object {
                          "disabled": "Mui-disabled",
                          "filled": "MuiSelect-filled",
                          "icon": "MuiSelect-icon",
                          "iconFilled": "MuiSelect-iconFilled",
                          "iconOpen": "MuiSelect-iconOpen",
                          "iconOutlined": "MuiSelect-iconOutlined",
                          "nativeInput": "MuiSelect-nativeInput",
                          "outlined": "MuiSelect-outlined",
                          "root": "MuiSelect-root",
                          "select": "MuiSelect-select",
                          "selectMenu": "MuiSelect-selectMenu",
                        }
                      }
                      id="demo-simple-select"
                      labelId="demo-simple-select-label"
                      onChange={[Function]}
                      value="Control"
                    >
                      <WithStyles(ForwardRef(Input))
                        inputComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "propTypes": Object {
                              "IconComponent": [Function],
                              "MenuProps": [Function],
                              "SelectDisplayProps": [Function],
                              "aria-label": [Function],
                              "autoFocus": [Function],
                              "autoWidth": [Function],
                              "children": [Function],
                              "className": [Function],
                              "classes": [Function],
                              "defaultValue": [Function],
                              "disabled": [Function],
                              "displayEmpty": [Function],
                              "inputRef": [Function],
                              "labelId": [Function],
                              "multiple": [Function],
                              "name": [Function],
                              "onBlur": [Function],
                              "onChange": [Function],
                              "onClose": [Function],
                              "onFocus": [Function],
                              "onOpen": [Function],
                              "open": [Function],
                              "readOnly": [Function],
                              "renderValue": [Function],
                              "tabIndex": [Function],
                              "type": [Function],
                              "value": [Function],
                              "variant": [Function],
                            },
                            "render": [Function],
                          }
                        }
                        inputProps={
                          Object {
                            "IconComponent": Object {
                              "$$typeof": Symbol(react.memo),
                              "compare": null,
                              "type": Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "render": [Function],
                              },
                            },
                            "MenuProps": undefined,
                            "SelectDisplayProps": Object {
                              "id": "demo-simple-select",
                            },
                            "autoWidth": false,
                            "children": Array [
                              <WithStyles(ForwardRef(MenuItem))
                                value="No access"
                              >
                                No access
                              </WithStyles(ForwardRef(MenuItem))>,
                              <WithStyles(ForwardRef(MenuItem))
                                value="View"
                              >
                                View
                              </WithStyles(ForwardRef(MenuItem))>,
                              <WithStyles(ForwardRef(MenuItem))
                                value="Edit"
                              >
                                Edit
                              </WithStyles(ForwardRef(MenuItem))>,
                              <WithStyles(ForwardRef(MenuItem))
                                value="Append"
                              >
                                Append
                              </WithStyles(ForwardRef(MenuItem))>,
                              <WithStyles(ForwardRef(MenuItem))
                                value="Control"
                              >
                                Control
                              </WithStyles(ForwardRef(MenuItem))>,
                            ],
                            "classes": Object {
                              "disabled": "Mui-disabled",
                              "filled": "MuiSelect-filled",
                              "icon": "MuiSelect-icon",
                              "iconFilled": "MuiSelect-iconFilled",
                              "iconOpen": "MuiSelect-iconOpen",
                              "iconOutlined": "MuiSelect-iconOutlined",
                              "nativeInput": "MuiSelect-nativeInput",
                              "outlined": "MuiSelect-outlined",
                              "root": "MuiSelect-root",
                              "select": "MuiSelect-select",
                              "selectMenu": "MuiSelect-selectMenu",
                            },
                            "displayEmpty": false,
                            "labelId": "demo-simple-select-label",
                            "multiple": false,
                            "onClose": undefined,
                            "onOpen": undefined,
                            "open": undefined,
                            "renderValue": undefined,
                            "type": undefined,
                            "variant": "standard",
                          }
                        }
                        onChange={[Function]}
                        value="Control"
                      >
                        <ForwardRef(Input)
                          classes={
                            Object {
                              "colorSecondary": "MuiInput-colorSecondary",
                              "disabled": "Mui-disabled",
                              "error": "Mui-error",
                              "focused": "Mui-focused",
                              "formControl": "MuiInput-formControl",
                              "fullWidth": "MuiInput-fullWidth",
                              "input": "MuiInput-input",
                              "inputMarginDense": "MuiInput-inputMarginDense",
                              "inputMultiline": "MuiInput-inputMultiline",
                              "inputTypeSearch": "MuiInput-inputTypeSearch",
                              "marginDense": "MuiInput-marginDense",
                              "multiline": "MuiInput-multiline",
                              "root": "MuiInput-root",
                              "underline": "MuiInput-underline",
                            }
                          }
                          inputComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "propTypes": Object {
                                "IconComponent": [Function],
                                "MenuProps": [Function],
                                "SelectDisplayProps": [Function],
                                "aria-label": [Function],
                                "autoFocus": [Function],
                                "autoWidth": [Function],
                                "children": [Function],
                                "className": [Function],
                                "classes": [Function],
                                "defaultValue": [Function],
                                "disabled": [Function],
                                "displayEmpty": [Function],
                                "inputRef": [Function],
                                "labelId": [Function],
                                "multiple": [Function],
                                "name": [Function],
                                "onBlur": [Function],
                                "onChange": [Function],
                                "onClose": [Function],
                                "onFocus": [Function],
                                "onOpen": [Function],
                                "open": [Function],
                                "readOnly": [Function],
                                "renderValue": [Function],
                                "tabIndex": [Function],
                                "type": [Function],
                                "value": [Function],
                                "variant": [Function],
                              },
                              "render": [Function],
                            }
                          }
                          inputProps={
                            Object {
                              "IconComponent": Object {
                                "$$typeof": Symbol(react.memo),
                                "compare": null,
                                "type": Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "render": [Function],
                                },
                              },
                              "MenuProps": undefined,
                              "SelectDisplayProps": Object {
                                "id": "demo-simple-select",
                              },
                              "autoWidth": false,
                              "children": Array [
                                <WithStyles(ForwardRef(MenuItem))
                                  value="No access"
                                >
                                  No access
                                </WithStyles(ForwardRef(MenuItem))>,
                                <WithStyles(ForwardRef(MenuItem))
                                  value="View"
                                >
                                  View
                                </WithStyles(ForwardRef(MenuItem))>,
                                <WithStyles(ForwardRef(MenuItem))
                                  value="Edit"
                                >
                                  Edit
                                </WithStyles(ForwardRef(MenuItem))>,
                                <WithStyles(ForwardRef(MenuItem))
                                  value="Append"
                                >
                                  Append
                                </WithStyles(ForwardRef(MenuItem))>,
                                <WithStyles(ForwardRef(MenuItem))
                                  value="Control"
                                >
                                  Control
                                </WithStyles(ForwardRef(MenuItem))>,
                              ],
                              "classes": Object {
                                "disabled": "Mui-disabled",
                                "filled": "MuiSelect-filled",
                                "icon": "MuiSelect-icon",
                                "iconFilled": "MuiSelect-iconFilled",
                                "iconOpen": "MuiSelect-iconOpen",
                                "iconOutlined": "MuiSelect-iconOutlined",
                                "nativeInput": "MuiSelect-nativeInput",
                                "outlined": "MuiSelect-outlined",
                                "root": "MuiSelect-root",
                                "select": "MuiSelect-select",
                                "selectMenu": "MuiSelect-selectMenu",
                              },
                              "displayEmpty": false,
                              "labelId": "demo-simple-select-label",
                              "multiple": false,
                              "onClose": undefined,
                              "onOpen": undefined,
                              "open": undefined,
                              "renderValue": undefined,
                              "type": undefined,
                              "variant": "standard",
                            }
                          }
                          onChange={[Function]}
                          value="Control"
                        >
                          <WithStyles(ForwardRef(InputBase))
                            classes={
                              Object {
                                "colorSecondary": "MuiInput-colorSecondary",
                                "disabled": "Mui-disabled",
                                "error": "Mui-error",
                                "focused": "Mui-focused",
                                "formControl": "MuiInput-formControl",
                                "fullWidth": "MuiInput-fullWidth",
                                "input": "MuiInput-input",
                                "inputMarginDense": "MuiInput-inputMarginDense",
                                "inputMultiline": "MuiInput-inputMultiline",
                                "inputTypeSearch": "MuiInput-inputTypeSearch",
                                "marginDense": "MuiInput-marginDense",
                                "multiline": "MuiInput-multiline",
                                "root": "MuiInput-root MuiInput-underline",
                                "underline": null,
                              }
                            }
                            fullWidth={false}
                            inputComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "propTypes": Object {
                                  "IconComponent": [Function],
                                  "MenuProps": [Function],
                                  "SelectDisplayProps": [Function],
                                  "aria-label": [Function],
                                  "autoFocus": [Function],
                                  "autoWidth": [Function],
                                  "children": [Function],
                                  "className": [Function],
                                  "classes": [Function],
                                  "defaultValue": [Function],
                                  "disabled": [Function],
                                  "displayEmpty": [Function],
                                  "inputRef": [Function],
                                  "labelId": [Function],
                                  "multiple": [Function],
                                  "name": [Function],
                                  "onBlur": [Function],
                                  "onChange": [Function],
                                  "onClose": [Function],
                                  "onFocus": [Function],
                                  "onOpen": [Function],
                                  "open": [Function],
                                  "readOnly": [Function],
                                  "renderValue": [Function],
                                  "tabIndex": [Function],
                                  "type": [Function],
                                  "value": [Function],
                                  "variant": [Function],
                                },
                                "render": [Function],
                              }
                            }
                            inputProps={
                              Object {
                                "IconComponent": Object {
                                  "$$typeof": Symbol(react.memo),
                                  "compare": null,
                                  "type": Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "render": [Function],
                                  },
                                },
                                "MenuProps": undefined,
                                "SelectDisplayProps": Object {
                                  "id": "demo-simple-select",
                                },
                                "autoWidth": false,
                                "children": Array [
                                  <WithStyles(ForwardRef(MenuItem))
                                    value="No access"
                                  >
                                    No access
                                  </WithStyles(ForwardRef(MenuItem))>,
                                  <WithStyles(ForwardRef(MenuItem))
                                    value="View"
                                  >
                                    View
                                  </WithStyles(ForwardRef(MenuItem))>,
                                  <WithStyles(ForwardRef(MenuItem))
                                    value="Edit"
                                  >
                                    Edit
                                  </WithStyles(ForwardRef(MenuItem))>,
                                  <WithStyles(ForwardRef(MenuItem))
                                    value="Append"
                                  >
                                    Append
                                  </WithStyles(ForwardRef(MenuItem))>,
                                  <WithStyles(ForwardRef(MenuItem))
                                    value="Control"
                                  >
                                    Control
                                  </WithStyles(ForwardRef(MenuItem))>,
                                ],
                                "classes": Object {
                                  "disabled": "Mui-disabled",
                                  "filled": "MuiSelect-filled",
                                  "icon": "MuiSelect-icon",
                                  "iconFilled": "MuiSelect-iconFilled",
                                  "iconOpen": "MuiSelect-iconOpen",
                                  "iconOutlined": "MuiSelect-iconOutlined",
                                  "nativeInput": "MuiSelect-nativeInput",
                                  "outlined": "MuiSelect-outlined",
                                  "root": "MuiSelect-root",
                                  "select": "MuiSelect-select",
                                  "selectMenu": "MuiSelect-selectMenu",
                                },
                                "displayEmpty": false,
                                "labelId": "demo-simple-select-label",
                                "multiple": false,
                                "onClose": undefined,
                                "onOpen": undefined,
                                "open": undefined,
                                "renderValue": undefined,
                                "type": undefined,
                                "variant": "standard",
                              }
                            }
                            multiline={false}
                            onChange={[Function]}
                            type="text"
                            value="Control"
                          >
                            <ForwardRef(InputBase)
                              classes={
                                Object {
                                  "adornedEnd": "MuiInputBase-adornedEnd",
                                  "adornedStart": "MuiInputBase-adornedStart",
                                  "colorSecondary": "MuiInputBase-colorSecondary MuiInput-colorSecondary",
                                  "disabled": "Mui-disabled Mui-disabled",
                                  "error": "Mui-error Mui-error",
                                  "focused": "Mui-focused Mui-focused",
                                  "formControl": "MuiInputBase-formControl MuiInput-formControl",
                                  "fullWidth": "MuiInputBase-fullWidth MuiInput-fullWidth",
                                  "input": "MuiInputBase-input MuiInput-input",
                                  "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
                                  "inputAdornedStart": "MuiInputBase-inputAdornedStart",
                                  "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                                  "inputMarginDense": "MuiInputBase-inputMarginDense MuiInput-inputMarginDense",
                                  "inputMultiline": "MuiInputBase-inputMultiline MuiInput-inputMultiline",
                                  "inputTypeSearch": "MuiInputBase-inputTypeSearch MuiInput-inputTypeSearch",
                                  "marginDense": "MuiInputBase-marginDense MuiInput-marginDense",
                                  "multiline": "MuiInputBase-multiline MuiInput-multiline",
                                  "root": "MuiInputBase-root MuiInput-root MuiInput-underline",
                                }
                              }
                              fullWidth={false}
                              inputComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "propTypes": Object {
                                    "IconComponent": [Function],
                                    "MenuProps": [Function],
                                    "SelectDisplayProps": [Function],
                                    "aria-label": [Function],
                                    "autoFocus": [Function],
                                    "autoWidth": [Function],
                                    "children": [Function],
                                    "className": [Function],
                                    "classes": [Function],
                                    "defaultValue": [Function],
                                    "disabled": [Function],
                                    "displayEmpty": [Function],
                                    "inputRef": [Function],
                                    "labelId": [Function],
                                    "multiple": [Function],
                                    "name": [Function],
                                    "onBlur": [Function],
                                    "onChange": [Function],
                                    "onClose": [Function],
                                    "onFocus": [Function],
                                    "onOpen": [Function],
                                    "open": [Function],
                                    "readOnly": [Function],
                                    "renderValue": [Function],
                                    "tabIndex": [Function],
                                    "type": [Function],
                                    "value": [Function],
                                    "variant": [Function],
                                  },
                                  "render": [Function],
                                }
                              }
                              inputProps={
                                Object {
                                  "IconComponent": Object {
                                    "$$typeof": Symbol(react.memo),
                                    "compare": null,
                                    "type": Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "render": [Function],
                                    },
                                  },
                                  "MenuProps": undefined,
                                  "SelectDisplayProps": Object {
                                    "id": "demo-simple-select",
                                  },
                                  "autoWidth": false,
                                  "children": Array [
                                    <WithStyles(ForwardRef(MenuItem))
                                      value="No access"
                                    >
                                      No access
                                    </WithStyles(ForwardRef(MenuItem))>,
                                    <WithStyles(ForwardRef(MenuItem))
                                      value="View"
                                    >
                                      View
                                    </WithStyles(ForwardRef(MenuItem))>,
                                    <WithStyles(ForwardRef(MenuItem))
                                      value="Edit"
                                    >
                                      Edit
                                    </WithStyles(ForwardRef(MenuItem))>,
                                    <WithStyles(ForwardRef(MenuItem))
                                      value="Append"
                                    >
                                      Append
                                    </WithStyles(ForwardRef(MenuItem))>,
                                    <WithStyles(ForwardRef(MenuItem))
                                      value="Control"
                                    >
                                      Control
                                    </WithStyles(ForwardRef(MenuItem))>,
                                  ],
                                  "classes": Object {
                                    "disabled": "Mui-disabled",
                                    "filled": "MuiSelect-filled",
                                    "icon": "MuiSelect-icon",
                                    "iconFilled": "MuiSelect-iconFilled",
                                    "iconOpen": "MuiSelect-iconOpen",
                                    "iconOutlined": "MuiSelect-iconOutlined",
                                    "nativeInput": "MuiSelect-nativeInput",
                                    "outlined": "MuiSelect-outlined",
                                    "root": "MuiSelect-root",
                                    "select": "MuiSelect-select",
                                    "selectMenu": "MuiSelect-selectMenu",
                                  },
                                  "displayEmpty": false,
                                  "labelId": "demo-simple-select-label",
                                  "multiple": false,
                                  "onClose": undefined,
                                  "onOpen": undefined,
                                  "open": undefined,
                                  "renderValue": undefined,
                                  "type": undefined,
                                  "variant": "standard",
                                }
                              }
                              multiline={false}
                              onChange={[Function]}
                              type="text"
                              value="Control"
                            >
                              <div
                                className="MuiInputBase-root MuiInput-root MuiInput-underline"
                                onClick={[Function]}
                              >
                                <ForwardRef(SelectInput)
                                  IconComponent={
                                    Object {
                                      "$$typeof": Symbol(react.memo),
                                      "compare": null,
                                      "type": Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "render": [Function],
                                      },
                                    }
                                  }
                                  SelectDisplayProps={
                                    Object {
                                      "id": "demo-simple-select",
                                    }
                                  }
                                  autoWidth={false}
                                  className="MuiInputBase-input MuiInput-input"
                                  classes={
                                    Object {
                                      "disabled": "Mui-disabled",
                                      "filled": "MuiSelect-filled",
                                      "icon": "MuiSelect-icon",
                                      "iconFilled": "MuiSelect-iconFilled",
                                      "iconOpen": "MuiSelect-iconOpen",
                                      "iconOutlined": "MuiSelect-iconOutlined",
                                      "nativeInput": "MuiSelect-nativeInput",
                                      "outlined": "MuiSelect-outlined",
                                      "root": "MuiSelect-root",
                                      "select": "MuiSelect-select",
                                      "selectMenu": "MuiSelect-selectMenu",
                                    }
                                  }
                                  displayEmpty={false}
                                  inputRef={[Function]}
                                  labelId="demo-simple-select-label"
                                  multiple={false}
                                  onAnimationStart={[Function]}
                                  onBlur={[Function]}
                                  onChange={[Function]}
                                  onFocus={[Function]}
                                  value="Control"
                                  variant="standard"
                                >
                                  <div
                                    aria-haspopup="listbox"
                                    aria-labelledby="demo-simple-select-label demo-simple-select"
                                    className="MuiSelect-root MuiSelect-select MuiSelect-selectMenu MuiInputBase-input MuiInput-input"
                                    id="demo-simple-select"
                                    onBlur={[Function]}
                                    onFocus={[Function]}
                                    onKeyDown={[Function]}
                                    onMouseDown={[Function]}
                                    role="button"
                                    tabIndex={0}
                                  >
                                    Control
                                  </div>
                                  <input
                                    aria-hidden={true}
                                    className="MuiSelect-nativeInput"
                                    onAnimationStart={[Function]}
                                    onChange={[Function]}
                                    tabIndex={-1}
                                    value="Control"
                                  />
                                  <ForwardRef(ArrowDropDownIcon)
                                    className="MuiSelect-icon"
                                  >
                                    <WithStyles(ForwardRef(SvgIcon))
                                      className="MuiSelect-icon"
                                    >
                                      <ForwardRef(SvgIcon)
                                        className="MuiSelect-icon"
                                        classes={
                                          Object {
                                            "colorAction": "MuiSvgIcon-colorAction",
                                            "colorDisabled": "MuiSvgIcon-colorDisabled",
                                            "colorError": "MuiSvgIcon-colorError",
                                            "colorPrimary": "MuiSvgIcon-colorPrimary",
                                            "colorSecondary": "MuiSvgIcon-colorSecondary",
                                            "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                            "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                            "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                            "root": "MuiSvgIcon-root",
                                          }
                                        }
                                      >
                                        <svg
                                          aria-hidden={true}
                                          className="MuiSvgIcon-root MuiSelect-icon"
                                          focusable="false"
                                          viewBox="0 0 24 24"
                                        >
                                          <path
                                            d="M7 10l5 5 5-5z"
                                          />
                                        </svg>
                                      </ForwardRef(SvgIcon)>
                                    </WithStyles(ForwardRef(SvgIcon))>
                                  </ForwardRef(ArrowDropDownIcon)>
                                  <WithStyles(ForwardRef(Menu))
                                    MenuListProps={
                                      Object {
                                        "aria-labelledby": "demo-simple-select-label",
                                        "disableListWrap": true,
                                        "role": "listbox",
                                      }
                                    }
                                    PaperProps={
                                      Object {
                                        "style": Object {
                                          "minWidth": undefined,
                                        },
                                      }
                                    }
                                    anchorEl={
                                      <div
                                        aria-haspopup="listbox"
                                        aria-labelledby="demo-simple-select-label demo-simple-select"
                                        class="MuiSelect-root MuiSelect-select MuiSelect-selectMenu MuiInputBase-input MuiInput-input"
                                        id="demo-simple-select"
                                        role="button"
                                        tabindex="0"
                                      >
                                        Control
                                      </div>
                                    }
                                    id="menu-"
                                    onClose={[Function]}
                                    open={false}
                                  >
                                    <ForwardRef(Menu)
                                      MenuListProps={
                                        Object {
                                          "aria-labelledby": "demo-simple-select-label",
                                          "disableListWrap": true,
                                          "role": "listbox",
                                        }
                                      }
                                      PaperProps={
                                        Object {
                                          "style": Object {
                                            "minWidth": undefined,
                                          },
                                        }
                                      }
                                      anchorEl={
                                        <div
                                          aria-haspopup="listbox"
                                          aria-labelledby="demo-simple-select-label demo-simple-select"
                                          class="MuiSelect-root MuiSelect-select MuiSelect-selectMenu MuiInputBase-input MuiInput-input"
                                          id="demo-simple-select"
                                          role="button"
                                          tabindex="0"
                                        >
                                          Control
                                        </div>
                                      }
                                      classes={
                                        Object {
                                          "list": "MuiMenu-list",
                                          "paper": "MuiMenu-paper",
                                        }
                                      }
                                      id="menu-"
                                      onClose={[Function]}
                                      open={false}
                                    >
                                      <WithStyles(ForwardRef(Popover))
                                        PaperProps={
                                          Object {
                                            "classes": Object {
                                              "root": "MuiMenu-paper",
                                            },
                                            "style": Object {
                                              "minWidth": undefined,
                                            },
                                          }
                                        }
                                        anchorEl={
                                          <div
                                            aria-haspopup="listbox"
                                            aria-labelledby="demo-simple-select-label demo-simple-select"
                                            class="MuiSelect-root MuiSelect-select MuiSelect-selectMenu MuiInputBase-input MuiInput-input"
                                            id="demo-simple-select"
                                            role="button"
                                            tabindex="0"
                                          >
                                            Control
                                          </div>
                                        }
                                        anchorOrigin={
                                          Object {
                                            "horizontal": "left",
                                            "vertical": "top",
                                          }
                                        }
                                        getContentAnchorEl={[Function]}
                                        id="menu-"
                                        onClose={[Function]}
                                        onEntering={[Function]}
                                        open={false}
                                        transformOrigin={
                                          Object {
                                            "horizontal": "left",
                                            "vertical": "top",
                                          }
                                        }
                                        transitionDuration="auto"
                                      >
                                        <ForwardRef(Popover)
                                          PaperProps={
                                            Object {
                                              "classes": Object {
                                                "root": "MuiMenu-paper",
                                              },
                                              "style": Object {
                                                "minWidth": undefined,
                                              },
                                            }
                                          }
                                          anchorEl={
                                            <div
                                              aria-haspopup="listbox"
                                              aria-labelledby="demo-simple-select-label demo-simple-select"
                                              class="MuiSelect-root MuiSelect-select MuiSelect-selectMenu MuiInputBase-input MuiInput-input"
                                              id="demo-simple-select"
                                              role="button"
                                              tabindex="0"
                                            >
                                              Control
                                            </div>
                                          }
                                          anchorOrigin={
                                            Object {
                                              "horizontal": "left",
                                              "vertical": "top",
                                            }
                                          }
                                          classes={
                                            Object {
                                              "paper": "MuiPopover-paper",
                                              "root": "MuiPopover-root",
                                            }
                                          }
                                          getContentAnchorEl={[Function]}
                                          id="menu-"
                                          onClose={[Function]}
                                          onEntering={[Function]}
                                          open={false}
                                          transformOrigin={
                                            Object {
                                              "horizontal": "left",
                                              "vertical": "top",
                                            }
                                          }
                                          transitionDuration="auto"
                                        >
                                          <ForwardRef(Modal)
                                            BackdropProps={
                                              Object {
                                                "invisible": true,
                                              }
                                            }
                                            className="MuiPopover-root"
                                            container={<body />}
                                            id="menu-"
                                            onClose={[Function]}
                                            open={false}
                                          />
                                        </ForwardRef(Popover)>
                                      </WithStyles(ForwardRef(Popover))>
                                    </ForwardRef(Menu)>
                                  </WithStyles(ForwardRef(Menu))>
                                </ForwardRef(SelectInput)>
                              </div>
                            </ForwardRef(InputBase)>
                          </WithStyles(ForwardRef(InputBase))>
                        </ForwardRef(Input)>
                      </WithStyles(ForwardRef(Input))>
                    </ForwardRef(Select)>
                  </WithStyles(ForwardRef(Select))>
                </section>
              </PermissionsForm>
            </li>
          </ForwardRef(ListItem)>
        </WithStyles(ForwardRef(ListItem))>
      </Permission>
    </ThirdPartyPermissionsList>
  </ThemeProvider>
</WithTheme>
`;
